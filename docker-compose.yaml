services:
  traefik:
    image: traefik:v3.1
    command:
      - '--providers.docker'
      - '--providers.docker.exposedbydefault=false'
      - '--entryPoints.websecure.address=:443'
      - '--certificatesresolvers.myresolver.acme.tlschallenge=true'
      - '--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}'
      - '--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.web.http.redirections.entrypoint.to=websecure'
      - '--entrypoints.web.http.redirections.entrypoint.scheme=https'
    ports:
      - 80:80
      - 443:443
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  api:
    image: ghcr.io/coeeter/aniways-api:${GITHUB_SHA:-latest}
    secrets:
      - env-v4
    environment:
      - ENV_FILE=/run/secrets/env-v4
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.services.api.loadbalancer.server.port=8080'
      - 'traefik.http.routers.api.rule=Host(`${API_DOMAIN}`)'
      - 'traefik.http.routers.api.entrypoints=websecure'
      - 'traefik.http.routers.api.tls.certresolver=myresolver'
    deploy:
      update_config:
        order: start-first
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
    depends_on:
      - db
      - redis

  website:
    image: ghcr.io/coeeter/aniways-website:${GITHUB_SHA:-latest}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.services.website.loadbalancer.server.port=3000'
      - 'traefik.http.routers.website.rule=Host(`${WEBSITE_DOMAIN}`)'
      - 'traefik.http.routers.website.entrypoints=websecure'
      - 'traefik.http.routers.website.tls.certresolver=myresolver'
    environment:
      - PUBLIC_API_URL=${API_DOMAIN}
      - PUBLIC_STREAMING_URL=${STREAMING_DOMAIN}
    deploy:
      update_config:
        order: start-first
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
    depends_on:
      - api

  streaming:
    image: ghcr.io/coeeter/aniways-streaming:${GITHUB_SHA:-latest}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.services.streaming.loadbalancer.server.port=1234'
      - 'traefik.http.routers.streaming.rule=Host(`${STREAMING_DOMAIN}`)'
      - 'traefik.http.routers.streaming.entrypoints=websecure'
      - 'traefik.http.routers.streaming.tls.certresolver=myresolver'
    deploy:
      update_config:
        order: start-first
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data

  db:
    image: postgres
    user: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=aniways
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  letsencrypt:
  redis-data:
  postgres-data:

secrets:
  env-v4:
    external: true
