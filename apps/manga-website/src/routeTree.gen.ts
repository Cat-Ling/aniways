/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as SettingsImport } from "./routes/settings";
import { Route as SearchImport } from "./routes/search";
import { Route as RandomImport } from "./routes/random";
import { Route as LibraryImport } from "./routes/library";
import { Route as IndexImport } from "./routes/index";
import { Route as ReadIdImport } from "./routes/read.$id";
import { Route as MangaIdImport } from "./routes/manga.$id";

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRoute,
} as any);

const SearchRoute = SearchImport.update({
  id: "/search",
  path: "/search",
  getParentRoute: () => rootRoute,
} as any);

const RandomRoute = RandomImport.update({
  id: "/random",
  path: "/random",
  getParentRoute: () => rootRoute,
} as any);

const LibraryRoute = LibraryImport.update({
  id: "/library",
  path: "/library",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const ReadIdRoute = ReadIdImport.update({
  id: "/read/$id",
  path: "/read/$id",
  getParentRoute: () => rootRoute,
} as any);

const MangaIdRoute = MangaIdImport.update({
  id: "/manga/$id",
  path: "/manga/$id",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/library": {
      id: "/library";
      path: "/library";
      fullPath: "/library";
      preLoaderRoute: typeof LibraryImport;
      parentRoute: typeof rootRoute;
    };
    "/random": {
      id: "/random";
      path: "/random";
      fullPath: "/random";
      preLoaderRoute: typeof RandomImport;
      parentRoute: typeof rootRoute;
    };
    "/search": {
      id: "/search";
      path: "/search";
      fullPath: "/search";
      preLoaderRoute: typeof SearchImport;
      parentRoute: typeof rootRoute;
    };
    "/settings": {
      id: "/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsImport;
      parentRoute: typeof rootRoute;
    };
    "/manga/$id": {
      id: "/manga/$id";
      path: "/manga/$id";
      fullPath: "/manga/$id";
      preLoaderRoute: typeof MangaIdImport;
      parentRoute: typeof rootRoute;
    };
    "/read/$id": {
      id: "/read/$id";
      path: "/read/$id";
      fullPath: "/read/$id";
      preLoaderRoute: typeof ReadIdImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/library": typeof LibraryRoute;
  "/random": typeof RandomRoute;
  "/search": typeof SearchRoute;
  "/settings": typeof SettingsRoute;
  "/manga/$id": typeof MangaIdRoute;
  "/read/$id": typeof ReadIdRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/library": typeof LibraryRoute;
  "/random": typeof RandomRoute;
  "/search": typeof SearchRoute;
  "/settings": typeof SettingsRoute;
  "/manga/$id": typeof MangaIdRoute;
  "/read/$id": typeof ReadIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/library": typeof LibraryRoute;
  "/random": typeof RandomRoute;
  "/search": typeof SearchRoute;
  "/settings": typeof SettingsRoute;
  "/manga/$id": typeof MangaIdRoute;
  "/read/$id": typeof ReadIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/library"
    | "/random"
    | "/search"
    | "/settings"
    | "/manga/$id"
    | "/read/$id";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/library"
    | "/random"
    | "/search"
    | "/settings"
    | "/manga/$id"
    | "/read/$id";
  id:
    | "__root__"
    | "/"
    | "/library"
    | "/random"
    | "/search"
    | "/settings"
    | "/manga/$id"
    | "/read/$id";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LibraryRoute: typeof LibraryRoute;
  RandomRoute: typeof RandomRoute;
  SearchRoute: typeof SearchRoute;
  SettingsRoute: typeof SettingsRoute;
  MangaIdRoute: typeof MangaIdRoute;
  ReadIdRoute: typeof ReadIdRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LibraryRoute: LibraryRoute,
  RandomRoute: RandomRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  MangaIdRoute: MangaIdRoute,
  ReadIdRoute: ReadIdRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/library",
        "/random",
        "/search",
        "/settings",
        "/manga/$id",
        "/read/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/library": {
      "filePath": "library.tsx"
    },
    "/random": {
      "filePath": "random.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/manga/$id": {
      "filePath": "manga.$id.tsx"
    },
    "/read/$id": {
      "filePath": "read.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
