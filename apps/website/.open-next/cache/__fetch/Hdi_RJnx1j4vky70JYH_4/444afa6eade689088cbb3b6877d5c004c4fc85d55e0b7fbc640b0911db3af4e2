{"kind":"FETCH","data":{"headers":{"cache-control":"no-store, no-cache, must-revalidate, post-check=0, pre-check=0","cf-cache-status":"DYNAMIC","cf-ray":"853dc3f6a81c6bb7-SIN","connection":"keep-alive","content-encoding":"br","content-type":"text/html; charset=utf-8","date":"Sun, 11 Feb 2024 15:53:35 GMT","expires":"Thu, 19 Nov 1981 08:52:00 GMT","nel":"{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}","pragma":"no-cache","report-to":"{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=vZr%2FQWX0tJx6KUWwdO9op3iLUX6T%2FxdoZ%2BoKMn5VBFhXqmQ1F62o84JUaQV9xSn2Xiz5jISr%2FmEkJi0jnwZaRljOUE9g2H%2F0YyY1qY0DcAJy07RTFZyGd%2BcyyG8%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}","server":"cloudflare","set-cookie":"gogoanime=g7ei7i6ectge2gnlsqn4g3tik2; path=/","transfer-encoding":"chunked","vary":"Accept-Encoding, Accept-Encoding","x-powered-by":"PHP/5.6.13"},"body":"<!DOCTYPE html>
<html lang="en-US"
      xmlns="http://www.w3.org/1999/xhtml"
      itemscope itemtype="http://schema.org/WebPage">
<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#">
    <meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="profile" href="https://gmpg.org/xfn/11">

<link rel="shortcut icon" href="https://cdn.gogocdn.net/files/gogo/img/favicon.ico">
<meta name="google-site-verification" content="shHYF9VOwfpFOdBpleH5jZ2CBuy6nVjX4PrkxMSRqHQ"/>

<title>Gogoanime - Watch anime online, English anime online HD</title>

<meta name="robots" content="index,follow" />
<meta name="description" content="Watch anime online in English. You can watch free series and movies online and English subtitle.">
<meta name="keywords" content="gogoanime,watch anime, anime online, free anime, english anime, sites to watch anime">
<meta itemprop="image" content="/images/logo.png"/>

<meta property="og:site_name" content="Gogoanime"/>
<meta property="og:locale" content="en_US"/>
<meta property="og:type" content="website"/>
<meta property="fb:admins" content="100010507416730"/>
<meta property="fb:app_id" content="517001538491321" />
<meta property="og:title" content="Gogoanime - Watch anime online, English anime online HD"/>
<meta property="og:description" content="Watch anime online in English. You can watch free series and movies online and English subtitle.">
<meta property="og:url" content=""/>
<meta property="og:image" content="/images/logo.png"/>
<meta property="og:image:secure_url" content="/images/logo.png"/>

<meta property="twitter:card" content="summary"/>
<meta property="twitter:title" content="Gogoanime - Watch anime online, English anime online HD"/>
<meta property="twitter:description" content="Watch anime online in English. You can watch free series and movies online and English subtitle."/>
<meta name="referrer" content="origin">
<meta name="csrf-token" content="65c8ed7ea5c62">

<link rel="canonical" href="https://anitaku.to/home.html"/>
<link rel="alternate" hreflang="en-us" href="https://anitaku.to/home.html"/>


    
        <link rel="stylesheet" type="text/css" href="https://anitaku.to/css/style.css?v=1.1" />
    
        <script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/jquery.js"></script>
    <script>
        var base_url = 'https://' + document.domain + '/';
        var base_url_cdn_api = 'https://ajax.gogo-load.com/';
        var api_anclytic = 'https://ajax.gogo-load.com/anclytic-ajax.html';
    </script>
    <script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/main.js?v=1.1"></script>
    <meta name="clckd" content="f783096bb1e81df1cdd2b081dbc0fcf0" />
    <div id="bg_3113168465"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=16&zoneid=8465"></script>
</head>
<body>
<div class="clr"></div>
<div id="wrapper_inside">
    <div id="wrapper">
        <div id="wrapper_bg">
            <header>
  <div class="menu_top_link">
    <div class="user_auth">
      <ul class="auth">
            <li class="userss">
        <i class="icongec-login"></i>
        <a href="/login.html" title="login">Login</a> <a class="fix">|</a>
        <a href="/register.html" title="Sign up" class="reg">Sign up</a>
    </li>

      </ul>
    </div>
    <div class="link_face intro">
      <a class="btn twitter" href="https://twitter.com/anime_around" target="_blank" data-url=""></a>
      <a class="btn reddit" href="https://www.reddit.com/r/AroundAnimeTV/" target="_blank" data-url=""></a>
      <a class="btn facebook" href="https://www.facebook.com/groups/409309663623039" target="_blank"></a>
      <a class="btn discord" style="margin-right:5px;" href="https://discord.gg/kyVfcGuCCQ" target="_blank" data-url=""></a>
      <a class="btn telegram" style="margin-right:5px;" href="https://t.me/joinchat/W4lYQ-RGOQ05MmI9" target="_blank" data-url=""></a>
    </div>
                    
    <div class="submenu_intro">
	    <a href="https://gogotaku.info/login.html" target="_blank">Request</a>
	    <span>|</span>
      <a href="https://anitaku.to/contact-us.html">Contact us</a>
      <span>|</span>
      <a href="https://gogotaku.info" target="_blank">Gogotaku</a>
    </div>          
  </div>
  <div class="clr"></div>

  <!-- banner -->
  <section class="headnav">
    <div class="page_menu_items show">
      <a href="javascript:void(0)" class="menu_mobile">
        <i class="icongec-menu-show"></i>
      </a>
    </div>
    <div class="headnav_left">
      <a href="/home.html"><img src="https://anitaku.to/img/icon/logo.png" class="logo show ads-evt" alt="gogoanime - Watch Anime Online" /></a>
    </div>
    <div class="headnav_menu">
      <!-- menu top -->
      <nav class="menu_top">
        <ul>
              <li class="userss">
        <i class="icongec-login"></i>
        <a href="/login.html" title="login">Login</a> <a class="fix">|</a>
        <a href="/register.html" title="Sign up" class="reg">Sign up</a>
    </li>

          <li class="home "><a href="https://anitaku.to/home.html" title="Home" class="home ads-evt">Home</a></li>
          <li class="list "><a href="https://anitaku.to/anime-list.html" title="Anime list" class="list ads-evt">Anime list</a></li>
          <li class="seri "><a href="https://anitaku.to/new-season.html" title="New season" class="series ads-evt">New season</a></li>
          <li class="movies "><a href="https://anitaku.to/anime-movies.html" title="Movies" class="movie ads-evt">Movies</a></li>
          <li class="movies "><a href="https://anitaku.to/popular.html" title="Popular" class="popular ads-evt">Popular</a></li>
          <li class="movie genre hide">
		    <a href="#" class="genre">Genre</a>
            <ul>
                              <li class=""><a href="/genre/action" title="Action">Action</a></li>
                              <li class=""><a href="/genre/adult-cast" title="Adult Cast">Adult Cast</a></li>
                              <li class=""><a href="/genre/adventure" title="Adventure">Adventure</a></li>
                              <li class=""><a href="/genre/anthropomorphic" title="Anthropomorphic">Anthropomorphic</a></li>
                              <li class=""><a href="/genre/avant-garde" title="Avant Garde">Avant Garde</a></li>
                              <li class=""><a href="/genre/shounen-ai" title="Boys Love">Boys Love</a></li>
                              <li class=""><a href="/genre/cars" title="Cars">Cars</a></li>
                              <li class=""><a href="/genre/cgdct" title="CGDCT">CGDCT</a></li>
                              <li class=""><a href="/genre/childcare" title="Childcare">Childcare</a></li>
                              <li class=""><a href="/genre/comedy" title="Comedy">Comedy</a></li>
                              <li class=""><a href="/genre/comic" title="Comic">Comic</a></li>
                              <li class=""><a href="/genre/crime" title="Crime">Crime</a></li>
                              <li class=""><a href="/genre/crossdressing" title="Crossdressing">Crossdressing</a></li>
                              <li class=""><a href="/genre/delinquents" title="Delinquents">Delinquents</a></li>
                              <li class=""><a href="/genre/dementia" title="Dementia">Dementia</a></li>
                              <li class=""><a href="/genre/demons" title="Demons">Demons</a></li>
                              <li class=""><a href="/genre/detective" title="Detective">Detective</a></li>
                              <li class=""><a href="/genre/drama" title="Drama">Drama</a></li>
                              <li class=""><a href="/genre/dub" title="Dub">Dub</a></li>
                              <li class=""><a href="/genre/ecchi" title="Ecchi">Ecchi</a></li>
                              <li class=""><a href="/genre/erotica" title="Erotica">Erotica</a></li>
                              <li class=""><a href="/genre/family" title="Family">Family</a></li>
                              <li class=""><a href="/genre/fantasy" title="Fantasy">Fantasy</a></li>
                              <li class=""><a href="/genre/gag-humor" title="Gag Humor">Gag Humor</a></li>
                              <li class=""><a href="/genre/game" title="Game">Game</a></li>
                              <li class=""><a href="/genre/gender-bender" title="Gender Bender">Gender Bender</a></li>
                              <li class=""><a href="/genre/gore" title="Gore">Gore</a></li>
                              <li class=""><a href="/genre/gourmet" title="Gourmet">Gourmet</a></li>
                              <li class=""><a href="/genre/harem" title="Harem">Harem</a></li>
                              <li class=""><a href="/genre/hentai" title="Hentai">Hentai</a></li>
                              <li class=""><a href="/genre/high-stakes-game" title="High Stakes Game">High Stakes Game</a></li>
                              <li class=""><a href="/genre/historical" title="Historical">Historical</a></li>
                              <li class=""><a href="/genre/horror" title="Horror">Horror</a></li>
                              <li class=""><a href="/genre/isekai" title="Isekai">Isekai</a></li>
                              <li class=""><a href="/genre/iyashikei" title="Iyashikei">Iyashikei</a></li>
                              <li class=""><a href="/genre/josei" title="Josei">Josei</a></li>
                              <li class=""><a href="/genre/kids" title="Kids">Kids</a></li>
                              <li class=""><a href="/genre/magic" title="Magic">Magic</a></li>
                              <li class=""><a href="/genre/magical-sex-shift" title="Magical Sex Shift">Magical Sex Shift</a></li>
                              <li class=""><a href="/genre/mahou-shoujo" title="Mahou Shoujo">Mahou Shoujo</a></li>
                              <li class=""><a href="/genre/martial-arts" title="Martial Arts">Martial Arts</a></li>
                              <li class=""><a href="/genre/mecha" title="Mecha">Mecha</a></li>
                              <li class=""><a href="/genre/medical" title="Medical">Medical</a></li>
                              <li class=""><a href="/genre/military" title="Military">Military</a></li>
                              <li class=""><a href="/genre/music" title="Music">Music</a></li>
                              <li class=""><a href="/genre/mystery" title="Mystery">Mystery</a></li>
                              <li class=""><a href="/genre/mythology" title="Mythology">Mythology</a></li>
                              <li class=""><a href="/genre/organized-crime" title="Organized Crime">Organized Crime</a></li>
                              <li class=""><a href="/genre/parody" title="Parody">Parody</a></li>
                              <li class=""><a href="/genre/performing-arts" title="Performing Arts">Performing Arts</a></li>
                              <li class=""><a href="/genre/pets" title="Pets">Pets</a></li>
                              <li class=""><a href="/genre/police" title="Police">Police</a></li>
                              <li class=""><a href="/genre/psychological" title="Psychological">Psychological</a></li>
                              <li class=""><a href="/genre/racing" title="Racing">Racing</a></li>
                              <li class=""><a href="/genre/reincarnation" title="Reincarnation">Reincarnation</a></li>
                              <li class=""><a href="/genre/romance" title="Romance">Romance</a></li>
                              <li class=""><a href="/genre/romantic-subtext" title="Romantic Subtext">Romantic Subtext</a></li>
                              <li class=""><a href="/genre/samurai" title="Samurai">Samurai</a></li>
                              <li class=""><a href="/genre/school" title="School">School</a></li>
                              <li class=""><a href="/genre/sci-fi" title="Sci-Fi">Sci-Fi</a></li>
                              <li class=""><a href="/genre/seinen" title="Seinen">Seinen</a></li>
                              <li class=""><a href="/genre/shoujo" title="Shoujo">Shoujo</a></li>
                              <li class=""><a href="/genre/shoujo-ai" title="Shoujo Ai">Shoujo Ai</a></li>
                              <li class=""><a href="/genre/shounen" title="Shounen">Shounen</a></li>
                              <li class=""><a href="/genre/showbiz" title="Showbiz">Showbiz</a></li>
                              <li class=""><a href="/genre/slice-of-life" title="Slice of Life">Slice of Life</a></li>
                              <li class=""><a href="/genre/space" title="Space">Space</a></li>
                              <li class=""><a href="/genre/sports" title="Sports">Sports</a></li>
                              <li class=""><a href="/genre/strategy-game" title="Strategy Game">Strategy Game</a></li>
                              <li class=""><a href="/genre/super-power" title="Super Power">Super Power</a></li>
                              <li class=""><a href="/genre/supernatural" title="Supernatural">Supernatural</a></li>
                              <li class=""><a href="/genre/survival" title="Survival">Survival</a></li>
                              <li class=""><a href="/genre/suspense" title="Suspense">Suspense</a></li>
                              <li class=""><a href="/genre/team-sports" title="Team Sports">Team Sports</a></li>
                              <li class=""><a href="/genre/thriller" title="Thriller">Thriller</a></li>
                              <li class=""><a href="/genre/time-travel" title="Time Travel">Time Travel</a></li>
                              <li class=""><a href="/genre/vampire" title="Vampire">Vampire</a></li>
                              <li class=""><a href="/genre/video-game" title="Video Game">Video Game</a></li>
                              <li class=""><a href="/genre/visual-arts" title="Visual Arts">Visual Arts</a></li>
                              <li class=""><a href="/genre/work-life" title="Work Life">Work Life</a></li>
                              <li class=""><a href="/genre/workplace" title="Workplace">Workplace</a></li>
                              <li class=""><a href="/genre/yaoi" title="Yaoi">Yaoi</a></li>
                              <li class=""><a href="/genre/yuri" title="Yuri">Yuri</a></li>
                          </ul>
          </li>
        </ul>	
      </nav>
      <!-- /menu top -->
    </div>
    <div class="headnav_right">
      <!-- form search--->
      <div class="form">
        <form onsubmit="" id="search-form" action="https://anitaku.to/search.html" method="get">
          <div class="row">
            <input placeholder="search" name="keyword" id="keyword" type="text" value="" autocomplete="off">            
            <input class="btngui" value="" type="button" name="" onclick="do_search();">
            <input id="key_pres" name="key_pres" value="" type="hidden" />
            <input id="link_alias" name="link_alias" value="" type="hidden" />
            <input id="keyword_search_replace" name="keyword_search_replace" value="" type="hidden" />
          </div>
          <div class="hide_search hide"><i class="icongec-muiten"></i></div>
          <div id="header_search_autocomplete"></div>
          <div class="loader"></div>
        </form>           
        <div class="clr"></div>
        <div class="search-iph"><a href="javascript:void(0)"><i class="icongec-search-mb"></i></a></div>
      </div>
	  <div class="clr"></div>                        
      <!-- /form search--->
    </div>
  </section>
  <!-- /banner -->
</header>
            <section class="content">
                <section class="content_left">
                    
    <h1 class="seohiden">Gogoanime - Watch anime online, English anime online HD</h1>
    <!-- Recent Release--->
    <div class="main_body">
   	    <div id="load_recent_release">
       	    <input type="hidden" id="type" name="type" value="1" />
<div class="anime_name recent_release">
        <i class="icongec-recent_release i_pos"></i>
        <h2><a href="javascript:void(0)" class="dub active" rel="1">Recent Release</a> <span style="padding:0 10px; color:#010101;">|</span> <a href="javascript:void(0)" class="dub " rel="2">DUB</a><span class="chinese" style="padding:0 10px; color:#010101;">|</span> <a href="javascript:void(0)" class="dub chinese " rel="3">Chinese</a></h2>
        <div class="anime_name_pagination intro">
            <div class="pagination recent">
                       <ul class='pagination-list' ><li ><a href='?page=1' data-page='1'>1</a></li><li ><a href='?page=2' data-page='2'>2</a></li><li  class=selected><a href='?page=3' data-page='3'>3</a></li><li ><a href='?page=4' data-page='4'>4</a></li><li ><a href='?page=5' data-page='5'>5</a></li></ul>                 
            </div>
        </div>
</div>
<div class="last_episodes loaddub">
<ul class="items">
            <li>
            
            <div class="img">
                <a href="/ninjala-episode-103" title="Ninjala">
                    <img src="https://gogocdn.net/cover/ninjala.png" alt="Ninjala" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/ninjala-episode-103" title="Ninjala">Ninjala</a></p>
            <p class="episode">Episode 103</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/chiikawa-episode-78" title="Chiikawa">
                    <img src="https://gogocdn.net/cover/chiikawa.png" alt="Chiikawa" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/chiikawa-episode-78" title="Chiikawa">Chiikawa</a></p>
            <p class="episode">Episode 78</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/majo-to-yajuu-episode-5" title="Majo to Yajuu">
                    <img src="https://gogocdn.net/cover/majo-to-yajuu-1704187164.png" alt="Majo to Yajuu" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/majo-to-yajuu-episode-5" title="Majo to Yajuu">Majo to Yajuu</a></p>
            <p class="episode">Episode 5</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/yuuki-bakuhatsu-bang-bravern-episode-5" title="Yuuki Bakuhatsu Bang Bravern">
                    <img src="https://gogocdn.net/cover/yuuki-bakuhatsu-bang-bravern-1704252414.png" alt="Yuuki Bakuhatsu Bang Bravern" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/yuuki-bakuhatsu-bang-bravern-episode-5" title="Yuuki Bakuhatsu Bang Bravern">Yuuki Bakuhatsu Bang Bravern</a></p>
            <p class="episode">Episode 5</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/urusei-yatsura-2022-2nd-season-episode-5" title="Urusei Yatsura (2022) 2nd Season">
                    <img src="https://gogocdn.net/cover/urusei-yatsura-2022-2nd-season.png" alt="Urusei Yatsura (2022) 2nd Season" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/urusei-yatsura-2022-2nd-season-episode-5" title="Urusei Yatsura (2022) 2nd Season">Urusei Yatsura (2022) 2nd Season</a></p>
            <p class="episode">Episode 5</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/gekkan-mousou-kagaku-episode-5" title="Gekkan Mousou Kagaku">
                    <img src="https://gogocdn.net/cover/gekkan-mousou-kagaku-1704169853.png" alt="Gekkan Mousou Kagaku" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/gekkan-mousou-kagaku-episode-5" title="Gekkan Mousou Kagaku">Gekkan Mousou Kagaku</a></p>
            <p class="episode">Episode 5</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/sokushi-cheat-ga-saikyou-sugite-isekai-no-yatsura-ga-marude-aite-ni-naranai-n-desu-ga-episode-6" title="Sokushi Cheat ga Saikyou sugite, Isekai no Yatsura ga Marude Aite ni Naranai n desu ga.">
                    <img src="https://gogocdn.net/cover/sokushi-cheat-ga-saikyou-sugite-isekai-no-yatsura-ga-marude-aite-ni-naranai-n-desu-ga-1704250425.png" alt="Sokushi Cheat ga Saikyou sugite, Isekai no Yatsura ga Marude Aite ni Naranai n desu ga." />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/sokushi-cheat-ga-saikyou-sugite-isekai-no-yatsura-ga-marude-aite-ni-naranai-n-desu-ga-episode-6" title="Sokushi Cheat ga Saikyou sugite, Isekai no Yatsura ga Marude Aite ni Naranai n desu ga.">Sokushi Cheat ga Saikyou sugite, Isekai no Yatsura ga Marude Aite ni Naranai n desu ga.</a></p>
            <p class="episode">Episode 6</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/mato-seihei-no-slave-episode-6" title="Mato Seihei no Slave">
                    <img src="https://gogocdn.net/cover/mato-seihei-no-slave-1704187347.png" alt="Mato Seihei no Slave" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/mato-seihei-no-slave-episode-6" title="Mato Seihei no Slave">Mato Seihei no Slave</a></p>
            <p class="episode">Episode 6</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/dungeon-meshi-episode-6" title="Dungeon Meshi">
                    <img src="https://gogocdn.net/cover/dungeon-meshi-1704169699.png" alt="Dungeon Meshi" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/dungeon-meshi-episode-6" title="Dungeon Meshi">Dungeon Meshi</a></p>
            <p class="episode">Episode 6</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/taiko-no-tatsujin-episode-26" title="Taiko no Tatsujin">
                    <img src="https://gogocdn.net/cover/taiko-no-tatsujin.png" alt="Taiko no Tatsujin" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/taiko-no-tatsujin-episode-26" title="Taiko no Tatsujin">Taiko no Tatsujin</a></p>
            <p class="episode">Episode 26</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/beyblade-x-episode-17" title="Beyblade X">
                    <img src="https://gogocdn.net/cover/beyblade-x.png" alt="Beyblade X" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/beyblade-x-episode-17" title="Beyblade X">Beyblade X</a></p>
            <p class="episode">Episode 17</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/magical-hat-episode-23" title="Magical Hat">
                    <img src="https://gogocdn.net/cover/magical-hat.png" alt="Magical Hat" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/magical-hat-episode-23" title="Magical Hat">Magical Hat</a></p>
            <p class="episode">Episode 23</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/sousou-no-frieren-no-mahou-episode-9" title="Sousou no Frieren: ●● no Mahou">
                    <img src="https://gogocdn.net/cover/sousou-no-frieren-no-mahou.png" alt="Sousou no Frieren: ●● no Mahou" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/sousou-no-frieren-no-mahou-episode-9" title="Sousou no Frieren: ●● no Mahou">Sousou no Frieren: ●● no Mahou</a></p>
            <p class="episode">Episode 9</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/30-sai-made-doutei-da-to-mahou-tsukai-ni-nareru-rashii-episode-5" title="30-sai made Doutei da to Mahou Tsukai ni Nareru Rashii">
                    <img src="https://gogocdn.net/cover/30-sai-made-doutei-da-to-mahou-tsukai-ni-nareru-rashii.png" alt="30-sai made Doutei da to Mahou Tsukai ni Nareru Rashii" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/30-sai-made-doutei-da-to-mahou-tsukai-ni-nareru-rashii-episode-5" title="30-sai made Doutei da to Mahou Tsukai ni Nareru Rashii">30-sai made Doutei da to Mahou Tsukai ni Nareru Rashii</a></p>
            <p class="episode">Episode 5</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/chou-futsuu-ken-chiba-densetsu-episode-5" title="Chou Futsuu Ken Chiba Densetsu">
                    <img src="https://gogocdn.net/cover/chou-futsuu-ken-chiba-densetsu.png" alt="Chou Futsuu Ken Chiba Densetsu" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/chou-futsuu-ken-chiba-densetsu-episode-5" title="Chou Futsuu Ken Chiba Densetsu">Chou Futsuu Ken Chiba Densetsu</a></p>
            <p class="episode">Episode 5</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/metallic-rouge-episode-5" title="Metallic Rouge">
                    <img src="https://gogocdn.net/cover/metallic-rouge-1704189134.png" alt="Metallic Rouge" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/metallic-rouge-episode-5" title="Metallic Rouge">Metallic Rouge</a></p>
            <p class="episode">Episode 5</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/sengoku-youko-episode-5" title="Sengoku Youko">
                    <img src="https://gogocdn.net/cover/sengoku-youko-1704249376.png" alt="Sengoku Youko" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/sengoku-youko-episode-5" title="Sengoku Youko">Sengoku Youko</a></p>
            <p class="episode">Episode 5</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/mahou-shoujo-ni-akogarete-episode-6" title="Mahou Shoujo ni Akogarete">
                    <img src="https://gogocdn.net/cover/mahou-shoujo-ni-akogarete-1704187057.png" alt="Mahou Shoujo ni Akogarete" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/mahou-shoujo-ni-akogarete-episode-6" title="Mahou Shoujo ni Akogarete">Mahou Shoujo ni Akogarete</a></p>
            <p class="episode">Episode 6</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/ishura-episode-6" title="Ishura">
                    <img src="https://gogocdn.net/cover/ishura-1704186040.png" alt="Ishura" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/ishura-episode-6" title="Ishura">Ishura</a></p>
            <p class="episode">Episode 6</p>                   
     </li>
             <li>
            
            <div class="img">
                <a href="/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e-3rd-season-episode-6" title="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e 3rd Season">
                    <img src="https://gogocdn.net/cover/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e-tv-3rd-season-1704252258.png" alt="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e 3rd Season" />
                    <div class="type ic-SUB"></div>
                </a>
            </div>
            <p class="name"><a href="/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e-3rd-season-episode-6" title="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e 3rd Season">Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e 3rd Season</a></p>
            <p class="episode">Episode 6</p>                   
     </li>
       </ul>
</div>
        </div>
    </div>
    <div class="clr"></div><!--/ Recent Release--->
    <!-- Featured Comedy / Romance Anime--->
    <div class="main_body">
        <div id="load_popular_ongoing">
                        	
        </div>    
    </div><div class="clr"></div> <!-- /Featured Comedy / Romance Anime--->

    <!-- Recently Added Series--->
    <div class="main_body none">
                        <div class="anime_name added_series">
                            <i class="icongec-added_series i_pos"></i>
                        	<h2>Recently Added Series</h2>
                        </div>
                        <div class="added_series_body final">
                        	<ul class="listing">
                                                            	<li>
                                	<a href="/category/kingdom-5th-season" title="Kingdom 5th Season">Kingdom 5th Season</a>
                                </li>
                                                            	<li>
                                	<a href="/category/pon-no-michi" title="Pon no Michi">Pon no Michi</a>
                                </li>
                                                            	<li>
                                	<a href="/category/metallic-rouge" title="Metallic Rouge">Metallic Rouge</a>
                                </li>
                                                            	<li>
                                	<a href="/category/dungeon-meshi" title="Dungeon Meshi">Dungeon Meshi</a>
                                </li>
                                                            	<li>
                                	<a href="/category/ore-dake-level-up-na-ken" title="Ore dake Level Up na Ken">Ore dake Level Up na Ken</a>
                                </li>
                                                            	<li>
                                	<a href="/category/sokushi-cheat-ga-saikyou-sugite-isekai-no-yatsura-ga-marude-aite-ni-naranai-n-desu-ga" title="Sokushi Cheat ga Saikyou sugite, Isekai no Yatsura ga Marude Aite ni Naranai n desu ga.">Sokushi Cheat ga Saikyou sugite, Isekai no Yatsura ga Marude Aite ni Naranai n desu ga.</a>
                                </li>
                                                            	<li>
                                	<a href="/category/sengoku-youko" title="Sengoku Youko">Sengoku Youko</a>
                                </li>
                                                            	<li>
                                	<a href="/category/himesama-goumon-no-jikan-desu" title="Himesama "Goumon" no Jikan desu">Himesama "Goumon" no Jikan desu</a>
                                </li>
                                                            	<li>
                                	<a href="/category/dosanko-gal-wa-namara-menkoi" title="Dosanko Gal wa Namara Menkoi">Dosanko Gal wa Namara Menkoi</a>
                                </li>
                                                            	<li>
                                	<a href="/category/ao-no-exorcist-shimane-illuminati-hen" title="Ao no Exorcist: Shimane Illuminati-hen">Ao no Exorcist: Shimane Illuminati-hen</a>
                                </li>
                                                            	<li>
                                	<a href="/category/ishura" title="Ishura">Ishura</a>
                                </li>
                                                            	<li>
                                	<a href="/category/majo-to-yajuu" title="Majo to Yajuu">Majo to Yajuu</a>
                                </li>
                                                            	<li>
                                	<a href="/category/gekkan-mousou-kagaku" title="Gekkan Mousou Kagaku">Gekkan Mousou Kagaku</a>
                                </li>
                                                            	<li>
                                	<a href="/category/kyuujitsu-no-warumono-san" title="Kyuujitsu no Warumono-san">Kyuujitsu no Warumono-san</a>
                                </li>
                                                            	<li>
                                	<a href="/category/tsuki-ga-michibiku-isekai-douchuu-2nd-season" title="Tsuki ga Michibiku Isekai Douchuu 2nd Season">Tsuki ga Michibiku Isekai Douchuu 2nd Season</a>
                                </li>
                                                            	<li>
                                	<a href="/category/shin-no-nakama-ja-nai-to-yuusha-no-party-wo-oidasareta-node-henkyou-de-slow-life-suru-koto-ni-shimashita-2nd" title="Shin no Nakama ja Nai to Yuusha no Party wo Oidasareta node, Henkyou de Slow Life suru Koto ni Shimashita 2nd">Shin no Nakama ja Nai to Yuusha no Party wo Oidasareta node, Henkyou de Slow Life suru Koto ni Shimashita 2nd</a>
                                </li>
                                                            	<li>
                                	<a href="/category/hikari-no-ou-2nd-season" title="Hikari no Ou 2nd Season">Hikari no Ou 2nd Season</a>
                                </li>
                                                            	<li>
                                	<a href="/category/mashle-2nd-season" title="Mashle 2nd Season">Mashle 2nd Season</a>
                                </li>
                                                            	<li>
                                	<a href="/category/jaku-chara-tomozaki-kun-2nd-stage" title="Jaku-Chara Tomozaki-kun 2nd Stage">Jaku-Chara Tomozaki-kun 2nd Stage</a>
                                </li>
                                                            	<li>
                                	<a href="/category/saikyou-tank-no-meikyuu-kouryaku-tairyoku-9999-no-rare-skill-mochi-tank-yuusha-party-wo-tsuihou-sareru" title="Saikyou Tank no Meikyuu Kouryaku: Tairyoku 9999 no Rare Skill-mochi Tank, Yuusha Party wo Tsuihou sareru">Saikyou Tank no Meikyuu Kouryaku: Tairyoku 9999 no Rare Skill-mochi Tank, Yuusha Party wo Tsuihou sareru</a>
                                </li>
                                                            	<li>
                                	<a href="/category/boku-no-kokoro-no-yabai-yatsu-season-2" title="Boku no Kokoro no Yabai Yatsu Season 2">Boku no Kokoro no Yabai Yatsu Season 2</a>
                                </li>
                                                            	<li>
                                	<a href="/category/yubisaki-to-renren" title="Yubisaki to Renren">Yubisaki to Renren</a>
                                </li>
                                                            	<li>
                                	<a href="/category/bucchigiri-2" title="Bucchigiri?!">Bucchigiri?!</a>
                                </li>
                                                            	<li>
                                	<a href="/category/chou-futsuu-ken-chiba-densetsu" title="Chou Futsuu Ken Chiba Densetsu">Chou Futsuu Ken Chiba Densetsu</a>
                                </li>
                                                            	<li>
                                	<a href="/category/mato-seihei-no-slave" title="Mato Seihei no Slave">Mato Seihei no Slave</a>
                                </li>
                                                            	<li>
                                	<a href="/category/shaman-king-flowers" title="Shaman King: Flowers">Shaman King: Flowers</a>
                                </li>
                                                            	<li>
                                	<a href="/category/jashin-chan-dropkick-seikimatsu-hen" title="Jashin-chan Dropkick "Seikimatsu-hen"">Jashin-chan Dropkick "Seikimatsu-hen"</a>
                                </li>
                                                            	<li>
                                	<a href="/category/onmyouji" title="Onmyouji">Onmyouji</a>
                                </li>
                                                            	<li>
                                	<a href="/category/akuma-kun-ona" title="Akuma-kun (ONA)">Akuma-kun (ONA)</a>
                                </li>
                                                            	<li>
                                	<a href="/category/onimusha" title="Onimusha">Onimusha</a>
                                </li>
                                                            	<li>
                                	<a href="/category/tensei-shitara-slime-datta-ken-coleus-no-yume" title="Tensei shitara Slime Datta Ken: Coleus no Yume">Tensei shitara Slime Datta Ken: Coleus no Yume</a>
                                </li>
                                                            	<li>
                                	<a href="/category/pluto" title="Pluto">Pluto</a>
                                </li>
                                                            	<li>
                                	<a href="/category/dog-signal" title="Dog Signal">Dog Signal</a>
                                </li>
                                                            	<li>
                                	<a href="/category/good-night-world" title="Good Night World">Good Night World</a>
                                </li>
                                                            	<li>
                                	<a href="/category/dead-mount-death-play-part-2" title=" Dead Mount Death Play Part 2"> Dead Mount Death Play Part 2</a>
                                </li>
                                                            	<li>
                                	<a href="/category/kawagoe-boys-sing" title="Kawagoe Boys Sing">Kawagoe Boys Sing</a>
                                </li>
                                                            	<li>
                                	<a href="/category/the-idolmster-million-live" title="The iDOLM@STER Million Live!">The iDOLM@STER Million Live!</a>
                                </li>
                                                            	<li>
                                	<a href="/category/tearmoon-teikoku-monogatari-dantoudai-kara-hajimaru-hime-no-tensei-gyakuten-story" title="Tearmoon Teikoku Monogatari: Dantoudai kara Hajimaru, Hime no Tensei Gyakuten Story">Tearmoon Teikoku Monogatari: Dantoudai kara Hajimaru, Hime no Tensei Gyakuten Story</a>
                                </li>
                                                            	<li>
                                	<a href="/category/potion-danomi-de-ikinobimasu" title="Potion-danomi de Ikinobimasu!">Potion-danomi de Ikinobimasu!</a>
                                </li>
                                                            	<li>
                                	<a href="/category/nanatsu-no-taizai-mokushiroku-no-yonkishi" title="Nanatsu no Taizai: Mokushiroku no Yonkishi">Nanatsu no Taizai: Mokushiroku no Yonkishi</a>
                                </li>
                                                            </ul>
                        </div>
</div>
    <!-- / Recently Added Series--->
    <div id="bg_3113297366"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=29&zoneid=7366"></script>
                </section>
                 <section class="content_right">
                    <div class="headnav_center">
                          <div class="anime_name adsverting">
                              <i class="icongec-adsverting i_pos"></i>
                              <h2>ADVERTISEMENTS</h2>
                          </div>
                          <div class="headnav_items">
                             
                              <div id="bg_311326291"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=2&zoneid=6291"></script>                                                      </div>
                    </div>

                                            <div class="main_body">
     <div class="main_body_black">
          <div class="anime_name anime_info">
              <i class="icongec-anime_info i_pos"></i>
              <div class="topview">
                <div class="tab">
                    <div class="tab_icon one1" onclick="loadTopViews(this, 1)">Day</div><div class="tab_icon one2" onclick="loadTopViews(this, 2)">Week</div><div class="tab_icon one3" onclick="loadTopViews(this, 3)">Month</div>
                </div>
              </div>
          </div>
          <div class="topview" id="load-anclytic">
            <div class="clr"></div>
            <div class="movies_show">
                <div id="laoding"><div class="loaders"></div></div>
            	<div id="load_topivews" class="views1"></div>
                <div id="load_topivews" class="views2"></div>
                <div id="load_topivews" class="views3"></div>
            </div>
            <div class="clr"></div>
        </div>
     </div>
</div>
<div class="clr"></div>
                                        
                    <div class="clr"></div>
                                          <div class="main_body">
        <div class="main_body_black">
        <div class="anime_name ongoing">
       	<i class="icongec-ongoing i_pos"></i>
        <h2>ongoing series</h2></div>
        <div class="series">
        <!-- begon -->
          <div id="scrollbar2">
          <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
            <div class="viewport">
                 <div class="overview">
               			<nav class="menu_series cron">
                                    <ul>
                                    	                                        <li><a href="/category/100000-levels-of-body-refining-all-the-dogs-i-raise-are-the-emperor" title="100,000 Levels of Body Refining : All the dogs I raise are the Emperor">100,000 Levels of Body Refining : All the dogs I raise are the Emperor</a></li>
                                                                                <li><a href="/category/30-sai-made-doutei-da-to-mahou-tsukai-ni-nareru-rashii" title="30-sai made Doutei da to Mahou Tsukai ni Nareru Rashii">30-sai made Doutei da to Mahou Tsukai ni Nareru Rashii</a></li>
                                                                                <li><a href="/category/6hp-six-hearts-princess" title="6HP (Six Hearts Princess)">6HP (Six Hearts Princess)</a></li>
                                                                                <li><a href="/category/a-master-of-pints" title="A Master Of Pints">A Master Of Pints</a></li>
                                                                                <li><a href="/category/a-playboy-of-exorcist" title="A playboy of exorcist">A playboy of exorcist</a></li>
                                                                                <li><a href="/category/above-ten-thousand-people" title="Above Ten Thousand People">Above Ten Thousand People</a></li>
                                                                                <li><a href="/category/after-signing-in-for-30-days-i-can-annihilate-stars" title="After Signing In For 30 Days, I Can Annihilate Stars">After Signing In For 30 Days, I Can Annihilate Stars</a></li>
                                                                                <li><a href="/category/against-the-sky-supreme" title="Against the Sky Supreme">Against the Sky Supreme</a></li>
                                                                                <li><a href="/category/akuei-to-gacchinpo" title="Akuei to Gacchinpo">Akuei to Gacchinpo</a></li>
                                                                                <li><a href="/category/akuma-kun" title="Akuma-kun">Akuma-kun</a></li>
                                                                                <li><a href="/category/akuyaku-reijou-level-99-watashi-wa-ura-boss-desu-ga-maou-dewa-arimasen" title="Akuyaku Reijou Level 99: Watashi wa Ura-Boss desu ga Maou dewa Arimasen">Akuyaku Reijou Level 99: Watashi wa Ura-Boss desu ga Maou dewa Arimasen</a></li>
                                                                                <li><a href="/category/almighty-master-season-2" title="Almighty Master Season 2">Almighty Master Season 2</a></li>
                                                                                <li><a href="/category/already-invincible-at-the-beginning" title="Already Invincible at the Beginning">Already Invincible at the Beginning</a></li>
                                                                                <li><a href="/category/ancient-martial-artist-in-the-city-3nd-season" title="Ancient Martial Artist in the City 3nd Season">Ancient Martial Artist in the City 3nd Season</a></li>
                                                                                <li><a href="/category/anhe-zhuan" title="Anhe Zhuan">Anhe Zhuan</a></li>
                                                                                <li><a href="/category/anti-routine-system" title="Anti-routine system">Anti-routine system</a></li>
                                                                                <li><a href="/category/ao-no-exorcist-shimane-illuminati-hen" title="Ao no Exorcist: Shimane Illuminati-hen">Ao no Exorcist: Shimane Illuminati-hen</a></li>
                                                                                <li><a href="/category/aotu-shijie-4" title="AOTU Shijie 4">AOTU Shijie 4</a></li>
                                                                                <li><a href="/category/apocalyptic-escort-agency" title="Apocalyptic Escort Agency">Apocalyptic Escort Agency</a></li>
                                                                                <li><a href="/category/araiguma-rascal" title="Araiguma Rascal">Araiguma Rascal</a></li>
                                                                                <li><a href="/category/ba-huang-jian-zun" title="Ba huang jian zun">Ba huang jian zun</a></li>
                                                                                <li><a href="/category/back-to-rule-again-season-2" title="Back To Rule Again Season 2">Back To Rule Again Season 2</a></li>
                                                                                <li><a href="/category/bai-lian-cheng-shen" title="Bai Lian Cheng Shen">Bai Lian Cheng Shen</a></li>
                                                                                <li><a href="/category/bakugan-battle-brawlers-new-vestroia" title="Bakugan Battle Brawlers: New Vestroia">Bakugan Battle Brawlers: New Vestroia</a></li>
                                                                                <li><a href="/category/ban-shen-zhi-jing" title="Ban Shen Zhi Jing">Ban Shen Zhi Jing</a></li>
                                                                                <li><a href="/category/banjjagbanjjag-catch-tiniping-dub" title="Banjjagbanjjag Catch! Tiniping (Dub)">Banjjagbanjjag Catch! Tiniping (Dub)</a></li>
                                                                                <li><a href="/category/battle-god-tripod" title="Battle God Tripod">Battle God Tripod</a></li>
                                                                                <li><a href="/category/become-the-castellan-in-another-world" title="Become the Castellan in Another World">Become the Castellan in Another World</a></li>
                                                                                <li><a href="/category/bei-kun-bai-wan-nian-dizi-bianbu-zhu-tian-wan-jie" title="Bei Kun Bai Wan Nian: Dizi Bianbu Zhu Tian Wan Jie">Bei Kun Bai Wan Nian: Dizi Bianbu Zhu Tian Wan Jie</a></li>
                                                                                <li><a href="/category/beyblade-x" title="Beyblade X">Beyblade X</a></li>
                                                                                <li><a href="/category/biao-ren-blades-of-the-guardians" title="Biao Ren: Blades of the Guardians">Biao Ren: Blades of the Guardians</a></li>
                                                                                <li><a href="/category/billionaires-masked-bride-s3" title="Billionaire's Masked Bride Season 3">Billionaire's Masked Bride Season 3</a></li>
                                                                                <li><a href="/category/bing-huo-mo-chu" title="Bing Huo Mo Chu">Bing Huo Mo Chu</a></li>
                                                                                <li><a href="/category/bittersweet-love" title="Bittersweet Love">Bittersweet Love</a></li>
                                                                                <li><a href="/category/boku-no-kokoro-no-yabai-yatsu-season-2" title="Boku no Kokoro no Yabai Yatsu Season 2">Boku no Kokoro no Yabai Yatsu Season 2</a></li>
                                                                                <li><a href="/category/boruto-naruto-next-generations-dub" title="Boruto: Naruto Next Generations (Dub)">Boruto: Naruto Next Generations (Dub)</a></li>
                                                                                <li><a href="/category/bosanimal" title="Bosanimal">Bosanimal</a></li>
                                                                                <li><a href="/category/boss-is-super-strong-but-a-coward" title="Boss Is Super Strong, But A Coward">Boss Is Super Strong, But A Coward</a></li>
                                                                                <li><a href="/category/bousou-sengokushi" title="Bousou Sengokushi">Bousou Sengokushi</a></li>
                                                                                <li><a href="/category/bu-mie-shen-wang" title="Bu Mie Shen Wang">Bu Mie Shen Wang</a></li>
                                                                                <li><a href="/category/bu-shi-bu-mie" title="Bu Shi Bu Mie">Bu Shi Bu Mie</a></li>
                                                                                <li><a href="/category/bucchigiri-2" title="Bucchigiri?!">Bucchigiri?!</a></li>
                                                                                <li><a href="/category/bucchigiri-2-dub" title="Bucchigiri?! (Dub)">Bucchigiri?! (Dub)</a></li>
                                                                                <li><a href="/category/buta-no-liver-wa-kanetsu-shiro" title="Buta no Liver wa Kanetsu Shiro">Buta no Liver wa Kanetsu Shiro</a></li>
                                                                                <li><a href="/category/cang-yuan-tu" title="Cang Yuan Tu">Cang Yuan Tu</a></li>
                                                                                <li><a href="/category/capsule-boy" title="Capsule Boy">Capsule Boy</a></li>
                                                                                <li><a href="/category/captain-tsubasa-season-2-junior-youth-hen" title="Captain Tsubasa Season 2: Junior Youth-hen">Captain Tsubasa Season 2: Junior Youth-hen</a></li>
                                                                                <li><a href="/category/captain-tsubasa-season-2-junior-youth-hen-dub" title="Captain Tsubasa Season 2: Junior Youth-hen (Dub)">Captain Tsubasa Season 2: Junior Youth-hen (Dub)</a></li>
                                                                                <li><a href="/category/cardfight-vanguard-divinez" title="Cardfight!! Vanguard: Divinez">Cardfight!! Vanguard: Divinez</a></li>
                                                                                <li><a href="/category/cardfight-vanguard-willdress-season-3-dub" title="Cardfight!! Vanguard: will+Dress Season 3 (Dub)">Cardfight!! Vanguard: will+Dress Season 3 (Dub)</a></li>
                                                                                <li><a href="/category/ceo-lis-beloved-wife-season-2" title="CEO Li’s beloved wife Season 2">CEO Li’s beloved wife Season 2</a></li>
                                                                                <li><a href="/category/chaos-golden-crow" title="Chaos Golden Crow">Chaos Golden Crow</a></li>
                                                                                <li><a href="/category/chaos-sword-god-season-2" title="Chaos Sword God Season 2">Chaos Sword God Season 2</a></li>
                                                                                <li><a href="/category/chiikawa" title="Chiikawa">Chiikawa</a></li>
                                                                                <li><a href="/category/chingou-muchabee" title="Chingou Muchabee">Chingou Muchabee</a></li>
                                                                                <li><a href="/category/chiyu-mahou-no-machigatta-tsukaikata-senjou-wo-kakeru-kaifuku-youin" title="Chiyu Mahou no Machigatta Tsukaikata: Senjou wo Kakeru Kaifuku Youin">Chiyu Mahou no Machigatta Tsukaikata: Senjou wo Kakeru Kaifuku Youin</a></li>
                                                                                <li><a href="/category/chiyu-mahou-no-machigatta-tsukaikata-senjou-wo-kakeru-kaifuku-youin-dub" title="Chiyu Mahou no Machigatta Tsukaikata: Senjou wo Kakeru Kaifuku Youin (Dub)">Chiyu Mahou no Machigatta Tsukaikata: Senjou wo Kakeru Kaifuku Youin (Dub)</a></li>
                                                                                <li><a href="/category/chou-futsuu-ken-chiba-densetsu" title="Chou Futsuu Ken Chiba Densetsu">Chou Futsuu Ken Chiba Densetsu</a></li>
                                                                                <li><a href="/category/chou-futsuu-toshi-kashiwa-densetsu-kashiwa-no-gotouji-yuru-anime" title="Chou Futsuu Toshi Kashiwa Densetsu: Kashiwa no Gotouji Yuru Anime">Chou Futsuu Toshi Kashiwa Densetsu: Kashiwa no Gotouji Yuru Anime</a></li>
                                                                                <li><a href="/category/cong-hong-yue-kaishi" title="Cong Hong Yue Kaishi">Cong Hong Yue Kaishi</a></li>
                                                                                <li><a href="/category/crayon-shin-chan" title="Crayon Shin-chan">Crayon Shin-chan</a></li>
                                                                                <li><a href="/category/crayon-shin-chan-dub" title="Crayon Shin-chan (Dub)">Crayon Shin-chan (Dub)</a></li>
                                                                                <li><a href="/category/crayon-shin-chan-specials" title="Crayon Shin-chan Specials">Crayon Shin-chan Specials</a></li>
                                                                                <li><a href="/category/da-wang-rao-ming-2" title="Da Wang Rao Ming 2">Da Wang Rao Ming 2</a></li>
                                                                                <li><a href="/category/da-yuzhou-shidai" title="Da Yuzhou Shidai">Da Yuzhou Shidai</a></li>
                                                                                <li><a href="/category/da-zhu-zai-nian-fan" title="Da Zhu Zai Nian Fan">Da Zhu Zai Nian Fan</a></li>
                                                                                <li><a href="/category/da-zhu-zai-s5" title="Da Zhu Zai S5">Da Zhu Zai S5</a></li>
                                                                                <li><a href="/category/dan-god-season-2" title="Dan God Season 2">Dan God Season 2</a></li>
                                                                                <li><a href="/category/daoist-couple-with-blind-date" title="Daoist Couple With Blind Date">Daoist Couple With Blind Date</a></li>
                                                                                <li><a href="/category/dark-gathering-dub" title="Dark Gathering (Dub)">Dark Gathering (Dub)</a></li>
                                                                                <li><a href="/category/deep-love-if-you-understand" title="Deep Love If You Understand">Deep Love If You Understand</a></li>
                                                                                <li><a href="/category/deification-of-spring-and-autumn-period" title="Deification of Spring and Autumn Period">Deification of Spring and Autumn Period</a></li>
                                                                                <li><a href="/category/demon-asura-becomes-a-5-year-old-loli" title="Demon Asura Becomes a 5 Year Old Loli">Demon Asura Becomes a 5 Year Old Loli</a></li>
                                                                                <li><a href="/category/detective-conan" title="Detective Conan">Detective Conan</a></li>
                                                                                <li><a href="/category/detective-conan-remastered" title="Detective Conan Remastered">Detective Conan Remastered</a></li>
                                                                                <li><a href="/category/devilish-girlfriend" title="Devilish Girlfriend">Devilish Girlfriend</a></li>
                                                                                <li><a href="/category/dianqi-shaonu" title="Dianqi Shaonu">Dianqi Shaonu</a></li>
                                                                                <li><a href="/category/did-the-earth-explode-today" title="Did the Earth Explode Today?">Did the Earth Explode Today?</a></li>
                                                                                <li><a href="/category/disciples-say-im-invincible" title="Disciples Say I’m Invincible">Disciples Say I’m Invincible</a></li>
                                                                                <li><a href="/category/dog-signal" title="Dog Signal">Dog Signal</a></li>
                                                                                <li><a href="/category/dokidoki-precure-dub" title="Dokidoki! Precure (Dub)">Dokidoki! Precure (Dub)</a></li>
                                                                                <li><a href="/category/doraemon-2005" title="Doraemon (2005)">Doraemon (2005)</a></li>
                                                                                <li><a href="/category/dormant-since-ancient-times-thrusting-through-the-heavens-after-coming-into-being" title="Dormant Since Ancient Times: Thrusting Through the Heavens After Coming Into Being">Dormant Since Ancient Times: Thrusting Through the Heavens After Coming Into Being</a></li>
                                                                                <li><a href="/category/dosanko-gal-wa-namara-menkoi" title="Dosanko Gal wa Namara Menkoi">Dosanko Gal wa Namara Menkoi</a></li>
                                                                                <li><a href="/category/dosanko-gal-wa-namara-menkoi-dub" title="Dosanko Gal wa Namara Menkoi (Dub)">Dosanko Gal wa Namara Menkoi (Dub)</a></li>
                                                                                <li><a href="/category/dosukoi-sushi-zumou" title="Dosukoi Sushi Zumou">Dosukoi Sushi Zumou</a></li>
                                                                                <li><a href="/category/douluo-dalu-ii-jueshi-tangmen" title="Douluo Dalu II: Jueshi Tangmen">Douluo Dalu II: Jueshi Tangmen</a></li>
                                                                                <li><a href="/category/doupo-cangqiong-nian-fan" title="Doupo Cangqiong: Nian Fan">Doupo Cangqiong: Nian Fan</a></li>
                                                                                <li><a href="/category/dragon-kings-son-in-law" title="Dragon King's Son-In-Law">Dragon King's Son-In-Law</a></li>
                                                                                <li><a href="/category/dubu-wangu" title="Dubu Wangu">Dubu Wangu</a></li>
                                                                                <li><a href="/category/dubu-xiaoyao" title="Dubu Xiaoyao">Dubu Xiaoyao</a></li>
                                                                                <li><a href="/category/duel-masters-king-2021" title="Duel Masters King! (2021)">Duel Masters King! (2021)</a></li>
                                                                                <li><a href="/category/dungeon-meshi" title="Dungeon Meshi">Dungeon Meshi</a></li>
                                                                                <li><a href="/category/dungeon-meshi-dub" title="Dungeon Meshi (Dub)">Dungeon Meshi (Dub)</a></li>
                                                                                <li><a href="/category/elemon" title="Elemon">Elemon</a></li>
                                                                                <li><a href="/category/elf-academy" title="ELF Academy">ELF Academy</a></li>
                                                                                <li><a href="/category/emo-faze" title="Emo Faze">Emo Faze</a></li>
                                                                                <li><a href="/category/endless-devour" title="Endless Devour">Endless Devour</a></li>
                                                                                <li><a href="/category/eternal-boys-next-stage" title="Eternal Boys Next Stage">Eternal Boys Next Stage</a></li>
                                                                                <li><a href="/category/exclusive-possession-young-master-jis-beloved-wife-s3" title="Exclusive Possession: Young Master Ji's Beloved Wife S3">Exclusive Possession: Young Master Ji's Beloved Wife S3</a></li>
                                                                                <li><a href="/category/express-god-system" title="Express God System">Express God System</a></li>
                                                                                <li><a href="/category/fake-identity-2" title="Fake Identity 2">Fake Identity 2</a></li>
                                                                                <li><a href="/category/fanren-xiu-xian-chuan-3rd-season" title="Fanren Xiu Xian Chuan 3rd Season">Fanren Xiu Xian Chuan 3rd Season</a></li>
                                                                                <li><a href="/category/fanren-xiu-xian-zhuan-fanren-feng-qi-tian-nan-chongzhi-ban" title="Fanren Xiu Xian Zhuan: Fanren Feng Qi Tian Nan Chongzhi Ban">Fanren Xiu Xian Zhuan: Fanren Feng Qi Tian Nan Chongzhi Ban</a></li>
                                                                                <li><a href="/category/feng-huo-zhan-ji" title="Feng Huo Zhan Ji">Feng Huo Zhan Ji</a></li>
                                                                                <li><a href="/category/fight-da-pyuta" title="Fight Da!! Pyuta">Fight Da!! Pyuta</a></li>
                                                                                <li><a href="/category/first-class-taker" title="First Class Taker">First Class Taker</a></li>
                                                                                <li><a href="/category/flaglia-natsuyasumi-no-monogatari" title="Flaglia: Natsuyasumi no Monogatari">Flaglia: Natsuyasumi no Monogatari</a></li>
                                                                                <li><a href="/category/flowering-heart-2" title="Flowering Heart 2">Flowering Heart 2</a></li>
                                                                                <li><a href="/category/from-today-onwards-to-do-long-ao-tian" title="From today onwards to do Long Ao Tian">From today onwards to do Long Ao Tian</a></li>
                                                                                <li><a href="/category/fushigi-dagashiya-zenitendou" title="Fushigi Dagashiya: Zenitendou">Fushigi Dagashiya: Zenitendou</a></li>
                                                                                <li><a href="/category/gaina-tamager" title="Gaina Tamager">Gaina Tamager</a></li>
                                                                                <li><a href="/category/gaishi-dizun" title="Gaishi Dizun">Gaishi Dizun</a></li>
                                                                                <li><a href="/category/gal-gaku-hijiri-girls-square-gakuin" title="Gal-gaku.: Hijiri Girls Square Gakuin">Gal-gaku.: Hijiri Girls Square Gakuin</a></li>
                                                                                <li><a href="/category/ganbare-genki" title="Ganbare Genki">Ganbare Genki</a></li>
                                                                                <li><a href="/category/gei-wo-lai-ge-xiao-huli" title="Gei wo Lai ge Xiao Huli">Gei wo Lai ge Xiao Huli</a></li>
                                                                                <li><a href="/category/gekai-elise" title="Gekai Elise">Gekai Elise</a></li>
                                                                                <li><a href="/category/gekitou-crush-gear-turbo" title="Gekitou! Crush Gear Turbo">Gekitou! Crush Gear Turbo</a></li>
                                                                                <li><a href="/category/gekkan-mousou-kagaku" title="Gekkan Mousou Kagaku">Gekkan Mousou Kagaku</a></li>
                                                                                <li><a href="/category/get-ride-amdriver" title="Get Ride! AMDriver">Get Ride! AMDriver</a></li>
                                                                                <li><a href="/category/go-q-choji-ikkiman" title="Go-Q-Choji Ikkiman">Go-Q-Choji Ikkiman</a></li>
                                                                                <li><a href="/category/go-go-vehicle-zoo" title="Go! Go! Vehicle Zoo">Go! Go! Vehicle Zoo</a></li>
                                                                                <li><a href="/category/god-of-war" title="God Of War">God Of War</a></li>
                                                                                <li><a href="/category/guaishou-xiao-guan" title="Guaishou Xiao Guan">Guaishou Xiao Guan</a></li>
                                                                                <li><a href="/category/haai-step-jun" title="Haai Step Jun">Haai Step Jun</a></li>
                                                                                <li><a href="/category/haikara-san-ga-tooru" title="Haikara-san ga Tooru">Haikara-san ga Tooru</a></li>
                                                                                <li><a href="/category/happy-sugar-life-dub" title="Happy Sugar Life (Dub)">Happy Sugar Life (Dub)</a></li>
                                                                                <li><a href="/category/harimaware-koinu" title="Harimaware! Koinu">Harimaware! Koinu</a></li>
                                                                                <li><a href="/category/heart-cocktail" title="Heart Cocktail">Heart Cocktail</a></li>
                                                                                <li><a href="/category/high-card-season-2" title="High Card Season 2">High Card Season 2</a></li>
                                                                                <li><a href="/category/high-school-mystery-gakuen-nanafushigi" title="High School Mystery: Gakuen Nanafushigi">High School Mystery: Gakuen Nanafushigi</a></li>
                                                                                <li><a href="/category/hikari-no-ou-2nd-season" title="Hikari no Ou 2nd Season">Hikari no Ou 2nd Season</a></li>
                                                                                <li><a href="/category/himesama-goumon-no-jikan-desu" title="Himesama "Goumon" no Jikan desu">Himesama "Goumon" no Jikan desu</a></li>
                                                                                <li><a href="/category/holo-no-graffiti" title="Holo no Graffiti">Holo no Graffiti</a></li>
                                                                                <li><a href="/category/hundred-refined-gods" title="Hundred Refined Gods">Hundred Refined Gods</a></li>
                                                                                <li><a href="/category/hundreds-of-millions-of-apprentices-are-returned-this-master-is-invincible-in-the-world" title="Hundreds of Millions of Apprentices Are Returned: This Master Is Invincible in the World">Hundreds of Millions of Apprentices Are Returned: This Master Is Invincible in the World</a></li>
                                                                                <li><a href="/category/huoxing-xi-lu-7-hao" title="Huoxing Xi Lu 7 Hao">Huoxing Xi Lu 7 Hao</a></li>
                                                                                <li><a href="/category/i-am-his-first-love" title="I Am His First Love">I Am His First Love</a></li>
                                                                                <li><a href="/category/i-am-legend-3nd-season" title="I AM Legend 3nd Season">I AM Legend 3nd Season</a></li>
                                                                                <li><a href="/category/i-am-straight-z" title="I AM Straight Z">I AM Straight Z</a></li>
                                                                                <li><a href="/category/i-am-the-king" title="I Am the King">I Am the King</a></li>
                                                                                <li><a href="/category/i-can-change-the-timeline-of-everything" title="I Can Change The Timeline of Everything">I Can Change The Timeline of Everything</a></li>
                                                                                <li><a href="/category/i-can-control-all-opportunities" title="I Can Control All Opportunities">I Can Control All Opportunities</a></li>
                                                                                <li><a href="/category/i-can-have-infinite-epiphanies" title="I Can Have Infinite Epiphanies">I Can Have Infinite Epiphanies</a></li>
                                                                                <li><a href="/category/i-cant-be-sword-god" title="I Can’t Be Sword God">I Can’t Be Sword God</a></li>
                                                                                <li><a href="/category/i-feel-so-good-in-mysterious-world" title="I Feel So Good In Mysterious World">I Feel So Good In Mysterious World</a></li>
                                                                                <li><a href="/category/i-get-stronger-by-doing-nothing" title="I Get Stronger By Doing Nothing">I Get Stronger By Doing Nothing</a></li>
                                                                                <li><a href="/category/i-got-god-pulse-in-beginninginvincible" title="i Got God Pulse In Beginning,Invincible">i Got God Pulse In Beginning,Invincible</a></li>
                                                                                <li><a href="/category/i-got-you-2022" title="I Got You (2022)">I Got You (2022)</a></li>
                                                                                <li><a href="/category/i-have-a-dragon-in-my-body" title="I Have a Dragon in My Body">I Have a Dragon in My Body</a></li>
                                                                                <li><a href="/category/i-just-want-to-be-killed" title="I Just Want to Be Killed">I Just Want to Be Killed</a></li>
                                                                                <li><a href="/category/i-really-dont-want-to-be-a-fairy" title="I Really Don’t Want to Be a Fairy">I Really Don’t Want to Be a Fairy</a></li>
                                                                                <li><a href="/category/i-rely-on-rewarding-apprentices-to-upgrade" title="I rely on rewarding apprentices to upgrade">I rely on rewarding apprentices to upgrade</a></li>
                                                                                <li><a href="/category/i-return-from-the-heavens-s2" title="I Return From The Heavens S2">I Return From The Heavens S2</a></li>
                                                                                <li><a href="/category/i-rise-alone" title="I Rise Alone">I Rise Alone</a></li>
                                                                                <li><a href="/category/i-send-express-delivery-with-godly-grand-rewards" title="I Send Express Delivery With Godly Grand Rewards">I Send Express Delivery With Godly Grand Rewards</a></li>
                                                                                <li><a href="/category/i-was-invincible-long-ago" title="I was invincible long ago">I was invincible long ago</a></li>
                                                                                <li><a href="/category/i-queen-edith" title="I, Queen Edith ">I, Queen Edith </a></li>
                                                                                <li><a href="/category/i-cinnamoroll-animation" title="I.Cinnamoroll Animation">I.Cinnamoroll Animation</a></li>
                                                                                <li><a href="/category/im-unbeatable" title="I'm Unbeatable">I'm Unbeatable</a></li>
                                                                                <li><a href="/category/im-a-boss-in-the-devil-world" title="I’m A Boss in the Devil World">I’m A Boss in the Devil World</a></li>
                                                                                <li><a href="/category/im-an-evil-god" title="I’m An Evil God">I’m An Evil God</a></li>
                                                                                <li><a href="/category/im-just-an-immortal" title="I’m Just an Immortal">I’m Just an Immortal</a></li>
                                                                                <li><a href="/category/ive-got-a-million-skill-points" title="I’ve Got a Million Skill Points!">I’ve Got a Million Skill Points!</a></li>
                                                                                <li><a href="/category/idol-land-pripara" title="Idol Land PriPara">Idol Land PriPara</a></li>
                                                                                <li><a href="/category/idol-tenshi-youkoso-youko" title="Idol Tenshi Youkoso Youko">Idol Tenshi Youkoso Youko</a></li>
                                                                                <li><a href="/category/immortal-krypton-king" title="Immortal Krypton King">Immortal Krypton King</a></li>
                                                                                <li><a href="/category/immortal-lord" title="Immortal Lord">Immortal Lord</a></li>
                                                                                <li><a href="/category/infinite-apostles-and-the-twelve-fighting-princesses" title="Infinite Apostles and the Twelve Fighting Princesses">Infinite Apostles and the Twelve Fighting Princesses</a></li>
                                                                                <li><a href="/category/infinite-devouring-from-zero-to-hero" title="Infinite Devouring: From Zero to Hero">Infinite Devouring: From Zero to Hero</a></li>
                                                                                <li><a href="/category/invincible-beautiful-doctor-prince-be-my-man-s5" title="Invincible Beautiful Doctor: Prince Be My Man S5">Invincible Beautiful Doctor: Prince Be My Man S5</a></li>
                                                                                <li><a href="/category/invincible-villain" title="Invincible Villain">Invincible Villain</a></li>
                                                                                <li><a href="/category/isekai-de-mofumofu-nadenade-suru-tame-ni-ganbattemasu" title="Isekai de Mofumofu Nadenade suru Tame ni Ganbattemasu.">Isekai de Mofumofu Nadenade suru Tame ni Ganbattemasu.</a></li>
                                                                                <li><a href="/category/ishura" title="Ishura">Ishura</a></li>
                                                                                <li><a href="/category/jaku-chara-tomozaki-kun-2nd-stage" title="Jaku-Chara Tomozaki-kun 2nd Stage">Jaku-Chara Tomozaki-kun 2nd Stage</a></li>
                                                                                <li><a href="/category/jaku-chara-tomozaki-kun-2nd-stage-dub" title="Jaku-Chara Tomozaki-kun 2nd Stage (Dub)">Jaku-Chara Tomozaki-kun 2nd Stage (Dub)</a></li>
                                                                                <li><a href="/category/jarinko-chie-tv" title="Jarinko Chie (TV)">Jarinko Chie (TV)</a></li>
                                                                                <li><a href="/category/jian-gu" title="Jian Gu">Jian Gu</a></li>
                                                                                <li><a href="/category/jijia-yingxiong-ji-dou-yongzhe" title="Jijia Yingxiong: Ji Dou Yongzhe">Jijia Yingxiong: Ji Dou Yongzhe</a></li>
                                                                                <li><a href="/category/jin-zhan-fashi" title="Jin Zhan Fashi">Jin Zhan Fashi</a></li>
                                                                                <li><a href="/category/jintian-kaishi-shanyao-dengchang" title="Jintian Kaishi Shanyao Dengchang">Jintian Kaishi Shanyao Dengchang</a></li>
                                                                                <li><a href="/category/jiu-tian-xuan-di-jue-3" title="Jiu Tian Xuan Di Jue 3">Jiu Tian Xuan Di Jue 3</a></li>
                                                                                <li><a href="/category/jue-ding" title="Jue Ding">Jue Ding</a></li>
                                                                                <li><a href="/category/jujutsu-kaisen-2nd-season-dub" title="Jujutsu Kaisen 2nd Season (Dub)">Jujutsu Kaisen 2nd Season (Dub)</a></li>
                                                                                <li><a href="/category/just-spoil-you" title="Just Spoil You">Just Spoil You</a></li>
                                                                                <li><a href="/category/kaibutsu-kun-1980" title="Kaibutsu-kun (1980)">Kaibutsu-kun (1980)</a></li>
                                                                                <li><a href="/category/kaitou-saint-tail-dub" title="Kaitou Saint Tail (Dub)">Kaitou Saint Tail (Dub)</a></li>
                                                                                <li><a href="/category/kami-kuzuidol-dub" title="Kami Kuzu☆Idol (Dub)">Kami Kuzu☆Idol (Dub)</a></li>
                                                                                <li><a href="/category/kekkon-yubiwa-monogatari" title="Kekkon Yubiwa Monogatari">Kekkon Yubiwa Monogatari</a></li>
                                                                                <li><a href="/category/kekkon-yubiwa-monogatari-dub" title="Kekkon Yubiwa Monogatari (Dub)">Kekkon Yubiwa Monogatari (Dub)</a></li>
                                                                                <li><a href="/category/kingdom-5th-season" title="Kingdom 5th Season">Kingdom 5th Season</a></li>
                                                                                <li><a href="/category/kingdom-5th-season-chinese-name" title="Kingdom 5th Season (Chinese Name)">Kingdom 5th Season (Chinese Name)</a></li>
                                                                                <li><a href="/category/kouchuu-ouja-mushiking-mori-no-tami-no-densetsu" title="Kouchuu Ouja Mushiking: Mori no Tami no Densetsu">Kouchuu Ouja Mushiking: Mori no Tami no Densetsu</a></li>
                                                                                <li><a href="/category/kouya-no-kotobuki-hikoutai-gaiden-oozora-no-harukaze-hikoutai" title="Kouya no Kotobuki Hikoutai Gaiden: Oozora no Harukaze Hikoutai">Kouya no Kotobuki Hikoutai Gaiden: Oozora no Harukaze Hikoutai</a></li>
                                                                                <li><a href="/category/kryptonian-big-brother" title="Kryptonian Big Brother">Kryptonian Big Brother</a></li>
                                                                                <li><a href="/category/kui-cheng-shoufu-cong-youxi-kaishi" title="Kui Cheng Shoufu Cong Youxi Kaishi">Kui Cheng Shoufu Cong Youxi Kaishi</a></li>
                                                                                <li><a href="/category/kuromis-pretty-journey-dub" title="Kuromi's Pretty Journey (Dub)">Kuromi's Pretty Journey (Dub)</a></li>
                                                                                <li><a href="/category/kusuriya-no-hitorigoto" title="Kusuriya no Hitorigoto">Kusuriya no Hitorigoto</a></li>
                                                                                <li><a href="/category/kusuriya-no-hitorigoto-dub" title="Kusuriya no Hitorigoto (Dub)">Kusuriya no Hitorigoto (Dub)</a></li>
                                                                                <li><a href="/category/kyuujitsu-no-warumono-san" title="Kyuujitsu no Warumono-san">Kyuujitsu no Warumono-san</a></li>
                                                                                <li><a href="/category/legend-of-xianwu-2nd-season" title="Legend of Xianwu 2nd Season">Legend of Xianwu 2nd Season</a></li>
                                                                                <li><a href="/category/lian-qi-shi-wan-nian" title="Lian Qi Shi Wan Nian">Lian Qi Shi Wan Nian</a></li>
                                                                                <li><a href="/category/liang-bu-yi-2nd-season" title="Liang Bu Yi 2nd Season">Liang Bu Yi 2nd Season</a></li>
                                                                                <li><a href="/category/long-shidai" title="Long Shidai">Long Shidai</a></li>
                                                                                <li><a href="/category/loop-7-kaime-no-akuyaku-reijou-wa-moto-tekikoku-de-jiyuu-kimama-na-hanayome-seikatsu-wo-mankitsu-suru" title="Loop 7-kaime no Akuyaku Reijou wa, Moto Tekikoku de Jiyuu Kimama na Hanayome Seikatsu wo Mankitsu suru">Loop 7-kaime no Akuyaku Reijou wa, Moto Tekikoku de Jiyuu Kimama na Hanayome Seikatsu wo Mankitsu suru</a></li>
                                                                                <li><a href="/category/love-magic-grovery" title="Love Magic Grovery">Love Magic Grovery</a></li>
                                                                                <li><a href="/category/machine-robo-butchigiri-battle-hackers" title="Machine Robo: Butchigiri Battle Hackers">Machine Robo: Butchigiri Battle Hackers</a></li>
                                                                                <li><a href="/category/magical-suite-prism-nana" title="Magical Suite Prism Nana">Magical Suite Prism Nana</a></li>
                                                                                <li><a href="/category/mahou-no-angel-sweet-mint" title="Mahou no Angel Sweet Mint">Mahou no Angel Sweet Mint</a></li>
                                                                                <li><a href="/category/mahou-shoujo-ni-akogarete" title="Mahou Shoujo ni Akogarete">Mahou Shoujo ni Akogarete</a></li>
                                                                                <li><a href="/category/majo-to-yajuu" title="Majo to Yajuu">Majo to Yajuu</a></li>
                                                                                <li><a href="/category/majo-to-yajuu-dub" title="Majo to Yajuu (Dub)">Majo to Yajuu (Dub)</a></li>
                                                                                <li><a href="/category/mao-zhi-ming-2nd-season" title="Mao Zhi Ming 2nd Season">Mao Zhi Ming 2nd Season</a></li>
                                                                                <li><a href="/category/maoling-xiangce" title="Maoling Xiangce">Maoling Xiangce</a></li>
                                                                                <li><a href="/category/marry-the-president" title="Marry the President">Marry the President</a></li>
                                                                                <li><a href="/category/martial-arts-dominance" title="Martial arts dominance">Martial arts dominance</a></li>
                                                                                <li><a href="/category/martial-arts-master" title=" Martial arts master"> Martial arts master</a></li>
                                                                                <li><a href="/category/martial-arts-reigns" title="Martial Arts Reigns">Martial Arts Reigns</a></li>
                                                                                <li><a href="/category/martial-peak" title="Martial Peak">Martial Peak</a></li>
                                                                                <li><a href="/category/mashle-2nd-season" title="Mashle 2nd Season">Mashle 2nd Season</a></li>
                                                                                <li><a href="/category/master-of-ten-thousand-paths" title="Master of Ten Thousand Paths">Master of Ten Thousand Paths</a></li>
                                                                                <li><a href="/category/master-of-three-realms" title="Master of Three Realms">Master of Three Realms</a></li>
                                                                                <li><a href="/category/mato-seihei-no-slave" title="Mato Seihei no Slave">Mato Seihei no Slave</a></li>
                                                                                <li><a href="/category/mazica-party" title="Mazica Party">Mazica Party</a></li>
                                                                                <li><a href="/category/meet-in-rebirth-an-exclusive-for-you-and-me-s4" title="Meet in Rebirth: An Exclusive For You and Me S4">Meet in Rebirth: An Exclusive For You and Me S4</a></li>
                                                                                <li><a href="/category/megumi-no-daigo-kyuukoku-no-orange" title="Megumi no Daigo: Kyuukoku no Orange">Megumi no Daigo: Kyuukoku no Orange</a></li>
                                                                                <li><a href="/category/meiji-gekken-1874" title="Meiji Gekken: 1874">Meiji Gekken: 1874</a></li>
                                                                                <li><a href="/category/meitou-isekai-no-yu-kaitakuki-around-40-onsen-mania-no-tensei-saki-wa-nonbiri-onsen-tengoku-deshita" title="Meitou "Isekai no Yu" Kaitakuki: Around 40 Onsen Mania no Tensei Saki wa, Nonbiri Onsen Tengoku deshita">Meitou "Isekai no Yu" Kaitakuki: Around 40 Onsen Mania no Tensei Saki wa, Nonbiri Onsen Tengoku deshita</a></li>
                                                                                <li><a href="/category/metallic-rouge" title="Metallic Rouge">Metallic Rouge</a></li>
                                                                                <li><a href="/category/metallic-rouge-dub" title="Metallic Rouge (Dub)">Metallic Rouge (Dub)</a></li>
                                                                                <li><a href="/category/milgyaam" title="MILGЯAM">MILGЯAM</a></li>
                                                                                <li><a href="/category/million-times-attack-speed" title="Million Times Attack Speed">Million Times Attack Speed</a></li>
                                                                                <li><a href="/category/mingyun-quan-tai" title="Mingyun Quan Tai">Mingyun Quan Tai</a></li>
                                                                                <li><a href="/category/mo-zhuang-chuanshuo" title="Mo Zhuang Chuanshuo">Mo Zhuang Chuanshuo</a></li>
                                                                                <li><a href="/category/moffun-to-issho" title="Moffun to Issho">Moffun to Issho</a></li>
                                                                                <li><a href="/category/momochi-san-chi-no-ayakashi-ouji" title="Momochi-san Chi no Ayakashi Ouji">Momochi-san Chi no Ayakashi Ouji</a></li>
                                                                                <li><a href="/category/momochi-san-chi-no-ayakashi-ouji-dub" title="Momochi-san Chi no Ayakashi Ouji (Dub)">Momochi-san Chi no Ayakashi Ouji (Dub)</a></li>
                                                                                <li><a href="/category/motto-majime-ni-fumajime-kaiketsu-zorori-3rd-season" title="Motto! Majime ni Fumajime Kaiketsu Zorori 3rd Season">Motto! Majime ni Fumajime Kaiketsu Zorori 3rd Season</a></li>
                                                                                <li><a href="/category/muumin-1972" title="Muumin (1972)">Muumin (1972)</a></li>
                                                                                <li><a href="/category/my-apprentice-is-female-emperor" title="My Apprentice is Female Emperor">My Apprentice is Female Emperor</a></li>
                                                                                <li><a href="/category/my-beautiful-tenant" title="My Beautiful Tenant">My Beautiful Tenant</a></li>
                                                                                <li><a href="/category/my-disciples-are-all-over-the-world" title="My Disciples are All Over the World">My Disciples are All Over the World</a></li>
                                                                                <li><a href="/category/my-karmic-girlfriend" title="My Karmic Girlfriend ">My Karmic Girlfriend </a></li>
                                                                                <li><a href="/category/my-master-is-an-emperor" title="My Master Is An Emperor">My Master Is An Emperor</a></li>
                                                                                <li><a href="/category/my-master-is-super-fierce-s2" title="My Master is Super Fierce S2">My Master is Super Fierce S2</a></li>
                                                                                <li><a href="/category/my-senior-brother-is-too-extraordinary" title="My Senior Brother is Too Extraordinary">My Senior Brother is Too Extraordinary</a></li>
                                                                                <li><a href="/category/my-wife-is-a-demon-queen" title="My Wife Is a Demon Queen">My Wife Is a Demon Queen</a></li>
                                                                                <li><a href="/category/nanatsu-no-taizai-mokushiroku-no-yonkishi" title="Nanatsu no Taizai: Mokushiroku no Yonkishi">Nanatsu no Taizai: Mokushiroku no Yonkishi</a></li>
                                                                                <li><a href="/category/nanatsu-no-taizai-mokushiroku-no-yonkishi-dub" title="Nanatsu no Taizai: Mokushiroku no Yonkishi (Dub)">Nanatsu no Taizai: Mokushiroku no Yonkishi (Dub)</a></li>
                                                                                <li><a href="/category/ni-de-rensheng-shi-wo-lai-chi-le" title="Ni De Rensheng Shi Wo Lai Chi Le">Ni De Rensheng Shi Wo Lai Chi Le</a></li>
                                                                                <li><a href="/category/ni-yian-jian-shen" title="Ni Yian Jian Shen">Ni Yian Jian Shen</a></li>
                                                                                <li><a href="/category/nine-heavens-emperor-god-season-3" title="Nine Heavens Emperor God Season 3">Nine Heavens Emperor God Season 3</a></li>
                                                                                <li><a href="/category/ningen-kakumei" title="Ningen Kakumei">Ningen Kakumei</a></li>
                                                                                <li><a href="/category/ninja-kamui" title="Ninja Kamui">Ninja Kamui</a></li>
                                                                                <li><a href="/category/ninja-kamui-dub" title="Ninja Kamui (Dub)">Ninja Kamui (Dub)</a></li>
                                                                                <li><a href="/category/nitian-xie-shen-2023" title="Nitian Xie Shen (2023)">Nitian Xie Shen (2023)</a></li>
                                                                                <li><a href="/category/nitian-xie-shen-2nd-season" title="Nitian Xie Shen 2nd Season">Nitian Xie Shen 2nd Season</a></li>
                                                                                <li><a href="/category/nozomanu-fushi-no-boukensha" title="Nozomanu Fushi no Boukensha">Nozomanu Fushi no Boukensha</a></li>
                                                                                <li><a href="/category/nushen-you-dian-ling" title="Nushen You Dian Ling">Nushen You Dian Ling</a></li>
                                                                                <li><a href="/category/nuwa-chengzhang-riji" title="Nuwa Chengzhang Riji">Nuwa Chengzhang Riji</a></li>
                                                                                <li><a href="/category/obake-zukan" title="Obake Zukan">Obake Zukan</a></li>
                                                                                <li><a href="/category/ochibi-san" title="Ochibi-san">Ochibi-san</a></li>
                                                                                <li><a href="/category/odekake-kozame" title="Odekake Kozame">Odekake Kozame</a></li>
                                                                                <li><a href="/category/okashi-na-sabaku-no-suna-to-manu" title="Okashi na Sabaku no Suna to Manu">Okashi na Sabaku no Suna to Manu</a></li>
                                                                                <li><a href="/category/one-move-to-explode-the-cultivation-realm" title="One Move to Explode the Cultivation Realm">One Move to Explode the Cultivation Realm</a></li>
                                                                                <li><a href="/category/one-piece" title="One Piece">One Piece</a></li>
                                                                                <li><a href="/category/one-piece-dub" title="One Piece (Dub)">One Piece (Dub)</a></li>
                                                                                <li><a href="/category/one-piece-luffy-senpai-ouen-kikaku-barto-no-himitsu-no-heya-dub" title="One Piece: Luffy Senpai Ouen Kikaku! Barto no Himitsu no Heya! (Dub)">One Piece: Luffy Senpai Ouen Kikaku! Barto no Himitsu no Heya! (Dub)</a></li>
                                                                                <li><a href="/category/onigiri-ni-naritai-cogimyun" title="Onigiri ni Naritai Cogimyun">Onigiri ni Naritai Cogimyun</a></li>
                                                                                <li><a href="/category/onmyoji-rani" title="Onmyoji Rani">Onmyoji Rani</a></li>
                                                                                <li><a href="/category/opening-awakening-favorability-system" title="Opening Awakening Favorability System">Opening Awakening Favorability System</a></li>
                                                                                <li><a href="/category/ore-dake-level-up-na-ken" title="Ore dake Level Up na Ken">Ore dake Level Up na Ken</a></li>
                                                                                <li><a href="/category/ore-dake-level-up-na-ken-dub" title="Ore dake Level Up na Ken (Dub)">Ore dake Level Up na Ken (Dub)</a></li>
                                                                                <li><a href="/category/ore-dake-level-up-na-ken-korean-dub" title="Ore dake Level Up na Ken (Korean Dub)">Ore dake Level Up na Ken (Korean Dub)</a></li>
                                                                                <li><a href="/category/ore-tsushima" title="Ore, Tsushima">Ore, Tsushima</a></li>
                                                                                <li><a href="/category/oroka-na-tenshi-wa-akuma-to-odoru" title="Oroka na Tenshi wa Akuma to Odoru">Oroka na Tenshi wa Akuma to Odoru</a></li>
                                                                                <li><a href="/category/oroka-na-tenshi-wa-akuma-to-odoru-dub" title="Oroka na Tenshi wa Akuma to Odoru (Dub)">Oroka na Tenshi wa Akuma to Odoru (Dub)</a></li>
                                                                                <li><a href="/category/otonari-ni-ginga-dub" title="Otonari ni Ginga (Dub)">Otonari ni Ginga (Dub)</a></li>
                                                                                <li><a href="/category/ousama-ranking-yuuki-no-takarabako-dub" title="Ousama Ranking: Yuuki no Takarabako (Dub)">Ousama Ranking: Yuuki no Takarabako (Dub)</a></li>
                                                                                <li><a href="/category/peerless-martial-spirit" title="Peerless Martial Spirit">Peerless Martial Spirit</a></li>
                                                                                <li><a href="/category/pi-zhe-lang-pi-de-yang" title="Pi Zhe Lang Pi De Yang">Pi Zhe Lang Pi De Yang</a></li>
                                                                                <li><a href="/category/picked-up-a-devil-to-be-my-maid" title="Picked Up A Devil to be My Maid">Picked Up A Devil to be My Maid</a></li>
                                                                                <li><a href="/category/poisonous-witch-doctor" title="Poisonous Witch Doctor">Poisonous Witch Doctor</a></li>
                                                                                <li><a href="/category/pokemon" title="Pokemon">Pokemon</a></li>
                                                                                <li><a href="/category/pokemon-2023-dub" title="Pokemon (2023) (Dub)">Pokemon (2023) (Dub)</a></li>
                                                                                <li><a href="/category/pokemon-shinsaku-anime" title="Pokemon (Shinsaku Anime)">Pokemon (Shinsaku Anime)</a></li>
                                                                                <li><a href="/category/poketoon-dub" title="Poketoon (Dub)">Poketoon (Dub)</a></li>
                                                                                <li><a href="/category/pon-no-michi" title="Pon no Michi">Pon no Michi</a></li>
                                                                                <li><a href="/category/pururun-shizuku-chan" title="Pururun! Shizuku-chan">Pururun! Shizuku-chan</a></li>
                                                                                <li><a href="/category/qi-hou-bilu" title="Qi Hou Bilu">Qi Hou Bilu</a></li>
                                                                                <li><a href="/category/qian-cong-shou" title="Qian Cong Shou">Qian Cong Shou</a></li>
                                                                                <li><a href="/category/qin-shi-ming-yue-canghai-hengliu" title="Qin Shi Ming Yue : Canghai Hengliu">Qin Shi Ming Yue : Canghai Hengliu</a></li>
                                                                                <li><a href="/category/qing-lian-jian-xian-chuan" title="Qing Lian Jian Xian Chuan">Qing Lian Jian Xian Chuan</a></li>
                                                                                <li><a href="/category/quan-zhi-ming" title="Quan Zhi Ming">Quan Zhi Ming</a></li>
                                                                                <li><a href="/category/ragna-crimson" title="Ragna Crimson">Ragna Crimson</a></li>
                                                                                <li><a href="/category/ragna-crimson-dub" title="Ragna Crimson (Dub)">Ragna Crimson (Dub)</a></li>
                                                                                <li><a href="/category/rail-romanesque-2" title="Rail Romanesque 2">Rail Romanesque 2</a></li>
                                                                                <li><a href="/category/ran-xia" title="Ran Xia">Ran Xia</a></li>
                                                                                <li><a href="/category/rebirth-meta-morphosis" title="Rebirth (Meta Morphosis)">Rebirth (Meta Morphosis)</a></li>
                                                                                <li><a href="/category/rebirth-as-the-great-celestial-s2" title="Rebirth as The Great Celestial S2">Rebirth as The Great Celestial S2</a></li>
                                                                                <li><a href="/category/rebirth-of-mu-zhen-s5" title="Rebirth of Mu Zhen S5">Rebirth of Mu Zhen S5</a></li>
                                                                                <li><a href="/category/rebirth-of-the-emperor" title="Rebirth Of The Emperor ">Rebirth Of The Emperor </a></li>
                                                                                <li><a href="/category/rebirth-of-the-urban-immortal-cultivator-s3" title="Rebirth of the Urban Immortal Cultivator Season 3">Rebirth of the Urban Immortal Cultivator Season 3</a></li>
                                                                                <li><a href="/category/rebirth-of-wu-zun-in-power" title="Rebirth of Wu Zun in power">Rebirth of Wu Zun in power</a></li>
                                                                                <li><a href="/category/rebirth-yor-80000-years" title="Rebirth Yor 80,000 Years">Rebirth Yor 80,000 Years</a></li>
                                                                                <li><a href="/category/rebirth-city-deity" title="Rebirth: City Deity">Rebirth: City Deity</a></li>
                                                                                <li><a href="/category/renjian-zui-deyi" title="Renjian Zui Deyi">Renjian Zui Deyi</a></li>
                                                                                <li><a href="/category/return-of-the-immortal" title="Return of the Immortal">Return of the Immortal</a></li>
                                                                                <li><a href="/category/rich-player-3" title="Rich Player 3">Rich Player 3</a></li>
                                                                                <li><a href="/category/ruguo-lishi-shi-yiqun-miao-3rd-season" title="Ruguo Lishi Shi Yiqun Miao 3rd Season">Ruguo Lishi Shi Yiqun Miao 3rd Season</a></li>
                                                                                <li><a href="/category/rurouni-kenshin-meiji-kenkaku-romantan-2023-dub" title="Rurouni Kenshin: Meiji Kenkaku Romantan (2023)  (Dub)">Rurouni Kenshin: Meiji Kenkaku Romantan (2023)  (Dub)</a></li>
                                                                                <li><a href="/category/sabaku-no-kaizoku-captain-kuppa" title="Sabaku no Kaizoku! Captain Kuppa">Sabaku no Kaizoku! Captain Kuppa</a></li>
                                                                                <li><a href="/category/saijaku-tamer-wa-gomi-hiroi-no-tabi-wo-hajimemashita" title="Saijaku Tamer wa Gomi Hiroi no Tabi wo Hajimemashita.">Saijaku Tamer wa Gomi Hiroi no Tabi wo Hajimemashita.</a></li>
                                                                                <li><a href="/category/saijaku-tamer-wa-gomi-hiroi-no-tabi-wo-hajimemashita-dub" title="Saijaku Tamer wa Gomi Hiroi no Tabi wo Hajimemashita. (Dub)">Saijaku Tamer wa Gomi Hiroi no Tabi wo Hajimemashita. (Dub)</a></li>
                                                                                <li><a href="/category/saikyou-tank-no-meikyuu-kouryaku-tairyoku-9999-no-rare-skill-mochi-tank-yuusha-party-wo-tsuihou-sareru" title="Saikyou Tank no Meikyuu Kouryaku: Tairyoku 9999 no Rare Skill-mochi Tank, Yuusha Party wo Tsuihou sareru">Saikyou Tank no Meikyuu Kouryaku: Tairyoku 9999 no Rare Skill-mochi Tank, Yuusha Party wo Tsuihou sareru</a></li>
                                                                                <li><a href="/category/sakkai-eightraid" title="Sakkai Eightraid">Sakkai Eightraid</a></li>
                                                                                <li><a href="/category/samurai-giants" title="Samurai Giants">Samurai Giants</a></li>
                                                                                <li><a href="/category/san-cun-renjian" title="San Cun Renjian">San Cun Renjian</a></li>
                                                                                <li><a href="/category/sanshiliu-qi" title="Sanshiliu Qi">Sanshiliu Qi</a></li>
                                                                                <li><a href="/category/sasaki-to-pii-chan" title="Sasaki to Pii-chan">Sasaki to Pii-chan</a></li>
                                                                                <li><a href="/category/sasaki-to-pii-chan-dub" title="Sasaki to Pii-chan (Dub)">Sasaki to Pii-chan (Dub)</a></li>
                                                                                <li><a href="/category/seija-musou-salaryman-isekai-de-ikinokoru-tame-ni-ayumu-michi-dub" title="Seija Musou: Salaryman, Isekai de Ikinokoru Tame ni Ayumu Michi (Dub)">Seija Musou: Salaryman, Isekai de Ikinokoru Tame ni Ayumu Michi (Dub)</a></li>
                                                                                <li><a href="/category/seiken-gakuin-no-makentsukai-dub" title="Seiken Gakuin no Makentsukai (Dub)">Seiken Gakuin no Makentsukai (Dub)</a></li>
                                                                                <li><a href="/category/sengoku-youko" title="Sengoku Youko">Sengoku Youko</a></li>
                                                                                <li><a href="/category/shadowverse-flame-seven-shadows-hen" title="Shadowverse Flame: Seven Shadows-hen">Shadowverse Flame: Seven Shadows-hen</a></li>
                                                                                <li><a href="/category/shaman-king-flowers" title="Shaman King: Flowers">Shaman King: Flowers</a></li>
                                                                                <li><a href="/category/shan-hai-juelun" title="Shan Hai Juelun">Shan Hai Juelun</a></li>
                                                                                <li><a href="/category/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su" title="Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su">Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su</a></li>
                                                                                <li><a href="/category/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su-dub" title="Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su (Dub)">Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su (Dub)</a></li>
                                                                                <li><a href="/category/shanhai-jihui" title="Shanhai Jihui">Shanhai Jihui</a></li>
                                                                                <li><a href="/category/shaonian-baima-zui-chunfeng" title="Shaonian Baima Zui Chunfeng">Shaonian Baima Zui Chunfeng</a></li>
                                                                                <li><a href="/category/shaonian-ge-xing-haiwai-xianshan-pian" title="Shaonian Ge Xing: Haiwai Xianshan Pian">Shaonian Ge Xing: Haiwai Xianshan Pian</a></li>
                                                                                <li><a href="/category/shashou-gu-de" title="Shashou Gu De">Shashou Gu De</a></li>
                                                                                <li><a href="/category/shen-cang" title="Shen Cang">Shen Cang</a></li>
                                                                                <li><a href="/category/shen-ji-long-wei" title="Shen Ji Long Wei">Shen Ji Long Wei</a></li>
                                                                                <li><a href="/category/shen-mu" title="Shen Mu">Shen Mu</a></li>
                                                                                <li><a href="/category/shen-yin-wangzuo" title="Shen Yin Wangzuo">Shen Yin Wangzuo</a></li>
                                                                                <li><a href="/category/sheng-xu" title="Sheng Xu">Sheng Xu</a></li>
                                                                                <li><a href="/category/sheng-xu-season-2" title="Sheng Xu Season 2">Sheng Xu Season 2</a></li>
                                                                                <li><a href="/category/sheng-zu" title="Sheng Zu">Sheng Zu</a></li>
                                                                                <li><a href="/category/shenyuan-youxi" title="Shenyuan Youxi">Shenyuan Youxi</a></li>
                                                                                <li><a href="/category/shi-fang-jian-sheng" title="Shi Fang Jian Sheng">Shi Fang Jian Sheng</a></li>
                                                                                <li><a href="/category/shi-fang-wu-sheng" title="Shi Fang Wu Sheng">Shi Fang Wu Sheng</a></li>
                                                                                <li><a href="/category/shi-shaoxia-gunjue-hao-gudan" title="Shi Shaoxia Gunjue Hao Gudan">Shi Shaoxia Gunjue Hao Gudan</a></li>
                                                                                <li><a href="/category/shi-shi-chuanshuo" title="Shi Shi Chuanshuo">Shi Shi Chuanshuo</a></li>
                                                                                <li><a href="/category/shi-wangzhe-a-2nd-season" title="Shi Wangzhe A? 2nd Season">Shi Wangzhe A? 2nd Season</a></li>
                                                                                <li><a href="/category/shiguang-dailiren-ii-dub" title="Shiguang Dailiren II (Dub)">Shiguang Dailiren II (Dub)</a></li>
                                                                                <li><a href="/category/shikong-zhi-xi" title="Shikong Zhi Xi">Shikong Zhi Xi</a></li>
                                                                                <li><a href="/category/shin-no-nakama-ja-nai-to-yuusha-no-party-wo-oidasareta-node-henkyou-de-slow-life-suru-koto-ni-shimashita-2nd" title="Shin no Nakama ja Nai to Yuusha no Party wo Oidasareta node, Henkyou de Slow Life suru Koto ni Shimashita 2nd">Shin no Nakama ja Nai to Yuusha no Party wo Oidasareta node, Henkyou de Slow Life suru Koto ni Shimashita 2nd</a></li>
                                                                                <li><a href="/category/shin-no-nakama-ja-nai-to-yuusha-no-party-wo-oidasareta-node-henkyou-de-slow-life-suru-koto-ni-shimashita-2nd-dub" title="Shin no Nakama ja Nai to Yuusha no Party wo Oidasareta node, Henkyou de Slow Life suru Koto ni Shimashita 2nd (Dub)">Shin no Nakama ja Nai to Yuusha no Party wo Oidasareta node, Henkyou de Slow Life suru Koto ni Shimashita 2nd (Dub)</a></li>
                                                                                <li><a href="/category/shinigami-bocchan-to-kuro-maid-2nd-season-dub" title="Shinigami Bocchan to Kuro Maid 2nd Season (Dub)">Shinigami Bocchan to Kuro Maid 2nd Season (Dub)</a></li>
                                                                                <li><a href="/category/shinmai-renkinjutsushi-no-tenpo-keiei-dub" title="Shinmai Renkinjutsushi no Tenpo Keiei (Dub)">Shinmai Renkinjutsushi no Tenpo Keiei (Dub)</a></li>
                                                                                <li><a href="/category/shishang-zui-qiang-nan-zhujiao" title="Shishang Zui Qiang Nan Zhujiao">Shishang Zui Qiang Nan Zhujiao</a></li>
                                                                                <li><a href="/category/shouxi-yu-ling-shi-2nd-season" title="Shouxi Yu Ling Shi 2nd Season">Shouxi Yu Ling Shi 2nd Season</a></li>
                                                                                <li><a href="/category/shrouding-the-heavens" title="Shrouding The Heavens">Shrouding The Heavens</a></li>
                                                                                <li><a href="/category/shu-tian-fu-mo-lu" title="Shu Tian Fu Mo Lu">Shu Tian Fu Mo Lu</a></li>
                                                                                <li><a href="/category/shura-sword-sovereign" title="Shura Sword Sovereign ">Shura Sword Sovereign </a></li>
                                                                                <li><a href="/category/shushan-qi-xian-lu" title="Shushan Qi Xian Lu">Shushan Qi Xian Lu</a></li>
                                                                                <li><a href="/category/si-ge-yongzhe" title="Si Ge Yongzhe">Si Ge Yongzhe</a></li>
                                                                                <li><a href="/category/si-hai-jing-qi-2nd-season" title="Si Hai Jing Qi 2nd Season">Si Hai Jing Qi 2nd Season</a></li>
                                                                                <li><a href="/category/si-wu-xie" title="Si Wu Xie">Si Wu Xie</a></li>
                                                                                <li><a href="/category/snack-basue" title="Snack Basue">Snack Basue</a></li>
                                                                                <li><a href="/category/sokushi-cheat-ga-saikyou-sugite-isekai-no-yatsura-ga-marude-aite-ni-naranai-n-desu-ga" title="Sokushi Cheat ga Saikyou sugite, Isekai no Yatsura ga Marude Aite ni Naranai n desu ga.">Sokushi Cheat ga Saikyou sugite, Isekai no Yatsura ga Marude Aite ni Naranai n desu ga.</a></li>
                                                                                <li><a href="/category/sore-sunawachi-sketch" title="Sore, Sunawachi Sketch.">Sore, Sunawachi Sketch.</a></li>
                                                                                <li><a href="/category/sousou-no-frieren" title="Sousou no Frieren">Sousou no Frieren</a></li>
                                                                                <li><a href="/category/sousou-no-frieren-dub" title="Sousou no Frieren (Dub)">Sousou no Frieren (Dub)</a></li>
                                                                                <li><a href="/category/sousou-no-frieren-no-mahou" title="Sousou no Frieren: ●● no Mahou">Sousou no Frieren: ●● no Mahou</a></li>
                                                                                <li><a href="/category/spirit-master" title="Spirit Master">Spirit Master</a></li>
                                                                                <li><a href="/category/starscollection" title="Stars*Collection!">Stars*Collection!</a></li>
                                                                                <li><a href="/category/start-reborn-a-thousand-time-2th-season" title="Start Reborn A Thousand Time 2th Season">Start Reborn A Thousand Time 2th Season</a></li>
                                                                                <li><a href="/category/start-to-create-the-end-of-the-world-martial-arts" title="Start To Create The End of The World Martial Arts">Start To Create The End of The World Martial Arts</a></li>
                                                                                <li><a href="/category/starting-from-gu-huoniao-dragon-city-hegemony" title="Starting from Gu Huoniao: Dragon City Hegemony">Starting from Gu Huoniao: Dragon City Hegemony</a></li>
                                                                                <li><a href="/category/starting-with-a-penny" title="Starting With a Penny">Starting With a Penny</a></li>
                                                                                <li><a href="/category/sugar-apple-fairy-tale-dub" title="Sugar Apple Fairy Tale (Dub)">Sugar Apple Fairy Tale (Dub)</a></li>
                                                                                <li><a href="/category/sugar-apple-fairy-tale-part-2-dub" title="Sugar Apple Fairy Tale Part 2 (Dub)">Sugar Apple Fairy Tale Part 2 (Dub)</a></li>
                                                                                <li><a href="/category/super-baby-is-coming-mommywheres-my-daddy" title="Super baby is coming: Mommy,where's my daddy?">Super baby is coming: Mommy,where's my daddy?</a></li>
                                                                                <li><a href="/category/super-cube" title="Super Cube ">Super Cube </a></li>
                                                                                <li><a href="/category/super-dragon-ball-heroes-meteor-mission" title="Super Dragon Ball Heroes Meteor Mission">Super Dragon Ball Heroes Meteor Mission</a></li>
                                                                                <li><a href="/category/super-psycho-love-2nd-season" title="Super Psycho Love 2nd Season">Super Psycho Love 2nd Season</a></li>
                                                                                <li><a href="/category/super-seminaries" title="Super Seminaries">Super Seminaries</a></li>
                                                                                <li><a href="/category/supreme-god-system-s2" title="Supreme God System S2">Supreme God System S2</a></li>
                                                                                <li><a href="/category/supreme-godly-system" title="Supreme Godly System">Supreme Godly System</a></li>
                                                                                <li><a href="/category/supreme-gossip-system" title="Supreme Gossip System">Supreme Gossip System</a></li>
                                                                                <li><a href="/category/supreme-pupil-master" title="Supreme Pupil Master">Supreme Pupil Master</a></li>
                                                                                <li><a href="/category/supreme-saints-love-debts-s2" title="Supreme Saint's Love Debts Season 2">Supreme Saint's Love Debts Season 2</a></li>
                                                                                <li><a href="/category/supreme-warriors" title="Supreme Warriors">Supreme Warriors</a></li>
                                                                                <li><a href="/category/sweep-the-comprehension-world-with-one-move" title="Sweep the Comprehension World With One Move">Sweep the Comprehension World With One Move</a></li>
                                                                                <li><a href="/category/sword-dance-online" title="Sword Dance Online">Sword Dance Online</a></li>
                                                                                <li><a href="/category/sword-immortal-martial-emperor" title="Sword Immortal Martial Emperor">Sword Immortal Martial Emperor</a></li>
                                                                                <li><a href="/category/synduality-noir-part-2" title="Synduality: Noir Part 2">Synduality: Noir Part 2</a></li>
                                                                                <li><a href="/category/ta-bu-dang-nuzhu-hen-duo-nian" title="Ta Bu Dang Nuzhu Hen Duo Nian">Ta Bu Dang Nuzhu Hen Duo Nian</a></li>
                                                                                <li><a href="/category/taigu-xing-shen-jue" title="Taigu Xing Shen Jue">Taigu Xing Shen Jue</a></li>
                                                                                <li><a href="/category/tatas-rainbow-brainstorm-2" title="Tata's Rainbow Brainstorm 2">Tata's Rainbow Brainstorm 2</a></li>
                                                                                <li><a href="/category/ten-emperors-are-my-disciples" title="Ten Emperors Are My Disciples">Ten Emperors Are My Disciples</a></li>
                                                                                <li><a href="/category/ten-thousand-ways-magic-sect" title="Ten Thousand Ways Magic Sect">Ten Thousand Ways Magic Sect</a></li>
                                                                                <li><a href="/category/the-amazing-doctor-in-the-city" title="The Amazing Doctor in the City">The Amazing Doctor in the City</a></li>
                                                                                <li><a href="/category/the-apprentices-are-all-bosses" title="The Apprentices Are All Bosses">The Apprentices Are All Bosses</a></li>
                                                                                <li><a href="/category/the-bestmaestro-3" title="The BestMaestro Season 3">The BestMaestro Season 3</a></li>
                                                                                <li><a href="/category/the-crossing-beauty" title="The Crossing Beauty">The Crossing Beauty</a></li>
                                                                                <li><a href="/category/the-crossing-beauty-season-2" title="The Crossing Beauty Season 2">The Crossing Beauty Season 2</a></li>
                                                                                <li><a href="/category/the-daily-troubles-of-the-demon-king" title="The Daily Troubles Of The Demon King">The Daily Troubles Of The Demon King</a></li>
                                                                                <li><a href="/category/the-emperor-of-creation" title="The Emperor of Creation">The Emperor of Creation</a></li>
                                                                                <li><a href="/category/the-enraptured-prince-2022" title="The Enraptured Prince (2022)">The Enraptured Prince (2022)</a></li>
                                                                                <li><a href="/category/the-eternal-god-king" title="The Eternal God King">The Eternal God King</a></li>
                                                                                <li><a href="/category/the-first-son-in-law" title="The First Son-In-Law">The First Son-In-Law</a></li>
                                                                                <li><a href="/category/the-frenzy-of-evolution" title="The Frenzy Of Evolution">The Frenzy Of Evolution</a></li>
                                                                                <li><a href="/category/the-game-that-i-came-from" title="The Game That I Came From">The Game That I Came From</a></li>
                                                                                <li><a href="/category/the-god-devourer" title="The God Devourer">The God Devourer</a></li>
                                                                                <li><a href="/category/the-guardian-angel-of-demon" title="The Guardian Angel of Demon">The Guardian Angel of Demon</a></li>
                                                                                <li><a href="/category/the-invincible-great-immortal-at-the-beginning" title=" The invincible Great Immortal at the beginning"> The invincible Great Immortal at the beginning</a></li>
                                                                                <li><a href="/category/the-king-of-bugs" title="The King Of Bugs">The King Of Bugs</a></li>
                                                                                <li><a href="/category/the-last-hero" title="The Last Hero">The Last Hero</a></li>
                                                                                <li><a href="/category/the-last-human" title="The Last Human">The Last Human</a></li>
                                                                                <li><a href="/category/the-legend-of-photon-heroes" title="The Legend of Photon Heroes">The Legend of Photon Heroes</a></li>
                                                                                <li><a href="/category/the-legend-of-sword-domain-3rd-season" title="The Legend of Sword Domain 3rd Season">The Legend of Sword Domain 3rd Season</a></li>
                                                                                <li><a href="/category/the-legend-of-the-taiyi-sword-immortal" title="The Legend of The Taiyi Sword Immortal">The Legend of The Taiyi Sword Immortal</a></li>
                                                                                <li><a href="/category/the-miracle-doctor" title="The Miracle Doctor">The Miracle Doctor</a></li>
                                                                                <li><a href="/category/the-poor-boys-counterattack-on-the-underworld" title="The Poor Boy's Counterattack On The Underworld">The Poor Boy's Counterattack On The Underworld</a></li>
                                                                                <li><a href="/category/the-queens-harem" title="The Queen's Harem">The Queen's Harem</a></li>
                                                                                <li><a href="/category/the-return-of-the-immortal-king-of-the-city" title="The Return of the Immortal King of the City">The Return of the Immortal King of the City</a></li>
                                                                                <li><a href="/category/the-rise-of-the-weak" title="The Rise of the Weak">The Rise of the Weak</a></li>
                                                                                <li><a href="/category/the-sect-leaders-odd-journey" title="The Sect Leader’s Odd Journey">The Sect Leader’s Odd Journey</a></li>
                                                                                <li><a href="/category/the-sovereigns-ascension" title="The Sovereign’s Ascension">The Sovereign’s Ascension</a></li>
                                                                                <li><a href="/category/the-strongest-god-king-on-earth" title="The Strongest God King on Earth">The Strongest God King on Earth</a></li>
                                                                                <li><a href="/category/the-strongest-heavenly-venerate-in-the-happy-city" title="The Strongest Heavenly Venerate in the Happy City">The Strongest Heavenly Venerate in the Happy City</a></li>
                                                                                <li><a href="/category/the-strongest-physical-training-ancestor-in-history" title="The Strongest Physical Training Ancestor In History">The Strongest Physical Training Ancestor In History</a></li>
                                                                                <li><a href="/category/the-strongest-seal-master" title="The Strongest Seal Master">The Strongest Seal Master</a></li>
                                                                                <li><a href="/category/the-strongest-sect-of-all-times" title="The Strongest Sect of All Times">The Strongest Sect of All Times</a></li>
                                                                                <li><a href="/category/the-strongest-sect-of-all-times-season-2" title="The Strongest Sect of All Times Season 2">The Strongest Sect of All Times Season 2</a></li>
                                                                                <li><a href="/category/the-strongest-son-in-laws-roaming-journey" title="The Strongest Son-in-law’s Roaming Journey">The Strongest Son-in-law’s Roaming Journey</a></li>
                                                                                <li><a href="/category/the-supreme-martial-path" title="The Supreme Martial Path">The Supreme Martial Path</a></li>
                                                                                <li><a href="/category/the-supreme-master" title="The Supreme Master">The Supreme Master</a></li>
                                                                                <li><a href="/category/the-ultimate-dan-god" title="The Ultimate Dan God">The Ultimate Dan God</a></li>
                                                                                <li><a href="/category/the-urban-miracle-doctor" title="The Urban Miracle Doctor">The Urban Miracle Doctor</a></li>
                                                                                <li><a href="/category/there-is-a-sword-field-at-the-beginning" title="There is a Sword Field at the Beginning">There is a Sword Field at the Beginning</a></li>
                                                                                <li><a href="/category/tian-guan-ci-fu-dub" title="Tian Guan Ci Fu (Dub)">Tian Guan Ci Fu (Dub)</a></li>
                                                                                <li><a href="/category/tian-guan-ci-fu-2nd-season-dub" title="Tian Guan Ci Fu 2nd Season (Dub)">Tian Guan Ci Fu 2nd Season (Dub)</a></li>
                                                                                <li><a href="/category/time-bokan-series-gyakuten-ippatsuman" title="Time Bokan Series: Gyakuten Ippatsuman">Time Bokan Series: Gyakuten Ippatsuman</a></li>
                                                                                <li><a href="/category/time-prisoner-2nd-season" title="Time Prisoner 2nd Season">Time Prisoner 2nd Season</a></li>
                                                                                <li><a href="/category/tondemo-senshi-muteking" title="Tondemo Senshi Muteking">Tondemo Senshi Muteking</a></li>
                                                                                <li><a href="/category/tottemo-luckyman" title="Tottemo! Luckyman">Tottemo! Luckyman</a></li>
                                                                                <li><a href="/category/trapped-with-the-ceo" title="Trapped with the CEO">Trapped with the CEO</a></li>
                                                                                <li><a href="/category/tsuki-ga-michibiku-isekai-douchuu-2nd-season" title="Tsuki ga Michibiku Isekai Douchuu 2nd Season">Tsuki ga Michibiku Isekai Douchuu 2nd Season</a></li>
                                                                                <li><a href="/category/tsuki-ga-michibiku-isekai-douchuu-2nd-season-dub" title="Tsuki ga Michibiku Isekai Douchuu 2nd Season (Dub)">Tsuki ga Michibiku Isekai Douchuu 2nd Season (Dub)</a></li>
                                                                                <li><a href="/category/tunshi-xingkong-2nd-season" title="Tunshi Xingkong 2nd Season">Tunshi Xingkong 2nd Season</a></li>
                                                                                <li><a href="/category/tv-yarou-nanaana-kaibutsu-kraken-wo-oe" title="TV Yarou Nanaana: Kaibutsu Kraken wo Oe!">TV Yarou Nanaana: Kaibutsu Kraken wo Oe!</a></li>
                                                                                <li><a href="/category/ultimate-soldier" title="Ultimate Soldier">Ultimate Soldier</a></li>
                                                                                <li><a href="/category/undead-unluck" title="Undead Unluck">Undead Unluck</a></li>
                                                                                <li><a href="/category/undead-unluck-dub" title="Undead Unluck (Dub)">Undead Unluck (Dub)</a></li>
                                                                                <li><a href="/category/unlock-99-heroines-in-end-times" title="Unlock 99 Heroines in End Times">Unlock 99 Heroines in End Times</a></li>
                                                                                <li><a href="/category/urban-fairy-king" title="Urban Fairy King">Urban Fairy King</a></li>
                                                                                <li><a href="/category/urban-fairy-king-season-2" title="Urban Fairy King Season 2">Urban Fairy King Season 2</a></li>
                                                                                <li><a href="/category/urban-strongest-landlord" title="Urban Strongest Landlord">Urban Strongest Landlord</a></li>
                                                                                <li><a href="/category/urusei-yatsura-2022-2nd-season" title="Urusei Yatsura (2022) 2nd Season">Urusei Yatsura (2022) 2nd Season</a></li>
                                                                                <li><a href="/category/vanguard-dragon-god" title="Vanguard Dragon God">Vanguard Dragon God</a></li>
                                                                                <li><a href="/category/waluolan-xiao-zhen" title="Waluolan Xiao Zhen">Waluolan Xiao Zhen</a></li>
                                                                                <li><a href="/category/wan-jie-du-zun-2nd-season" title="Wan Jie Du Zun 2nd Season">Wan Jie Du Zun 2nd Season</a></li>
                                                                                <li><a href="/category/wan-jie-xian-zong-5th-season" title="Wan Jie Xian Zong 5th Season">Wan Jie Xian Zong 5th Season</a></li>
                                                                                <li><a href="/category/wan-jie-zhizun" title="Wan Jie Zhizun">Wan Jie Zhizun</a></li>
                                                                                <li><a href="/category/wan-jie-zhizun-2nd-season" title="Wan Jie Zhizun 2nd Season">Wan Jie Zhizun 2nd Season</a></li>
                                                                                <li><a href="/category/wan-sheng-jie-japanese-dub" title="Wan Sheng Jie (Japanese Dub)">Wan Sheng Jie (Japanese Dub)</a></li>
                                                                                <li><a href="/category/wan-yu-zhi-wang" title="Wan Yu Zhi Wang">Wan Yu Zhi Wang</a></li>
                                                                                <li><a href="/category/wangu-jian-shen" title="Wangu Jian Shen">Wangu Jian Shen</a></li>
                                                                                <li><a href="/category/wangu-jian-shen-2022" title="Wangu Jian Shen (2022)">Wangu Jian Shen (2022)</a></li>
                                                                                <li><a href="/category/wangu-kuang-di" title="Wangu Kuang Di">Wangu Kuang Di</a></li>
                                                                                <li><a href="/category/wangu-shenhua" title="Wangu Shenhua">Wangu Shenhua</a></li>
                                                                                <li><a href="/category/wangzhe-da-shixiong" title="Wangzhe Da Shixiong">Wangzhe Da Shixiong</a></li>
                                                                                <li><a href="/category/wanmei-shijie" title="Wanmei Shijie">Wanmei Shijie</a></li>
                                                                                <li><a href="/category/wansa-kun" title="Wansa-kun">Wansa-kun</a></li>
                                                                                <li><a href="/category/wei-jiang-2022" title="Wei Jiang (2022)">Wei Jiang (2022)</a></li>
                                                                                <li><a href="/category/with-a-sword-domain-i-can-become-the-sword-saint" title="With a Sword Domain, I Can Become the Sword Saint">With a Sword Domain, I Can Become the Sword Saint</a></li>
                                                                                <li><a href="/category/wo-de-yi-jie-zhi-lu" title="Wo De Yi Jie Zhi Lu">Wo De Yi Jie Zhi Lu</a></li>
                                                                                <li><a href="/category/wo-jian-qile-yi-di-shuxing" title="Wo Jian Qile Yi Di Shuxing">Wo Jian Qile Yi Di Shuxing</a></li>
                                                                                <li><a href="/category/wo-kao-chongzhi-dang-wudi" title="Wo Kao Chongzhi Dang Wudi">Wo Kao Chongzhi Dang Wudi</a></li>
                                                                                <li><a href="/category/wo-zai-xianjie-zheng-jifen" title="Wo Zai Xianjie Zheng Jifen">Wo Zai Xianjie Zheng Jifen</a></li>
                                                                                <li><a href="/category/wo-zhen-de-meiyong-mie" title="Wo Zhen de Meiyong Mie?">Wo Zhen de Meiyong Mie?</a></li>
                                                                                <li><a href="/category/wo-tianming-da-fanpai" title="Wo! Tianming Da Fanpai">Wo! Tianming Da Fanpai</a></li>
                                                                                <li><a href="/category/wonderful-precure" title="Wonderful Precure!">Wonderful Precure!</a></li>
                                                                                <li><a href="/category/wowo-2022" title="WOWO (2022)">WOWO (2022)</a></li>
                                                                                <li><a href="/category/wu-dong-qian-kun-3rd-season" title="Wu Dong Qian Kun 3rd Season">Wu Dong Qian Kun 3rd Season</a></li>
                                                                                <li><a href="/category/wu-dong-qian-kun-4th-season" title="Wu Dong Qian Kun 4th Season">Wu Dong Qian Kun 4th Season</a></li>
                                                                                <li><a href="/category/wu-fist" title="Wu Fist">Wu Fist</a></li>
                                                                                <li><a href="/category/wu-geng-ji-4th-season-part-2" title="Wu Geng Ji 4th Season Part 2">Wu Geng Ji 4th Season Part 2</a></li>
                                                                                <li><a href="/category/wu-nao-monu-2nd-season" title="Wu Nao Monu 2nd Season">Wu Nao Monu 2nd Season</a></li>
                                                                                <li><a href="/category/wu-ni-season-4" title="Wu Ni Season 4">Wu Ni Season 4</a></li>
                                                                                <li><a href="/category/wu-shan-wu-xing-2020-xichuan-huan-zi-lin" title="Wu Shan Wu Xing (2020): Xichuan Huan Zi Lin">Wu Shan Wu Xing (2020): Xichuan Huan Zi Lin</a></li>
                                                                                <li><a href="/category/wu-shang-shen-di-2nd-season" title="Wu Shang Shen Di 2nd Season">Wu Shang Shen Di 2nd Season</a></li>
                                                                                <li><a href="/category/wu-shen-zhu-zai" title="Wu Shen Zhu Zai">Wu Shen Zhu Zai</a></li>
                                                                                <li><a href="/category/wu-shuang-shu" title="Wu Shuang Shu">Wu Shuang Shu</a></li>
                                                                                <li><a href="/category/wu-ying-sanqian-dao-2" title="Wu Ying Sanqian Dao 2">Wu Ying Sanqian Dao 2</a></li>
                                                                                <li><a href="/category/wuhang-zhanshen" title="Wuhang Zhanshen">Wuhang Zhanshen</a></li>
                                                                                <li><a href="/category/wulin-buer-zhoukan" title="Wulin Buer Zhoukan">Wulin Buer Zhoukan</a></li>
                                                                                <li><a href="/category/wuxian-shaonu-48" title="Wuxian Shaonu 48">Wuxian Shaonu 48</a></li>
                                                                                <li><a href="/category/wuxian-shijie" title="Wuxian Shijie">Wuxian Shijie</a></li>
                                                                                <li><a href="/category/xi-xing-ji-nian-fan" title="Xi Xing Ji: Nian Fan">Xi Xing Ji: Nian Fan</a></li>
                                                                                <li><a href="/category/xian-di-gui-lai" title="Xian Di Gui Lai">Xian Di Gui Lai</a></li>
                                                                                <li><a href="/category/xian-di-gui-lai-3th-season" title="Xian Di Gui Lai 3th Season">Xian Di Gui Lai 3th Season</a></li>
                                                                                <li><a href="/category/xian-mu" title="Xian Mu">Xian Mu</a></li>
                                                                                <li><a href="/category/xian-ni" title="Xian Ni">Xian Ni</a></li>
                                                                                <li><a href="/category/xian-wang-de-richang-shenghuo-2-dub" title="Xian Wang de Richang Shenghuo 2 (Dub)">Xian Wang de Richang Shenghuo 2 (Dub)</a></li>
                                                                                <li><a href="/category/xian-wang-de-richang-shenghuo-4" title="Xian Wang de Richang Shenghuo 4">Xian Wang de Richang Shenghuo 4</a></li>
                                                                                <li><a href="/category/xian-wang-de-richang-shenghuo-4-dub" title="Xian Wang de Richang Shenghuo 4 (Dub)">Xian Wang de Richang Shenghuo 4 (Dub)</a></li>
                                                                                <li><a href="/category/xian-yu-ge" title="Xian Yu Ge">Xian Yu Ge</a></li>
                                                                                <li><a href="/category/xianwu-dizun" title="Xianwu Dizun">Xianwu Dizun</a></li>
                                                                                <li><a href="/category/xiao-lu-he-xiao-lan-4th-season" title="Xiao Lu He Xiao Lan 4th Season">Xiao Lu He Xiao Lan 4th Season</a></li>
                                                                                <li><a href="/category/xiao-mo-tou-baolu-la" title="Xiao Mo Tou Baolu La!">Xiao Mo Tou Baolu La!</a></li>
                                                                                <li><a href="/category/xiling-jiyuan" title="Xiling Jiyuan">Xiling Jiyuan</a></li>
                                                                                <li><a href="/category/xing-wu-shen-jue-2" title="Xing Wu Shen Jue 2">Xing Wu Shen Jue 2</a></li>
                                                                                <li><a href="/category/xing-yu-siwan-nian" title="Xing Yu Siwan Nian">Xing Yu Siwan Nian</a></li>
                                                                                <li><a href="/category/xing-yuan-zhi-zhu" title="Xing Yuan Zhi Zhu">Xing Yuan Zhi Zhu</a></li>
                                                                                <li><a href="/category/xingchen-bian-5th-season" title="Xingchen Bian 5th Season">Xingchen Bian 5th Season</a></li>
                                                                                <li><a href="/category/xingji-yi-you" title="Xingji Yi You">Xingji Yi You</a></li>
                                                                                <li><a href="/category/xu-jing-zhong-gou" title="Xu Jing Zhong Gou">Xu Jing Zhong Gou</a></li>
                                                                                <li><a href="/category/xue-wang-jiadao" title="Xue Wang Jiadao">Xue Wang Jiadao</a></li>
                                                                                <li><a href="/category/xue-ying-ling-zhu-3rd-season" title="Xue Ying Ling Zhu 3rd Season">Xue Ying Ling Zhu 3rd Season</a></li>
                                                                                <li><a href="/category/xue-yu-xin" title="Xue Yu Xin">Xue Yu Xin</a></li>
                                                                                <li><a href="/category/xun-jian" title="Xun Jian">Xun Jian</a></li>
                                                                                <li><a href="/category/yami-shibai-11" title="Yami Shibai 11">Yami Shibai 11</a></li>
                                                                                <li><a href="/category/yami-shibai-12" title="Yami Shibai 12">Yami Shibai 12</a></li>
                                                                                <li><a href="/category/yao-shen-ji-7th-season" title="Yao Shen Ji 6th Season">Yao Shen Ji 6th Season</a></li>
                                                                                <li><a href="/category/yi-jian-duzun" title="Yi Jian Duzun">Yi Jian Duzun</a></li>
                                                                                <li><a href="/category/yi-kong-zhan-ge" title="Yi Kong Zhan Ge">Yi Kong Zhan Ge</a></li>
                                                                                <li><a href="/category/yi-nian-yong-heng-chuan-cheng-pian" title="Yi Nian Yong Heng: Chuan Cheng Pian">Yi Nian Yong Heng: Chuan Cheng Pian</a></li>
                                                                                <li><a href="/category/yi-ren-zhi-xia-4th-season" title="Yi Ren Zhi Xia 4th Season">Yi Ren Zhi Xia 4th Season</a></li>
                                                                                <li><a href="/category/yi-shijie-zhongyao-pu-2" title="Yi Shijie Zhongyao Pu 2">Yi Shijie Zhongyao Pu 2</a></li>
                                                                                <li><a href="/category/yinhe-zhi-xin" title="Yinhe Zhi Xin">Yinhe Zhi Xin</a></li>
                                                                                <li><a href="/category/yiren-jun-moxie" title="Yiren Jun Moxie">Yiren Jun Moxie</a></li>
                                                                                <li><a href="/category/yishi-zhi-zun" title="Yishi Zhi Zun">Yishi Zhi Zun</a></li>
                                                                                <li><a href="/category/yofukashi-no-uta-mini" title="Yofukashi no Uta Mini">Yofukashi no Uta Mini</a></li>
                                                                                <li><a href="/category/yong-sheng" title="Yong Sheng">Yong Sheng</a></li>
                                                                                <li><a href="/category/yong-sheng-shi-nian-zhi-yue" title="Yong Sheng: Shi Nian Zhi Yue">Yong Sheng: Shi Nian Zhi Yue</a></li>
                                                                                <li><a href="/category/youkai-watch-jam-youkai-gakuen-y-n-to-no-souguu" title="Youkai Watch Jam: Youkai Gakuen Y - N to no Souguu">Youkai Watch Jam: Youkai Gakuen Y - N to no Souguu</a></li>
                                                                                <li><a href="/category/youkai-watch-2021" title="Youkai Watch♪ (2021)">Youkai Watch♪ (2021)</a></li>
                                                                                <li><a href="/category/youkaiden-nekome-kozou" title="Youkaiden Nekome Kozou">Youkaiden Nekome Kozou</a></li>
                                                                                <li><a href="/category/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e-tv-3rd-season" title="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e 3rd Season">Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e 3rd Season</a></li>
                                                                                <li><a href="/category/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e-3rd-season-dub" title="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e 3rd Season (Dub)">Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e 3rd Season (Dub)</a></li>
                                                                                <li><a href="/category/youth-under-the-backboard" title="Youth Under The Backboard">Youth Under The Backboard</a></li>
                                                                                <li><a href="/category/yugioh-go-rush" title="Yu☆Gi☆Oh!: Go Rush!!">Yu☆Gi☆Oh!: Go Rush!!</a></li>
                                                                                <li><a href="/category/yugioh-sevens-dub" title="Yu☆Gi☆Oh!: Sevens (Dub)">Yu☆Gi☆Oh!: Sevens (Dub)</a></li>
                                                                                <li><a href="/category/yuan-long-3rd-season" title="Yuan Long 3rd Season">Yuan Long 3rd Season</a></li>
                                                                                <li><a href="/category/yuan-shen-haojie" title="Yuan Shen Haojie">Yuan Shen Haojie</a></li>
                                                                                <li><a href="/category/yuan-zun-s4" title="Yuan Zun S4">Yuan Zun S4</a></li>
                                                                                <li><a href="/category/yubisaki-to-renren" title="Yubisaki to Renren">Yubisaki to Renren</a></li>
                                                                                <li><a href="/category/yubisaki-to-renren-dub" title="Yubisaki to Renren (Dub)">Yubisaki to Renren (Dub)</a></li>
                                                                                <li><a href="/category/yun-zhongju-san-zi" title="Yun Zhongju San Zi">Yun Zhongju San Zi</a></li>
                                                                                <li><a href="/category/yuru-camp-season-2-dub" title="Yuru Camp△ Season 2 (Dub)">Yuru Camp△ Season 2 (Dub)</a></li>
                                                                                <li><a href="/category/yuuki-bakuhatsu-bang-bravern" title="Yuuki Bakuhatsu Bang Bravern">Yuuki Bakuhatsu Bang Bravern</a></li>
                                                                                <li><a href="/category/zhanguo-qiannian-2022" title="Zhanguo Qiannian (2022)">Zhanguo Qiannian (2022)</a></li>
                                                                                <li><a href="/category/zhen-guo-godly-son-in-law" title="Zhen Guo Godly Son-in-Law">Zhen Guo Godly Son-in-Law</a></li>
                                                                                <li><a href="/category/zhen-wu-dianfeng" title="Zhen Wu Dianfeng">Zhen Wu Dianfeng</a></li>
                                                                                <li><a href="/category/zhen-wu-dianfeng-2nd-season" title="Zhen Wu Dianfeng 2nd Season">Zhen Wu Dianfeng 2nd Season</a></li>
                                                                                <li><a href="/category/zhen-yang-wushen" title="Zhen Yang Wushen">Zhen Yang Wushen</a></li>
                                                                                <li><a href="/category/zhihao-beipan-diqiule" title="Zhihao Beipan Diqiule">Zhihao Beipan Diqiule</a></li>
                                                                                <li><a href="/category/zhongguo-qi-tan" title="Zhongguo Qi Tan">Zhongguo Qi Tan</a></li>
                                                                                <li><a href="/category/zhu-tian-ji" title="Zhu Tian Ji">Zhu Tian Ji</a></li>
                                                                                <li><a href="/category/zhu-xian" title="Zhu Xian">Zhu Xian</a></li>
                                                                                <li><a href="/category/zi-chuan" title="Zi Chuan">Zi Chuan</a></li>
                                                                                <li><a href="/category/zi-chuan-yincang-hudong-ju" title="Zi Chuan: Yincang Hudong Ju">Zi Chuan: Yincang Hudong Ju</a></li>
                                                                                <li><a href="/category/zoids-wild-zero" title="Zoids Wild Zero">Zoids Wild Zero</a></li>
                                                                            </ul>
                                </nav>
                 </div>
            </div>
          </div>	
          <!-- tao thanh cuon 1-->  
        </div>
     </div>
</div>
<style type="text/css">
    #scrollbar2 .viewport { height: 600px !important; }
</style>
                      <div class="main_body">
  <div class="main_body_black">
    <div class="anime_name genre">
      <i class="icongec-genre i_pos"></i><h2>Genres</h2>
    </div>
    <div class="recent">
      <nav class="menu_series genre right">
        <ul>
                      <li class=""><a href="/genre/action" title="Action">Action</a></li>
                      <li class=""><a href="/genre/adult-cast" title="Adult Cast">Adult Cast</a></li>
                      <li class=""><a href="/genre/adventure" title="Adventure">Adventure</a></li>
                      <li class=""><a href="/genre/anthropomorphic" title="Anthropomorphic">Anthropomorphic</a></li>
                      <li class=""><a href="/genre/avant-garde" title="Avant Garde">Avant Garde</a></li>
                      <li class=""><a href="/genre/shounen-ai" title="Boys Love">Boys Love</a></li>
                      <li class=""><a href="/genre/cars" title="Cars">Cars</a></li>
                      <li class=""><a href="/genre/cgdct" title="CGDCT">CGDCT</a></li>
                      <li class=""><a href="/genre/childcare" title="Childcare">Childcare</a></li>
                      <li class=""><a href="/genre/comedy" title="Comedy">Comedy</a></li>
                      <li class=""><a href="/genre/comic" title="Comic">Comic</a></li>
                      <li class=""><a href="/genre/crime" title="Crime">Crime</a></li>
                      <li class=""><a href="/genre/crossdressing" title="Crossdressing">Crossdressing</a></li>
                      <li class=""><a href="/genre/delinquents" title="Delinquents">Delinquents</a></li>
                      <li class=""><a href="/genre/dementia" title="Dementia">Dementia</a></li>
                      <li class=""><a href="/genre/demons" title="Demons">Demons</a></li>
                      <li class=""><a href="/genre/detective" title="Detective">Detective</a></li>
                      <li class=""><a href="/genre/drama" title="Drama">Drama</a></li>
                      <li class=""><a href="/genre/dub" title="Dub">Dub</a></li>
                      <li class=""><a href="/genre/ecchi" title="Ecchi">Ecchi</a></li>
                      <li class=""><a href="/genre/erotica" title="Erotica">Erotica</a></li>
                      <li class=""><a href="/genre/family" title="Family">Family</a></li>
                      <li class=""><a href="/genre/fantasy" title="Fantasy">Fantasy</a></li>
                      <li class=""><a href="/genre/gag-humor" title="Gag Humor">Gag Humor</a></li>
                      <li class=""><a href="/genre/game" title="Game">Game</a></li>
                      <li class=""><a href="/genre/gender-bender" title="Gender Bender">Gender Bender</a></li>
                      <li class=""><a href="/genre/gore" title="Gore">Gore</a></li>
                      <li class=""><a href="/genre/gourmet" title="Gourmet">Gourmet</a></li>
                      <li class=""><a href="/genre/harem" title="Harem">Harem</a></li>
                      <li class=""><a href="/genre/hentai" title="Hentai">Hentai</a></li>
                      <li class=""><a href="/genre/high-stakes-game" title="High Stakes Game">High Stakes Game</a></li>
                      <li class=""><a href="/genre/historical" title="Historical">Historical</a></li>
                      <li class=""><a href="/genre/horror" title="Horror">Horror</a></li>
                      <li class=""><a href="/genre/isekai" title="Isekai">Isekai</a></li>
                      <li class=""><a href="/genre/iyashikei" title="Iyashikei">Iyashikei</a></li>
                      <li class=""><a href="/genre/josei" title="Josei">Josei</a></li>
                      <li class=""><a href="/genre/kids" title="Kids">Kids</a></li>
                      <li class=""><a href="/genre/magic" title="Magic">Magic</a></li>
                      <li class=""><a href="/genre/magical-sex-shift" title="Magical Sex Shift">Magical Sex Shift</a></li>
                      <li class=""><a href="/genre/mahou-shoujo" title="Mahou Shoujo">Mahou Shoujo</a></li>
                      <li class=""><a href="/genre/martial-arts" title="Martial Arts">Martial Arts</a></li>
                      <li class=""><a href="/genre/mecha" title="Mecha">Mecha</a></li>
                      <li class=""><a href="/genre/medical" title="Medical">Medical</a></li>
                      <li class=""><a href="/genre/military" title="Military">Military</a></li>
                      <li class=""><a href="/genre/music" title="Music">Music</a></li>
                      <li class=""><a href="/genre/mystery" title="Mystery">Mystery</a></li>
                      <li class=""><a href="/genre/mythology" title="Mythology">Mythology</a></li>
                      <li class=""><a href="/genre/organized-crime" title="Organized Crime">Organized Crime</a></li>
                      <li class=""><a href="/genre/parody" title="Parody">Parody</a></li>
                      <li class=""><a href="/genre/performing-arts" title="Performing Arts">Performing Arts</a></li>
                      <li class=""><a href="/genre/pets" title="Pets">Pets</a></li>
                      <li class=""><a href="/genre/police" title="Police">Police</a></li>
                      <li class=""><a href="/genre/psychological" title="Psychological">Psychological</a></li>
                      <li class=""><a href="/genre/racing" title="Racing">Racing</a></li>
                      <li class=""><a href="/genre/reincarnation" title="Reincarnation">Reincarnation</a></li>
                      <li class=""><a href="/genre/romance" title="Romance">Romance</a></li>
                      <li class=""><a href="/genre/romantic-subtext" title="Romantic Subtext">Romantic Subtext</a></li>
                      <li class=""><a href="/genre/samurai" title="Samurai">Samurai</a></li>
                      <li class=""><a href="/genre/school" title="School">School</a></li>
                      <li class=""><a href="/genre/sci-fi" title="Sci-Fi">Sci-Fi</a></li>
                      <li class=""><a href="/genre/seinen" title="Seinen">Seinen</a></li>
                      <li class=""><a href="/genre/shoujo" title="Shoujo">Shoujo</a></li>
                      <li class=""><a href="/genre/shoujo-ai" title="Shoujo Ai">Shoujo Ai</a></li>
                      <li class=""><a href="/genre/shounen" title="Shounen">Shounen</a></li>
                      <li class=""><a href="/genre/showbiz" title="Showbiz">Showbiz</a></li>
                      <li class=""><a href="/genre/slice-of-life" title="Slice of Life">Slice of Life</a></li>
                      <li class=""><a href="/genre/space" title="Space">Space</a></li>
                      <li class=""><a href="/genre/sports" title="Sports">Sports</a></li>
                      <li class=""><a href="/genre/strategy-game" title="Strategy Game">Strategy Game</a></li>
                      <li class=""><a href="/genre/super-power" title="Super Power">Super Power</a></li>
                      <li class=""><a href="/genre/supernatural" title="Supernatural">Supernatural</a></li>
                      <li class=""><a href="/genre/survival" title="Survival">Survival</a></li>
                      <li class=""><a href="/genre/suspense" title="Suspense">Suspense</a></li>
                      <li class=""><a href="/genre/team-sports" title="Team Sports">Team Sports</a></li>
                      <li class=""><a href="/genre/thriller" title="Thriller">Thriller</a></li>
                      <li class=""><a href="/genre/time-travel" title="Time Travel">Time Travel</a></li>
                      <li class=""><a href="/genre/vampire" title="Vampire">Vampire</a></li>
                      <li class=""><a href="/genre/video-game" title="Video Game">Video Game</a></li>
                      <li class=""><a href="/genre/visual-arts" title="Visual Arts">Visual Arts</a></li>
                      <li class=""><a href="/genre/work-life" title="Work Life">Work Life</a></li>
                      <li class=""><a href="/genre/workplace" title="Workplace">Workplace</a></li>
                      <li class=""><a href="/genre/yaoi" title="Yaoi">Yaoi</a></li>
                      <li class=""><a href="/genre/yuri" title="Yuri">Yuri</a></li>
                  </ul>
      </nav>	
    </div>
  </div>
</div>
                                        <div class="main_body">
  <div class="main_body_black">
    <div class="anime_name new_series">
      <i class="icongec-new_series i_pos"></i><h2>Season</h2>
    </div>
    <div class="series">
      <div class="recent" style="padding:10px 0;">
        <div class="viewport">
          <div class="overview">
            <nav class="menu_series cron">
              <ul>
                <li>
                  <span style="color:#898989;">Anime 2024:</span>
                  <a style="display:inline;" href="/sub-category/winter-2024-anime" title="Winter 2024 Anime">Winter</a>
                </li>
                                  <li>
          				  <span style="color:#898989;">Anime 2023:</span>
                            <a style="display:inline;" href="/sub-category/winter-2023-anime" title="Winter 2023 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2023-anime" title="Spring 2023 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2023-anime" title="Summer 2023 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2023-anime" title="Fall 2023 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2022:</span>
                            <a style="display:inline;" href="/sub-category/winter-2022-anime" title="Winter 2022 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2022-anime" title="Spring 2022 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2022-anime" title="Summer 2022 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2022-anime" title="Fall 2022 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2021:</span>
                            <a style="display:inline;" href="/sub-category/winter-2021-anime" title="Winter 2021 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2021-anime" title="Spring 2021 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2021-anime" title="Summer 2021 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2021-anime" title="Fall 2021 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2020:</span>
                            <a style="display:inline;" href="/sub-category/winter-2020-anime" title="Winter 2020 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2020-anime" title="Spring 2020 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2020-anime" title="Summer 2020 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2020-anime" title="Fall 2020 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2019:</span>
                            <a style="display:inline;" href="/sub-category/winter-2019-anime" title="Winter 2019 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2019-anime" title="Spring 2019 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2019-anime" title="Summer 2019 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2019-anime" title="Fall 2019 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2018:</span>
                            <a style="display:inline;" href="/sub-category/winter-2018-anime" title="Winter 2018 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2018-anime" title="Spring 2018 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2018-anime" title="Summer 2018 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2018-anime" title="Fall 2018 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2017:</span>
                            <a style="display:inline;" href="/sub-category/winter-2017-anime" title="Winter 2017 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2017-anime" title="Spring 2017 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2017-anime" title="Summer 2017 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2017-anime" title="Fall 2017 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2016:</span>
                            <a style="display:inline;" href="/sub-category/winter-2016-anime" title="Winter 2016 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2016-anime" title="Spring 2016 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2016-anime" title="Summer 2016 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2016-anime" title="Fall 2016 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2015:</span>
                            <a style="display:inline;" href="/sub-category/winter-2015-anime" title="Winter 2015 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2015-anime" title="Spring 2015 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2015-anime" title="Summer 2015 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2015-anime" title="Fall 2015 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2014:</span>
                            <a style="display:inline;" href="/sub-category/winter-2014-anime" title="Winter 2014 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2014-anime" title="Spring 2014 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2014-anime" title="Summer 2014 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2014-anime" title="Fall 2014 Anime">Fall</a>
                            
          				</li>
                              </ul>
            </nav>
          </div>
        </div>	
      </div>
    </div>
  </div>
</div>
                 </section>                                                                              
            </section>                
            <div class="clr"></div>
<footer>
  <div class="menu_bottom">
    <a href="/about-us.html"><h3>Abouts us</h3></a>
    <a href="/contact-us.html"><h3>Contact us</h3></a>
    <a href="/privacy.html"><h3>Privacy</h3></a>
  </div>
  <div class="croll">
    <div class="big"><i class="icongec-backtop"></i></div>
    <div class="small"><i class="icongec-backtop_mb"></i></div>
  </div>
</footer>
        </div>
    </div>
</div>
<div id="off_light"></div>
<div class="clr"></div>
<div class="mask"></div>
<script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/combo.js?v=1.1"></script>
<script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/crollvertical/js/jquery.tinyscrollbar.min.js?v=1.1"></script>
<div class="notice-400" style=" z-index:99999;position: fixed;bottom: 0;text-align: center;width: 100%; left: 0;padding: 10px;background: #939393;color: white;">We moved site to <a href="https://anitaku.to" title="Gogoanime" alt="Gogoanime - Watch anime online, English anime online HD" style="color: #ffc119">Anitaku.to</a> . Please bookmark new site. Thank you!</div><!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-X2C65NWLE2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-X2C65NWLE2');
</script>
<script>
        LoadFilmOngoing(1);
</script>

<script>
if(document.getElementById('scrollbar2')){
    $('#scrollbar2').tinyscrollbar();
}
</script>
</body>
</html>","status":200,"url":"https://anitaku.to/home.html?page=3"},"revalidate":31536000,"tags":[]}