{"kind":"FETCH","data":{"headers":{"cache-control":"no-store, no-cache, must-revalidate, post-check=0, pre-check=0","cf-cache-status":"DYNAMIC","cf-ray":"850ba0695f5c5cdc-SIN","connection":"keep-alive","content-encoding":"br","content-type":"text/html; charset=utf-8","date":"Mon, 05 Feb 2024 13:51:10 GMT","expires":"Thu, 19 Nov 1981 08:52:00 GMT","nel":"{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}","pragma":"no-cache","report-to":"{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=YBldaDhy9H%2BjoHUcNImrPrUCHBdijp6KQ7DPVkYXvJMAFQdF7ncSg7x%2FEdL2hAYeu70KC0Gqij1UA6Y8%2FqHlNxaieben%2Bw0gpEwyViGwLtVp0gY%2Bvi147Jmgt6w%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}","server":"cloudflare","set-cookie":"gogoanime=e1tsfka26godvbtaiu6lns2dc5; path=/","transfer-encoding":"chunked","vary":"Accept-Encoding, Accept-Encoding","x-powered-by":"PHP/5.6.13"},"body":"<!DOCTYPE html>
<html lang="en-US"
      xmlns="http://www.w3.org/1999/xhtml"
      itemscope itemtype="http://schema.org/WebPage">
<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#">
    <meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="profile" href="https://gmpg.org/xfn/11">

<link rel="shortcut icon" href="https://cdn.gogocdn.net/files/gogo/img/favicon.ico">
<meta name="google-site-verification" content="shHYF9VOwfpFOdBpleH5jZ2CBuy6nVjX4PrkxMSRqHQ"/>

<title>List All Anime with keyword at Gogoanime | Anime List - Search</title>

<meta name="robots" content="index,follow" />
<meta name="description" content="List All Anime with keyword at Gogoanime | Anime List - Search">
<meta name="keywords" content="List All Anime with keyword at Gogoanime | Anime List - Search">
<meta itemprop="image" content="/images/logo.png"/>

<meta property="og:site_name" content="Gogoanime"/>
<meta property="og:locale" content="en_US"/>
<meta property="og:type" content="website"/>
<meta property="fb:admins" content="100010507416730"/>
<meta property="fb:app_id" content="517001538491321" />
<meta property="og:title" content="List All Anime with keyword at Gogoanime | Anime List - Search"/>
<meta property="og:description" content="List All Anime with keyword at Gogoanime | Anime List - Search">
<meta property="og:url" content=""/>
<meta property="og:image" content="/images/logo.png"/>
<meta property="og:image:secure_url" content="/images/logo.png"/>

<meta property="twitter:card" content="summary"/>
<meta property="twitter:title" content="List All Anime with keyword at Gogoanime | Anime List - Search"/>
<meta property="twitter:description" content="List All Anime with keyword at Gogoanime | Anime List - Search"/>
<meta name="referrer" content="origin">
<meta name="csrf-token" content="65c0e7ce70203">

<link rel="canonical" href="https://anitaku.to/search.html"/>
<link rel="alternate" hreflang="en-us" href="https://anitaku.to/search.html"/>


    
        <link rel="stylesheet" type="text/css" href="https://anitaku.to/css/style.css?v=1.1" />
    
        <script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/jquery.js"></script>
    <script>
        var base_url = 'https://' + document.domain + '/';
        var base_url_cdn_api = 'https://ajax.gogo-load.com/';
        var api_anclytic = 'https://ajax.gogo-load.com/anclytic-ajax.html';
    </script>
    <script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/main.js?v=1.1"></script>
    <meta name="clckd" content="f783096bb1e81df1cdd2b081dbc0fcf0" />
    <div id="bg_3113168465"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=16&zoneid=8465"></script>
</head>
<body>
<div class="clr"></div>
<div id="wrapper_inside">
    <div id="wrapper">
        <div id="wrapper_bg">
            <header>
  <div class="menu_top_link">
    <div class="user_auth">
      <ul class="auth">
            <li class="userss">
        <i class="icongec-login"></i>
        <a href="/login.html" title="login">Login</a> <a class="fix">|</a>
        <a href="/register.html" title="Sign up" class="reg">Sign up</a>
    </li>

      </ul>
    </div>
    <div class="link_face intro">
      <a class="btn twitter" href="https://twitter.com/anime_around" target="_blank" data-url=""></a>
      <a class="btn reddit" href="https://www.reddit.com/r/AroundAnimeTV/" target="_blank" data-url=""></a>
      <a class="btn facebook" href="https://www.facebook.com/groups/409309663623039" target="_blank"></a>
      <a class="btn discord" style="margin-right:5px;" href="https://discord.gg/kyVfcGuCCQ" target="_blank" data-url=""></a>
      <a class="btn telegram" style="margin-right:5px;" href="https://t.me/joinchat/W4lYQ-RGOQ05MmI9" target="_blank" data-url=""></a>
    </div>
                    
    <div class="submenu_intro">
	    <a href="https://gogotaku.info/login.html" target="_blank">Request</a>
	    <span>|</span>
      <a href="https://anitaku.to/contact-us.html">Contact us</a>
      <span>|</span>
      <a href="https://gogotaku.info" target="_blank">Gogotaku</a>
    </div>          
  </div>
  <div class="clr"></div>

  <!-- banner -->
  <section class="headnav">
    <div class="page_menu_items show">
      <a href="javascript:void(0)" class="menu_mobile">
        <i class="icongec-menu-show"></i>
      </a>
    </div>
    <div class="headnav_left">
      <a href="/home.html"><img src="https://anitaku.to/img/icon/logo.png" class="logo show ads-evt" alt="gogoanime - Watch Anime Online" /></a>
    </div>
    <div class="headnav_menu">
      <!-- menu top -->
      <nav class="menu_top">
        <ul>
              <li class="userss">
        <i class="icongec-login"></i>
        <a href="/login.html" title="login">Login</a> <a class="fix">|</a>
        <a href="/register.html" title="Sign up" class="reg">Sign up</a>
    </li>

          <li class="home "><a href="https://anitaku.to/home.html" title="Home" class="home ads-evt">Home</a></li>
          <li class="list "><a href="https://anitaku.to/anime-list.html" title="Anime list" class="list ads-evt">Anime list</a></li>
          <li class="seri "><a href="https://anitaku.to/new-season.html" title="New season" class="series ads-evt">New season</a></li>
          <li class="movies "><a href="https://anitaku.to/anime-movies.html" title="Movies" class="movie ads-evt">Movies</a></li>
          <li class="movies "><a href="https://anitaku.to/popular.html" title="Popular" class="popular ads-evt">Popular</a></li>
          <li class="movie genre hide">
		    <a href="#" class="genre">Genre</a>
            <ul>
                              <li class=""><a href="/genre/action" title="Action">Action</a></li>
                              <li class=""><a href="/genre/adult-cast" title="Adult Cast">Adult Cast</a></li>
                              <li class=""><a href="/genre/adventure" title="Adventure">Adventure</a></li>
                              <li class=""><a href="/genre/anthropomorphic" title="Anthropomorphic">Anthropomorphic</a></li>
                              <li class=""><a href="/genre/avant-garde" title="Avant Garde">Avant Garde</a></li>
                              <li class=""><a href="/genre/shounen-ai" title="Boys Love">Boys Love</a></li>
                              <li class=""><a href="/genre/cars" title="Cars">Cars</a></li>
                              <li class=""><a href="/genre/cgdct" title="CGDCT">CGDCT</a></li>
                              <li class=""><a href="/genre/childcare" title="Childcare">Childcare</a></li>
                              <li class=""><a href="/genre/comedy" title="Comedy">Comedy</a></li>
                              <li class=""><a href="/genre/comic" title="Comic">Comic</a></li>
                              <li class=""><a href="/genre/crime" title="Crime">Crime</a></li>
                              <li class=""><a href="/genre/crossdressing" title="Crossdressing">Crossdressing</a></li>
                              <li class=""><a href="/genre/delinquents" title="Delinquents">Delinquents</a></li>
                              <li class=""><a href="/genre/dementia" title="Dementia">Dementia</a></li>
                              <li class=""><a href="/genre/demons" title="Demons">Demons</a></li>
                              <li class=""><a href="/genre/detective" title="Detective">Detective</a></li>
                              <li class=""><a href="/genre/drama" title="Drama">Drama</a></li>
                              <li class=""><a href="/genre/dub" title="Dub">Dub</a></li>
                              <li class=""><a href="/genre/ecchi" title="Ecchi">Ecchi</a></li>
                              <li class=""><a href="/genre/erotica" title="Erotica">Erotica</a></li>
                              <li class=""><a href="/genre/family" title="Family">Family</a></li>
                              <li class=""><a href="/genre/fantasy" title="Fantasy">Fantasy</a></li>
                              <li class=""><a href="/genre/gag-humor" title="Gag Humor">Gag Humor</a></li>
                              <li class=""><a href="/genre/game" title="Game">Game</a></li>
                              <li class=""><a href="/genre/gender-bender" title="Gender Bender">Gender Bender</a></li>
                              <li class=""><a href="/genre/gore" title="Gore">Gore</a></li>
                              <li class=""><a href="/genre/gourmet" title="Gourmet">Gourmet</a></li>
                              <li class=""><a href="/genre/harem" title="Harem">Harem</a></li>
                              <li class=""><a href="/genre/hentai" title="Hentai">Hentai</a></li>
                              <li class=""><a href="/genre/high-stakes-game" title="High Stakes Game">High Stakes Game</a></li>
                              <li class=""><a href="/genre/historical" title="Historical">Historical</a></li>
                              <li class=""><a href="/genre/horror" title="Horror">Horror</a></li>
                              <li class=""><a href="/genre/isekai" title="Isekai">Isekai</a></li>
                              <li class=""><a href="/genre/iyashikei" title="Iyashikei">Iyashikei</a></li>
                              <li class=""><a href="/genre/josei" title="Josei">Josei</a></li>
                              <li class=""><a href="/genre/kids" title="Kids">Kids</a></li>
                              <li class=""><a href="/genre/magic" title="Magic">Magic</a></li>
                              <li class=""><a href="/genre/magical-sex-shift" title="Magical Sex Shift">Magical Sex Shift</a></li>
                              <li class=""><a href="/genre/mahou-shoujo" title="Mahou Shoujo">Mahou Shoujo</a></li>
                              <li class=""><a href="/genre/martial-arts" title="Martial Arts">Martial Arts</a></li>
                              <li class=""><a href="/genre/mecha" title="Mecha">Mecha</a></li>
                              <li class=""><a href="/genre/medical" title="Medical">Medical</a></li>
                              <li class=""><a href="/genre/military" title="Military">Military</a></li>
                              <li class=""><a href="/genre/music" title="Music">Music</a></li>
                              <li class=""><a href="/genre/mystery" title="Mystery">Mystery</a></li>
                              <li class=""><a href="/genre/mythology" title="Mythology">Mythology</a></li>
                              <li class=""><a href="/genre/organized-crime" title="Organized Crime">Organized Crime</a></li>
                              <li class=""><a href="/genre/parody" title="Parody">Parody</a></li>
                              <li class=""><a href="/genre/performing-arts" title="Performing Arts">Performing Arts</a></li>
                              <li class=""><a href="/genre/pets" title="Pets">Pets</a></li>
                              <li class=""><a href="/genre/police" title="Police">Police</a></li>
                              <li class=""><a href="/genre/psychological" title="Psychological">Psychological</a></li>
                              <li class=""><a href="/genre/racing" title="Racing">Racing</a></li>
                              <li class=""><a href="/genre/reincarnation" title="Reincarnation">Reincarnation</a></li>
                              <li class=""><a href="/genre/romance" title="Romance">Romance</a></li>
                              <li class=""><a href="/genre/romantic-subtext" title="Romantic Subtext">Romantic Subtext</a></li>
                              <li class=""><a href="/genre/samurai" title="Samurai">Samurai</a></li>
                              <li class=""><a href="/genre/school" title="School">School</a></li>
                              <li class=""><a href="/genre/sci-fi" title="Sci-Fi">Sci-Fi</a></li>
                              <li class=""><a href="/genre/seinen" title="Seinen">Seinen</a></li>
                              <li class=""><a href="/genre/shoujo" title="Shoujo">Shoujo</a></li>
                              <li class=""><a href="/genre/shoujo-ai" title="Shoujo Ai">Shoujo Ai</a></li>
                              <li class=""><a href="/genre/shounen" title="Shounen">Shounen</a></li>
                              <li class=""><a href="/genre/showbiz" title="Showbiz">Showbiz</a></li>
                              <li class=""><a href="/genre/slice-of-life" title="Slice of Life">Slice of Life</a></li>
                              <li class=""><a href="/genre/space" title="Space">Space</a></li>
                              <li class=""><a href="/genre/sports" title="Sports">Sports</a></li>
                              <li class=""><a href="/genre/strategy-game" title="Strategy Game">Strategy Game</a></li>
                              <li class=""><a href="/genre/super-power" title="Super Power">Super Power</a></li>
                              <li class=""><a href="/genre/supernatural" title="Supernatural">Supernatural</a></li>
                              <li class=""><a href="/genre/survival" title="Survival">Survival</a></li>
                              <li class=""><a href="/genre/suspense" title="Suspense">Suspense</a></li>
                              <li class=""><a href="/genre/team-sports" title="Team Sports">Team Sports</a></li>
                              <li class=""><a href="/genre/thriller" title="Thriller">Thriller</a></li>
                              <li class=""><a href="/genre/time-travel" title="Time Travel">Time Travel</a></li>
                              <li class=""><a href="/genre/vampire" title="Vampire">Vampire</a></li>
                              <li class=""><a href="/genre/video-game" title="Video Game">Video Game</a></li>
                              <li class=""><a href="/genre/visual-arts" title="Visual Arts">Visual Arts</a></li>
                              <li class=""><a href="/genre/work-life" title="Work Life">Work Life</a></li>
                              <li class=""><a href="/genre/workplace" title="Workplace">Workplace</a></li>
                              <li class=""><a href="/genre/yaoi" title="Yaoi">Yaoi</a></li>
                              <li class=""><a href="/genre/yuri" title="Yuri">Yuri</a></li>
                          </ul>
          </li>
        </ul>	
      </nav>
      <!-- /menu top -->
    </div>
    <div class="headnav_right">
      <!-- form search--->
      <div class="form">
        <form onsubmit="" id="search-form" action="https://anitaku.to/search.html" method="get">
          <div class="row">
            <input placeholder="search" name="keyword" id="keyword" type="text" value="" autocomplete="off">            
            <input class="btngui" value="" type="button" name="" onclick="do_search();">
            <input id="key_pres" name="key_pres" value="" type="hidden" />
            <input id="link_alias" name="link_alias" value="" type="hidden" />
            <input id="keyword_search_replace" name="keyword_search_replace" value="" type="hidden" />
          </div>
          <div class="hide_search hide"><i class="icongec-muiten"></i></div>
          <div id="header_search_autocomplete"></div>
          <div class="loader"></div>
        </form>           
        <div class="clr"></div>
        <div class="search-iph"><a href="javascript:void(0)"><i class="icongec-search-mb"></i></a></div>
      </div>
	  <div class="clr"></div>                        
      <!-- /form search--->
    </div>
  </section>
  <!-- /banner -->
</header>
            <section class="content">
                <section class="content_left">
                    
<div class="main_body">
	<div class="anime_name new_series">
		<i class="icongec-new_series i_pos">
		</i>
		<h2>
			Result Anime Search
		</h2>
		<div class="anime_name_pagination">
			<div class="pagination">
				<ul class='pagination-list' ><li ><a href='?keyword=one piece&page=1' data-page='1'>1</a></li><li  class=selected><a href='?keyword=one piece&page=2' data-page='2'>2</a></li><li ><a href='?keyword=one piece&page=3' data-page='3'>3</a></li></ul>			</div>
		</div>
	</div>
	<div class="last_episodes">
        <div class="search_ads">
<form class="filters" action="https://anitaku.to/filter.html" autocomplete="off">
    <div class="filter"><input type="text" class="form-control" placeholder="Search..." name="keyword" value="one piece" /></div>
    <div class="filter">
        <div class="dropdown cls_genre">
            <button class="btn btn-secondary dropdown-toggle" data-toggle="dropdown"><span class="value" data-placeholder="Select genre" data-label-placement="true">Select genre</span></button>
            <ul class="dropdown-menu lg c4">
                                                      <li title="action"><input type="checkbox" id="genre-action" name="genre[]" value="action"  /> <label for="genre-action">Action</label></li>
                                                                        <li title="adult-cast"><input type="checkbox" id="genre-adult-cast" name="genre[]" value="adult-cast"  /> <label for="genre-adult-cast">Adult Cast</label></li>
                                                                        <li title="adventure"><input type="checkbox" id="genre-adventure" name="genre[]" value="adventure"  /> <label for="genre-adventure">Adventure</label></li>
                                                                        <li title="anthropomorphic"><input type="checkbox" id="genre-anthropomorphic" name="genre[]" value="anthropomorphic"  /> <label for="genre-anthropomorphic">Anthropomorphic</label></li>
                                                                        <li title="avant-garde"><input type="checkbox" id="genre-avant-garde" name="genre[]" value="avant-garde"  /> <label for="genre-avant-garde">Avant Garde</label></li>
                                                                        <li title="shounen-ai"><input type="checkbox" id="genre-shounen-ai" name="genre[]" value="shounen-ai"  /> <label for="genre-shounen-ai">Boys Love</label></li>
                                                                        <li title="cars"><input type="checkbox" id="genre-cars" name="genre[]" value="cars"  /> <label for="genre-cars">Cars</label></li>
                                                                        <li title="cgdct"><input type="checkbox" id="genre-cgdct" name="genre[]" value="cgdct"  /> <label for="genre-cgdct">CGDCT</label></li>
                                                                        <li title="childcare"><input type="checkbox" id="genre-childcare" name="genre[]" value="childcare"  /> <label for="genre-childcare">Childcare</label></li>
                                                                        <li title="comedy"><input type="checkbox" id="genre-comedy" name="genre[]" value="comedy"  /> <label for="genre-comedy">Comedy</label></li>
                                                                        <li title="comic"><input type="checkbox" id="genre-comic" name="genre[]" value="comic"  /> <label for="genre-comic">Comic</label></li>
                                                                        <li title="crime"><input type="checkbox" id="genre-crime" name="genre[]" value="crime"  /> <label for="genre-crime">Crime</label></li>
                                                                        <li title="crossdressing"><input type="checkbox" id="genre-crossdressing" name="genre[]" value="crossdressing"  /> <label for="genre-crossdressing">Crossdressing</label></li>
                                                                        <li title="delinquents"><input type="checkbox" id="genre-delinquents" name="genre[]" value="delinquents"  /> <label for="genre-delinquents">Delinquents</label></li>
                                                                        <li title="dementia"><input type="checkbox" id="genre-dementia" name="genre[]" value="dementia"  /> <label for="genre-dementia">Dementia</label></li>
                                                                        <li title="demons"><input type="checkbox" id="genre-demons" name="genre[]" value="demons"  /> <label for="genre-demons">Demons</label></li>
                                                                        <li title="detective"><input type="checkbox" id="genre-detective" name="genre[]" value="detective"  /> <label for="genre-detective">Detective</label></li>
                                                                        <li title="drama"><input type="checkbox" id="genre-drama" name="genre[]" value="drama"  /> <label for="genre-drama">Drama</label></li>
                                                                        <li title="dub"><input type="checkbox" id="genre-dub" name="genre[]" value="dub"  /> <label for="genre-dub">Dub</label></li>
                                                                        <li title="ecchi"><input type="checkbox" id="genre-ecchi" name="genre[]" value="ecchi"  /> <label for="genre-ecchi">Ecchi</label></li>
                                                                        <li title="erotica"><input type="checkbox" id="genre-erotica" name="genre[]" value="erotica"  /> <label for="genre-erotica">Erotica</label></li>
                                                                        <li title="family"><input type="checkbox" id="genre-family" name="genre[]" value="family"  /> <label for="genre-family">Family</label></li>
                                                                        <li title="fantasy"><input type="checkbox" id="genre-fantasy" name="genre[]" value="fantasy"  /> <label for="genre-fantasy">Fantasy</label></li>
                                                                        <li title="gag-humor"><input type="checkbox" id="genre-gag-humor" name="genre[]" value="gag-humor"  /> <label for="genre-gag-humor">Gag Humor</label></li>
                                                                        <li title="game"><input type="checkbox" id="genre-game" name="genre[]" value="game"  /> <label for="genre-game">Game</label></li>
                                                                        <li title="gender-bender"><input type="checkbox" id="genre-gender-bender" name="genre[]" value="gender-bender"  /> <label for="genre-gender-bender">Gender Bender</label></li>
                                                                        <li title="gore"><input type="checkbox" id="genre-gore" name="genre[]" value="gore"  /> <label for="genre-gore">Gore</label></li>
                                                                        <li title="gourmet"><input type="checkbox" id="genre-gourmet" name="genre[]" value="gourmet"  /> <label for="genre-gourmet">Gourmet</label></li>
                                                                        <li title="harem"><input type="checkbox" id="genre-harem" name="genre[]" value="harem"  /> <label for="genre-harem">Harem</label></li>
                                                                                                          <li title="high-stakes-game"><input type="checkbox" id="genre-high-stakes-game" name="genre[]" value="high-stakes-game"  /> <label for="genre-high-stakes-game">High Stakes Game</label></li>
                                                                        <li title="historical"><input type="checkbox" id="genre-historical" name="genre[]" value="historical"  /> <label for="genre-historical">Historical</label></li>
                                                                        <li title="horror"><input type="checkbox" id="genre-horror" name="genre[]" value="horror"  /> <label for="genre-horror">Horror</label></li>
                                                                        <li title="isekai"><input type="checkbox" id="genre-isekai" name="genre[]" value="isekai"  /> <label for="genre-isekai">Isekai</label></li>
                                                                        <li title="iyashikei"><input type="checkbox" id="genre-iyashikei" name="genre[]" value="iyashikei"  /> <label for="genre-iyashikei">Iyashikei</label></li>
                                                                        <li title="josei"><input type="checkbox" id="genre-josei" name="genre[]" value="josei"  /> <label for="genre-josei">Josei</label></li>
                                                                        <li title="kids"><input type="checkbox" id="genre-kids" name="genre[]" value="kids"  /> <label for="genre-kids">Kids</label></li>
                                                                        <li title="magic"><input type="checkbox" id="genre-magic" name="genre[]" value="magic"  /> <label for="genre-magic">Magic</label></li>
                                                                        <li title="magical-sex-shift"><input type="checkbox" id="genre-magical-sex-shift" name="genre[]" value="magical-sex-shift"  /> <label for="genre-magical-sex-shift">Magical Sex Shift</label></li>
                                                                        <li title="mahou-shoujo"><input type="checkbox" id="genre-mahou-shoujo" name="genre[]" value="mahou-shoujo"  /> <label for="genre-mahou-shoujo">Mahou Shoujo</label></li>
                                                                        <li title="martial-arts"><input type="checkbox" id="genre-martial-arts" name="genre[]" value="martial-arts"  /> <label for="genre-martial-arts">Martial Arts</label></li>
                                                                        <li title="mecha"><input type="checkbox" id="genre-mecha" name="genre[]" value="mecha"  /> <label for="genre-mecha">Mecha</label></li>
                                                                        <li title="medical"><input type="checkbox" id="genre-medical" name="genre[]" value="medical"  /> <label for="genre-medical">Medical</label></li>
                                                                        <li title="military"><input type="checkbox" id="genre-military" name="genre[]" value="military"  /> <label for="genre-military">Military</label></li>
                                                                        <li title="music"><input type="checkbox" id="genre-music" name="genre[]" value="music"  /> <label for="genre-music">Music</label></li>
                                                                        <li title="mystery"><input type="checkbox" id="genre-mystery" name="genre[]" value="mystery"  /> <label for="genre-mystery">Mystery</label></li>
                                                                        <li title="mythology"><input type="checkbox" id="genre-mythology" name="genre[]" value="mythology"  /> <label for="genre-mythology">Mythology</label></li>
                                                                        <li title="organized-crime"><input type="checkbox" id="genre-organized-crime" name="genre[]" value="organized-crime"  /> <label for="genre-organized-crime">Organized Crime</label></li>
                                                                        <li title="parody"><input type="checkbox" id="genre-parody" name="genre[]" value="parody"  /> <label for="genre-parody">Parody</label></li>
                                                                        <li title="performing-arts"><input type="checkbox" id="genre-performing-arts" name="genre[]" value="performing-arts"  /> <label for="genre-performing-arts">Performing Arts</label></li>
                                                                        <li title="pets"><input type="checkbox" id="genre-pets" name="genre[]" value="pets"  /> <label for="genre-pets">Pets</label></li>
                                                                        <li title="police"><input type="checkbox" id="genre-police" name="genre[]" value="police"  /> <label for="genre-police">Police</label></li>
                                                                        <li title="psychological"><input type="checkbox" id="genre-psychological" name="genre[]" value="psychological"  /> <label for="genre-psychological">Psychological</label></li>
                                                                        <li title="racing"><input type="checkbox" id="genre-racing" name="genre[]" value="racing"  /> <label for="genre-racing">Racing</label></li>
                                                                        <li title="reincarnation"><input type="checkbox" id="genre-reincarnation" name="genre[]" value="reincarnation"  /> <label for="genre-reincarnation">Reincarnation</label></li>
                                                                        <li title="romance"><input type="checkbox" id="genre-romance" name="genre[]" value="romance"  /> <label for="genre-romance">Romance</label></li>
                                                                        <li title="romantic-subtext"><input type="checkbox" id="genre-romantic-subtext" name="genre[]" value="romantic-subtext"  /> <label for="genre-romantic-subtext">Romantic Subtext</label></li>
                                                                        <li title="samurai"><input type="checkbox" id="genre-samurai" name="genre[]" value="samurai"  /> <label for="genre-samurai">Samurai</label></li>
                                                                        <li title="school"><input type="checkbox" id="genre-school" name="genre[]" value="school"  /> <label for="genre-school">School</label></li>
                                                                        <li title="sci-fi"><input type="checkbox" id="genre-sci-fi" name="genre[]" value="sci-fi"  /> <label for="genre-sci-fi">Sci-Fi</label></li>
                                                                        <li title="seinen"><input type="checkbox" id="genre-seinen" name="genre[]" value="seinen"  /> <label for="genre-seinen">Seinen</label></li>
                                                                        <li title="shoujo"><input type="checkbox" id="genre-shoujo" name="genre[]" value="shoujo"  /> <label for="genre-shoujo">Shoujo</label></li>
                                                                        <li title="shoujo-ai"><input type="checkbox" id="genre-shoujo-ai" name="genre[]" value="shoujo-ai"  /> <label for="genre-shoujo-ai">Shoujo Ai</label></li>
                                                                        <li title="shounen"><input type="checkbox" id="genre-shounen" name="genre[]" value="shounen"  /> <label for="genre-shounen">Shounen</label></li>
                                                                        <li title="showbiz"><input type="checkbox" id="genre-showbiz" name="genre[]" value="showbiz"  /> <label for="genre-showbiz">Showbiz</label></li>
                                                                        <li title="slice-of-life"><input type="checkbox" id="genre-slice-of-life" name="genre[]" value="slice-of-life"  /> <label for="genre-slice-of-life">Slice of Life</label></li>
                                                                        <li title="space"><input type="checkbox" id="genre-space" name="genre[]" value="space"  /> <label for="genre-space">Space</label></li>
                                                                        <li title="sports"><input type="checkbox" id="genre-sports" name="genre[]" value="sports"  /> <label for="genre-sports">Sports</label></li>
                                                                        <li title="strategy-game"><input type="checkbox" id="genre-strategy-game" name="genre[]" value="strategy-game"  /> <label for="genre-strategy-game">Strategy Game</label></li>
                                                                        <li title="super-power"><input type="checkbox" id="genre-super-power" name="genre[]" value="super-power"  /> <label for="genre-super-power">Super Power</label></li>
                                                                        <li title="supernatural"><input type="checkbox" id="genre-supernatural" name="genre[]" value="supernatural"  /> <label for="genre-supernatural">Supernatural</label></li>
                                                                        <li title="survival"><input type="checkbox" id="genre-survival" name="genre[]" value="survival"  /> <label for="genre-survival">Survival</label></li>
                                                                        <li title="suspense"><input type="checkbox" id="genre-suspense" name="genre[]" value="suspense"  /> <label for="genre-suspense">Suspense</label></li>
                                                                        <li title="team-sports"><input type="checkbox" id="genre-team-sports" name="genre[]" value="team-sports"  /> <label for="genre-team-sports">Team Sports</label></li>
                                                                        <li title="thriller"><input type="checkbox" id="genre-thriller" name="genre[]" value="thriller"  /> <label for="genre-thriller">Thriller</label></li>
                                                                        <li title="time-travel"><input type="checkbox" id="genre-time-travel" name="genre[]" value="time-travel"  /> <label for="genre-time-travel">Time Travel</label></li>
                                                                        <li title="vampire"><input type="checkbox" id="genre-vampire" name="genre[]" value="vampire"  /> <label for="genre-vampire">Vampire</label></li>
                                                                        <li title="video-game"><input type="checkbox" id="genre-video-game" name="genre[]" value="video-game"  /> <label for="genre-video-game">Video Game</label></li>
                                                                        <li title="visual-arts"><input type="checkbox" id="genre-visual-arts" name="genre[]" value="visual-arts"  /> <label for="genre-visual-arts">Visual Arts</label></li>
                                                                        <li title="work-life"><input type="checkbox" id="genre-work-life" name="genre[]" value="work-life"  /> <label for="genre-work-life">Work Life</label></li>
                                                                        <li title="workplace"><input type="checkbox" id="genre-workplace" name="genre[]" value="workplace"  /> <label for="genre-workplace">Workplace</label></li>
                                                                        <li title="yaoi"><input type="checkbox" id="genre-yaoi" name="genre[]" value="yaoi"  /> <label for="genre-yaoi">Yaoi</label></li>
                                                                        <li title="yuri"><input type="checkbox" id="genre-yuri" name="genre[]" value="yuri"  /> <label for="genre-yuri">Yuri</label></li>
                                              </ul>
        </div>
    </div>
    <div class="filter">
        <div class="dropdown cls_country">
            <button class="btn btn-secondary dropdown-toggle" data-toggle="dropdown"><span class="value" data-placeholder="Select country" data-label-placement="true">Select country</span></button>
            <ul class="dropdown-menu c1">
                <li title="China"><input type="checkbox" id="country-china" name="country[]" value="5"  /> <label for="country-china">China</label></li>
                <li title="Japan"><input type="checkbox" id="country-japan" name="country[]" value="2"  /> <label for="country-japan">Japan</label></li>
            </ul>
        </div>
    </div>
    <div class="filter">
        <div class="dropdown cls_season">
            <button class="btn btn-secondary dropdown-toggle" data-toggle="dropdown"><span class="value" data-placeholder="Select season" data-label-placement="true">Select season</span></button>
            <ul class="dropdown-menu c1">
                <li><input type="checkbox" id="season-fall" name="season[]" value="fall"  /> <label for="season-fall">Fall</label></li>
                <li><input type="checkbox" id="season-summer" name="season[]" value="summer"  /> <label for="season-summer">Summer</label></li>
                <li><input type="checkbox" id="season-spring" name="season[]" value="spring"  /> <label for="season-spring">Spring</label></li>
                <li><input type="checkbox" id="season-winter" name="season[]" value="winter"  /> <label for="season-winter">Winter</label></li>
            </ul>
        </div>
    </div>
    <div class="filter">
        <div class="dropdown cls_year">
            <button class="btn btn-secondary dropdown-toggle" data-toggle="dropdown"><span class="value" data-placeholder="Select year" data-label-placement="true">Select year</span></button>
            <ul class="dropdown-menu md c3">
                                <li><input  type="checkbox" id="year-2024" name="year[]" value="2024" /> <label for="year-2024">2024</label></li>
                                <li><input  type="checkbox" id="year-2023" name="year[]" value="2023" /> <label for="year-2023">2023</label></li>
                                <li><input  type="checkbox" id="year-2022" name="year[]" value="2022" /> <label for="year-2022">2022</label></li>
                                <li><input  type="checkbox" id="year-2021" name="year[]" value="2021" /> <label for="year-2021">2021</label></li>
                                <li><input  type="checkbox" id="year-2020" name="year[]" value="2020" /> <label for="year-2020">2020</label></li>
                                <li><input  type="checkbox" id="year-2019" name="year[]" value="2019" /> <label for="year-2019">2019</label></li>
                                <li><input  type="checkbox" id="year-2018" name="year[]" value="2018" /> <label for="year-2018">2018</label></li>
                                <li><input  type="checkbox" id="year-2017" name="year[]" value="2017" /> <label for="year-2017">2017</label></li>
                                <li><input  type="checkbox" id="year-2016" name="year[]" value="2016" /> <label for="year-2016">2016</label></li>
                                <li><input  type="checkbox" id="year-2015" name="year[]" value="2015" /> <label for="year-2015">2015</label></li>
                                <li><input  type="checkbox" id="year-2014" name="year[]" value="2014" /> <label for="year-2014">2014</label></li>
                                <li><input  type="checkbox" id="year-2013" name="year[]" value="2013" /> <label for="year-2013">2013</label></li>
                                <li><input  type="checkbox" id="year-2012" name="year[]" value="2012" /> <label for="year-2012">2012</label></li>
                                <li><input  type="checkbox" id="year-2011" name="year[]" value="2011" /> <label for="year-2011">2011</label></li>
                                <li><input  type="checkbox" id="year-2010" name="year[]" value="2010" /> <label for="year-2010">2010</label></li>
                                <li><input  type="checkbox" id="year-2009" name="year[]" value="2009" /> <label for="year-2009">2009</label></li>
                                <li><input  type="checkbox" id="year-2008" name="year[]" value="2008" /> <label for="year-2008">2008</label></li>
                                <li><input  type="checkbox" id="year-2007" name="year[]" value="2007" /> <label for="year-2007">2007</label></li>
                                <li><input  type="checkbox" id="year-2006" name="year[]" value="2006" /> <label for="year-2006">2006</label></li>
                                <li><input  type="checkbox" id="year-2005" name="year[]" value="2005" /> <label for="year-2005">2005</label></li>
                                <li><input  type="checkbox" id="year-2004" name="year[]" value="2004" /> <label for="year-2004">2004</label></li>
                                <li><input  type="checkbox" id="year-2003" name="year[]" value="2003" /> <label for="year-2003">2003</label></li>
                                <li><input  type="checkbox" id="year-2002" name="year[]" value="2002" /> <label for="year-2002">2002</label></li>
                                <li><input  type="checkbox" id="year-2001" name="year[]" value="2001" /> <label for="year-2001">2001</label></li>
                                <li><input  type="checkbox" id="year-2000" name="year[]" value="2000" /> <label for="year-2000">2000</label></li>
                                <li><input  type="checkbox" id="year-1999" name="year[]" value="1999" /> <label for="year-1999">1999</label></li>
                            </ul>
        </div>
    </div>
	 <div class="filter">
        <div class="dropdown cls_lang">
            <button class="btn btn-secondary dropdown-toggle" data-toggle="dropdown"><span class="value" data-placeholder="Select language" data-label-placement="true">Select language</span></button>
            <ul class="dropdown-menu c1">
                <li><input type="checkbox" id="language-subdub" name="language[]" value="subdub"  /> <label for="language-subdub">Sub & Dub</label></li>
                <li><input type="checkbox" id="language-sub" name="language[]" value="sub"  /> <label for="language-sub">Sub</label></li>
                <li><input type="checkbox" id="language-dub" name="language[]" value="dub"  /> <label for="language-dub">Dub</label></li>
            </ul>
        </div>
    </div>
    <div class="filter">
        <div class="dropdown cls_type">
            <button class="btn btn-secondary dropdown-toggle" data-toggle="dropdown"><span class="value" data-placeholder="Select type" data-label-placement="true">Select type</span></button>
            <ul class="dropdown-menu c1">
                <li><input type="checkbox" id="type-movie" name="type[]" value="3"  /> <label for="type-movie">Movie</label></li>
                <li><input type="checkbox" id="type-tv" name="type[]" value="1"  /> <label for="type-tv">TV</label></li>
                <li><input type="checkbox" id="type-ova" name="type[]" value="26"  /> <label for="type-ova">OVA</label></li>
                <li><input type="checkbox" id="type-ona" name="type[]" value="30"  /> <label for="type-ona">ONA</label></li>
                <li><input type="checkbox" id="type-special" name="type[]" value="2"  /> <label for="type-special">Special</label></li>
                <li><input type="checkbox" id="type-music" name="type[]" value="32"  /> <label for="type-music">Music</label></li>
            </ul>
        </div>
    </div>
    <div class="filter">
        <div class="dropdown cls_status">
            <button class="btn btn-secondary dropdown-toggle" data-toggle="dropdown"><span class="value" data-placeholder="Select status" data-label-placement="true">Select status</span></button>
            <ul class="dropdown-menu c1">
                <li><input type="checkbox" id="status-upcoming" name="status[]" value="Upcoming"  /> <label for="status-upcoming">Not Yet Aired</label></li>
                <li><input type="checkbox" id="status-ongoing" name="status[]" value="Ongoing"  /> <label for="status-ongoing">Ongoing</label></li>
                <li><input type="checkbox" id="status-completed" name="status[]" value="Completed"  /> <label for="status-completed">Completed</label></li>
            </ul>
        </div>
    </div>
    <div class="filter">
        <div class="dropdown cls_sort">
            <button class="btn btn-secondary dropdown-toggle" data-toggle="dropdown"><span class="value" data-placeholder="Sort by" data-label-placement="true">Sort by</span></button>
            <ul class="dropdown-menu c1">
                <li><input type="radio" id="sort-title_az" name="sort" value="title_az" checked /> <label for="sort-title_az">Name A-Z</label></li>
                <li><input type="radio" id="sort-recently_updated" name="sort" value="recently_updated"  /> <label for="sort-recently_updated">Recently updated</label></li>
                <li><input type="radio" id="sort-recently_added" name="sort" value="recently_added"  /> <label for="sort-recently_added">Recently added</label></li>
                <li><input type="radio" id="sort-release_date" name="sort" value="release_date"  /> <label for="sort-release_date">Release date</label></li>
            </ul>
        </div>
    </div>
    <div class="submit filter w-auto">
        <button class="btn btn-primary d-flex align-items-center">
            <span class="ml-1">Filter</span>
        </button>
    </div>
</form>                                
</div>
<div class="clr"></div>
		<ul class="items">
						<li>
				<div class="img">
					<a href="/category/one-piece-movie-10-strong-world" title="One Piece Movie 10: Strong World">
					<img src="https://gogocdn.net/images/anime/O/One-Piece-movie-10.jpg" alt="One Piece Movie 10: Strong World" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-movie-10-strong-world" title="One Piece Movie 10: Strong World">One Piece Movie 10: Strong World</a>
				</p>
				<p class="released">
					 Released: 2009 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-taose-kaizoku-ganzack" title="One Piece: Taose! Kaizoku Ganzack">
					<img src="https://gogocdn.net/cover/one-piece-taose-kaizoku-ganzack.png" alt="One Piece: Taose! Kaizoku Ganzack" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-taose-kaizoku-ganzack" title="One Piece: Taose! Kaizoku Ganzack">One Piece: Taose! Kaizoku Ganzack</a>
				</p>
				<p class="released">
					 Released: 1998 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-adventure-of-nebulandia" title="One Piece: Adventure of Nebulandia">
					<img src="https://gogocdn.net/images/upload/One Piece - Adventure of Nebulandia.jpg" alt="One Piece: Adventure of Nebulandia" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-adventure-of-nebulandia" title="One Piece: Adventure of Nebulandia">One Piece: Adventure of Nebulandia</a>
				</p>
				<p class="released">
					 Released: 2015 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-movie-14-stampede-dub" title="One Piece Movie 14: Stampede (Dub)">
					<img src="https://gogocdn.net/cover/one-piece-movie-14-stampede-dub.png" alt="One Piece Movie 14: Stampede (Dub)" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-movie-14-stampede-dub" title="One Piece Movie 14: Stampede (Dub)">One Piece Movie 14: Stampede (Dub)</a>
				</p>
				<p class="released">
					 Released: 2019 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-film-strong-world-dub" title="One Piece Film: Strong World (Dub)">
					<img src="https://gogocdn.net/cover/one-piece-film-strong-world-dub.png" alt="One Piece Film: Strong World (Dub)" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-film-strong-world-dub" title="One Piece Film: Strong World (Dub)">One Piece Film: Strong World (Dub)</a>
				</p>
				<p class="released">
					 Released: 2009 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-episode-of-sorajima-dub" title="One Piece: Episode of Sorajima (Dub)">
					<img src="https://gogocdn.net/cover/one-piece-episode-of-sorajima-dub.png" alt="One Piece: Episode of Sorajima (Dub)" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-episode-of-sorajima-dub" title="One Piece: Episode of Sorajima (Dub)">One Piece: Episode of Sorajima (Dub)</a>
				</p>
				<p class="released">
					 Released: 2018 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/uchida-shungicu-no-noroi-no-one-piece" title="Uchida Shungicu no Noroi no One-Piece">
					<img src="https://gogocdn.net/cover/uchida-shungicu-no-noroi-no-one-piece.png" alt="Uchida Shungicu no Noroi no One-Piece" />
					</a>
				</div>
				<p class="name">
					<a href="/category/uchida-shungicu-no-noroi-no-one-piece" title="Uchida Shungicu no Noroi no One-Piece">Uchida Shungicu no Noroi no One-Piece</a>
				</p>
				<p class="released">
					 Released: 1992 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-movie-4-dead-end-adventure" title="One Piece Movie 4: Dead End Adventure">
					<img src="https://gogocdn.net/images/anime/O/One-Piece-movie-4.jpg" alt="One Piece Movie 4: Dead End Adventure" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-movie-4-dead-end-adventure" title="One Piece Movie 4: Dead End Adventure">One Piece Movie 4: Dead End Adventure</a>
				</p>
				<p class="released">
					 Released: 2003 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-film-strong-world-episode-0" title="One Piece Film: Strong World Episode 0">
					<img src="https://gogocdn.net/cover/one-piece-film-strong-world-episode-0.png" alt="One Piece Film: Strong World Episode 0" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-film-strong-world-episode-0" title="One Piece Film: Strong World Episode 0">One Piece Film: Strong World Episode 0</a>
				</p>
				<p class="released">
					 Released: 2010 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-adventure-of-nebulandia-dub" title="One Piece: Adventure of Nebulandia (Dub)">
					<img src="https://gogocdn.net/cover/one-piece-adventure-of-nebulandia-dub.png" alt="One Piece: Adventure of Nebulandia (Dub)" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-adventure-of-nebulandia-dub" title="One Piece: Adventure of Nebulandia (Dub)">One Piece: Adventure of Nebulandia (Dub)</a>
				</p>
				<p class="released">
					 Released: 2015 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-movie-1-the-great-gold-pirate" title="One Piece Movie 1: The Great Gold Pirate">
					<img src="https://gogocdn.net/images/anime/O/One-Piece-movie-1.jpg" alt="One Piece Movie 1: The Great Gold Pirate" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-movie-1-the-great-gold-pirate" title="One Piece Movie 1: The Great Gold Pirate">One Piece Movie 1: The Great Gold Pirate</a>
				</p>
				<p class="released">
					 Released: 2000 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-luffy-hand-island-no-bouken" title="One Piece Luffy – Hand Island no Bouken">
					<img src="https://gogocdn.net/images/1.jpg" alt="One Piece Luffy – Hand Island no Bouken" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-luffy-hand-island-no-bouken" title="One Piece Luffy – Hand Island no Bouken">One Piece Luffy – Hand Island no Bouken</a>
				</p>
				<p class="released">
					 Released: 2012 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-film-gold-episode-0-711-ver" title="One Piece Film: Gold Episode 0 - 711 ver.">
					<img src="https://gogocdn.net/cover/one-piece-film-gold-episode-0-711-ver.png" alt="One Piece Film: Gold Episode 0 - 711 ver." />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-film-gold-episode-0-711-ver" title="One Piece Film: Gold Episode 0 - 711 ver.">One Piece Film: Gold Episode 0 - 711 ver.</a>
				</p>
				<p class="released">
					 Released: 2016 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-movie-02-nejimaki-jima-no-daibouken" title="One Piece Movie 02: Nejimaki-jima no Daibouken">
					<img src="https://gogocdn.net/cover/one-piece-movie-02-nejimaki-jima-no-daibouken.png" alt="One Piece Movie 02: Nejimaki-jima no Daibouken" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-movie-02-nejimaki-jima-no-daibouken" title="One Piece Movie 02: Nejimaki-jima no Daibouken">One Piece Movie 02: Nejimaki-jima no Daibouken</a>
				</p>
				<p class="released">
					 Released: 2001 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-densetsu-no-log-akagami-no-shanks" title="One Piece: Densetsu no Log! Akagami no Shanks!">
					<img src="https://gogocdn.net/cover/one-piece-densetsu-no-log-akagami-no-shanks.png" alt="One Piece: Densetsu no Log! Akagami no Shanks!" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-densetsu-no-log-akagami-no-shanks" title="One Piece: Densetsu no Log! Akagami no Shanks!">One Piece: Densetsu no Log! Akagami no Shanks!</a>
				</p>
				<p class="released">
					 Released: 2022 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-movie-5-the-curse-of-the-sacred-sword" title="One Piece Movie 5: The Curse of the Sacred Sword">
					<img src="https://gogocdn.net/images/anime/O/One-Piece-movie-5.jpg" alt="One Piece Movie 5: The Curse of the Sacred Sword" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-movie-5-the-curse-of-the-sacred-sword" title="One Piece Movie 5: The Curse of the Sacred Sword">One Piece Movie 5: The Curse of the Sacred Sword</a>
				</p>
				<p class="released">
					 Released: 2004 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-dai-gekisen-tokushuu-zoro-vs-ookanban" title="One Piece: Dai Gekisen Tokushuu! Zoro vs. Ookanban!">
					<img src="https://gogocdn.net/cover/one-piece-dai-gekisen-tokushuu-zoro-vs-ookanban.png" alt="One Piece: Dai Gekisen Tokushuu! Zoro vs. Ookanban!" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-dai-gekisen-tokushuu-zoro-vs-ookanban" title="One Piece: Dai Gekisen Tokushuu! Zoro vs. Ookanban!">One Piece: Dai Gekisen Tokushuu! Zoro vs. Ookanban!</a>
				</p>
				<p class="released">
					 Released: 2023 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-densetsu-no-log-akagami-no-shanks-dub" title="One Piece: Densetsu no Log! Akagami no Shanks! (Dub)">
					<img src="https://gogocdn.net/cover/one-piece-densetsu-no-log-akagami-no-shanks-dub.png" alt="One Piece: Densetsu no Log! Akagami no Shanks! (Dub)" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-densetsu-no-log-akagami-no-shanks-dub" title="One Piece: Densetsu no Log! Akagami no Shanks! (Dub)">One Piece: Densetsu no Log! Akagami no Shanks! (Dub)</a>
				</p>
				<p class="released">
					 Released: 2022 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-dai-tettei-kaibou-kouzuki-oden-densetsu" title="One Piece: Dai Tettei Kaibou! Kouzuki Oden Densetsu!">
					<img src="https://gogocdn.net/cover/one-piece-dai-tettei-kaibou-kouzuki-oden-densetsu.png" alt="One Piece: Dai Tettei Kaibou! Kouzuki Oden Densetsu!" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-dai-tettei-kaibou-kouzuki-oden-densetsu" title="One Piece: Dai Tettei Kaibou! Kouzuki Oden Densetsu!">One Piece: Dai Tettei Kaibou! Kouzuki Oden Densetsu!</a>
				</p>
				<p class="released">
					 Released: 2022 				</p>
			</li>
						<li>
				<div class="img">
					<a href="/category/one-piece-movie-8-the-desert-princess-and-the-pirates" title="One Piece Movie 8: The Desert Princess and the Pirates">
					<img src="https://gogocdn.net/images/anime/O/One-Piece-movie-8.jpg" alt="One Piece Movie 8: The Desert Princess and the Pirates" />
					</a>
				</div>
				<p class="name">
					<a href="/category/one-piece-movie-8-the-desert-princess-and-the-pirates" title="One Piece Movie 8: The Desert Princess and the Pirates">One Piece Movie 8: The Desert Princess and the Pirates</a>
				</p>
				<p class="released">
					 Released: 2007 				</p>
			</li>
					</ul>
	</div>
</div>

                </section>
                 <section class="content_right">
                    <div class="headnav_center">
                          <div class="anime_name adsverting">
                              <i class="icongec-adsverting i_pos"></i>
                              <h2>ADVERTISEMENTS</h2>
                          </div>
                          <div class="headnav_items">
                             
                              <div id="bg_311326291"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=2&zoneid=6291"></script>                                                      </div>
                    </div>

                                        
                    <div class="clr"></div>
                                          <div class="main_body">
     <div class="main_body_black">
          <div class="anime_name ongoing">
              <i class="icongec-ongoing i_pos"></i><h2>RECENT RELEASE</h2>
          </div>
          <div class="recent">
           <!-- begon -->
          <div id="scrollbar2">
          <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
            <div class="viewport">
                 <div class="overview">
               			<nav class="menu_recent">
                                    <ul>
                                    	                                        <li>
                                        <a href="/wangu-kuang-di-episode-7" title="Wangu Kuang Di">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wangu-kuang-di.png');"></div>
                               		     Wangu Kuang Di                                        </a>
                                    <a href="/wangu-kuang-di-episode-7" title="Wangu Kuang Di">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/the-legend-of-sword-domain-3rd-season-episode-30" title="The Legend of Sword Domain 3rd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/the-legend-of-sword-domain-3rd-season.png');"></div>
                               		     The Legend of Sword Domain 3rd Season                                        </a>
                                    <a href="/the-legend-of-sword-domain-3rd-season-episode-30" title="The Legend of Sword Domain 3rd Season">
                                     <p class="time_2">Episode 30</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/xian-ni-episode-22" title="Xian Ni">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/xian-ni.png');"></div>
                               		     Xian Ni                                        </a>
                                    <a href="/xian-ni-episode-22" title="Xian Ni">
                                     <p class="time_2">Episode 22</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/jiu-tian-xuan-di-jue-3-episode-127" title="Jiu Tian Xuan Di Jue 3">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/jiu-tian-xuan-di-jue-3.png');"></div>
                               		     Jiu Tian Xuan Di Jue 3                                        </a>
                                    <a href="/jiu-tian-xuan-di-jue-3-episode-127" title="Jiu Tian Xuan Di Jue 3">
                                     <p class="time_2">Episode 127</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/kui-cheng-shoufu-cong-youxi-kaishi-episode-2" title="Kui Cheng Shoufu Cong Youxi Kaishi">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/kui-cheng-shoufu-cong-youxi-kaishi.png');"></div>
                               		     Kui Cheng Shoufu Cong Youxi Kaishi                                        </a>
                                    <a href="/kui-cheng-shoufu-cong-youxi-kaishi-episode-2" title="Kui Cheng Shoufu Cong Youxi Kaishi">
                                     <p class="time_2">Episode 2</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/supreme-warriors-episode-58" title="Supreme Warriors">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/supreme-warriors.png');"></div>
                               		     Supreme Warriors                                        </a>
                                    <a href="/supreme-warriors-episode-58" title="Supreme Warriors">
                                     <p class="time_2">Episode 58</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ni-de-rensheng-shi-wo-lai-chi-le-episode-13" title="Ni De Rensheng Shi Wo Lai Chi Le">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ni-de-rensheng-shi-wo-lai-chi-le.png');"></div>
                               		     Ni De Rensheng Shi Wo Lai Chi Le                                        </a>
                                    <a href="/ni-de-rensheng-shi-wo-lai-chi-le-episode-13" title="Ni De Rensheng Shi Wo Lai Chi Le">
                                     <p class="time_2">Episode 13</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/da-yuzhou-shidai-episode-3" title="Da Yuzhou Shidai">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/da-yuzhou-shidai.png');"></div>
                               		     Da Yuzhou Shidai                                        </a>
                                    <a href="/da-yuzhou-shidai-episode-3" title="Da Yuzhou Shidai">
                                     <p class="time_2">Episode 3</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/i-am-the-king-episode-30" title="I Am the King">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/i-am-the-king.png');"></div>
                               		     I Am the King                                        </a>
                                    <a href="/i-am-the-king-episode-30" title="I Am the King">
                                     <p class="time_2">Episode 30</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/the-daily-troubles-of-the-demon-king-episode-26" title="The Daily Troubles Of The Demon King">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/the-daily-troubles-of-the-demon-king.png');"></div>
                               		     The Daily Troubles Of The Demon King                                        </a>
                                    <a href="/the-daily-troubles-of-the-demon-king-episode-26" title="The Daily Troubles Of The Demon King">
                                     <p class="time_2">Episode 26</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/the-queens-harem-episode-36" title="The Queen's Harem">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/the-queens-harem.png');"></div>
                               		     The Queen's Harem                                        </a>
                                    <a href="/the-queens-harem-episode-36" title="The Queen's Harem">
                                     <p class="time_2">Episode 36</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/super-wechat-episode-63" title="Super Wechat">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/super-wechat.png');"></div>
                               		     Super Wechat                                        </a>
                                    <a href="/super-wechat-episode-63" title="Super Wechat">
                                     <p class="time_2">Episode 63</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/disciples-say-im-invincible-episode-51" title="Disciples Say I’m Invincible">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/disciples-say-im-invincible.png');"></div>
                               		     Disciples Say I’m Invincible                                        </a>
                                    <a href="/disciples-say-im-invincible-episode-51" title="Disciples Say I’m Invincible">
                                     <p class="time_2">Episode 51</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/return-of-the-immortal-episode-99" title="Return of the Immortal">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/return-of-the-immortal.png');"></div>
                               		     Return of the Immortal                                        </a>
                                    <a href="/return-of-the-immortal-episode-99" title="Return of the Immortal">
                                     <p class="time_2">Episode 99</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/i-really-dont-want-to-be-a-fairy-episode-37" title="I Really Don’t Want to Be a Fairy">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/i-really-dont-want-to-be-a-fairy.png');"></div>
                               		     I Really Don’t Want to Be a Fairy                                        </a>
                                    <a href="/i-really-dont-want-to-be-a-fairy-episode-37" title="I Really Don’t Want to Be a Fairy">
                                     <p class="time_2">Episode 37</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/master-of-ten-thousand-paths-episode-54" title="Master of Ten Thousand Paths">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/master-of-ten-thousand-paths.png');"></div>
                               		     Master of Ten Thousand Paths                                        </a>
                                    <a href="/master-of-ten-thousand-paths-episode-54" title="Master of Ten Thousand Paths">
                                     <p class="time_2">Episode 54</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/fanren-xiu-xian-chuan-3rd-season-episode-11" title="Fanren Xiu Xian Chuan 3rd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/fanren-xiu-xian-chuan-3rd-season.png');"></div>
                               		     Fanren Xiu Xian Chuan 3rd Season                                        </a>
                                    <a href="/fanren-xiu-xian-chuan-3rd-season-episode-11" title="Fanren Xiu Xian Chuan 3rd Season">
                                     <p class="time_2">Episode 11</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/tousouchuu-great-mission-episode-42" title="Tousouchuu: Great Mission">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/tousouchuu-great-mission-1680203786.png');"></div>
                               		     Tousouchuu: Great Mission                                        </a>
                                    <a href="/tousouchuu-great-mission-episode-42" title="Tousouchuu: Great Mission">
                                     <p class="time_2">Episode 42</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/nitian-xie-shen-2nd-season-episode-158" title="Nitian Xie Shen 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/nitian-xie-shen-2nd-season.png');"></div>
                               		     Nitian Xie Shen 2nd Season                                        </a>
                                    <a href="/nitian-xie-shen-2nd-season-episode-158" title="Nitian Xie Shen 2nd Season">
                                     <p class="time_2">Episode 158</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/god-of-war-episode-83" title="God Of War">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/god-of-war.png');"></div>
                               		     God Of War                                        </a>
                                    <a href="/god-of-war-episode-83" title="God Of War">
                                     <p class="time_2">Episode 83</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/the-strongest-physical-training-ancestor-in-history-episode-53" title="The Strongest Physical Training Ancestor In History">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/the-strongest-physical-training-ancestor-in-history-1678096358.png');"></div>
                               		     The Strongest Physical Training Ancestor In History                                        </a>
                                    <a href="/the-strongest-physical-training-ancestor-in-history-episode-53" title="The Strongest Physical Training Ancestor In History">
                                     <p class="time_2">Episode 53</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/first-class-taker-episode-113-episode-93" title="First Class Taker Episode 113">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/first-class-taker.png');"></div>
                               		     First Class Taker Episode 113                                        </a>
                                    <a href="/first-class-taker-episode-113-episode-93" title="First Class Taker Episode 113">
                                     <p class="time_2">Episode 93</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/the-emperor-of-creation-episode-123" title="The Emperor of Creation">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/the-emperor-of-creation.png');"></div>
                               		     The Emperor of Creation                                        </a>
                                    <a href="/the-emperor-of-creation-episode-123" title="The Emperor of Creation">
                                     <p class="time_2">Episode 123</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/xianwu-emperor-2021-episode-305" title="Xianwu Emperor (2021)">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/xianwu-emperor-2021.png');"></div>
                               		     Xianwu Emperor (2021)                                        </a>
                                    <a href="/xianwu-emperor-2021-episode-305" title="Xianwu Emperor (2021)">
                                     <p class="time_2">Episode 305</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/peerless-martial-spirit-episode-346" title="Peerless Martial Spirit">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/peerless-martial-spirit.png');"></div>
                               		     Peerless Martial Spirit                                        </a>
                                    <a href="/peerless-martial-spirit-episode-346" title="Peerless Martial Spirit">
                                     <p class="time_2">Episode 346</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/yami-shibai-12-episode-4" title="Yami Shibai 12">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/yami-shibai-12.png');"></div>
                               		     Yami Shibai 12                                        </a>
                                    <a href="/yami-shibai-12-episode-4" title="Yami Shibai 12">
                                     <p class="time_2">Episode 4</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/kyuujitsu-no-warumono-san-episode-5" title="Kyuujitsu no Warumono-san">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/kyuujitsu-no-warumono-san-1704186864.png');"></div>
                               		     Kyuujitsu no Warumono-san                                        </a>
                                    <a href="/kyuujitsu-no-warumono-san-episode-5" title="Kyuujitsu no Warumono-san">
                                     <p class="time_2">Episode 5</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/hikari-no-ou-2nd-season-episode-4" title="Hikari no Ou 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/hikari-no-ou-2nd-season-1704184627.png');"></div>
                               		     Hikari no Ou 2nd Season                                        </a>
                                    <a href="/hikari-no-ou-2nd-season-episode-4" title="Hikari no Ou 2nd Season">
                                     <p class="time_2">Episode 4</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/meiji-gekken-1874-episode-4" title="Meiji Gekken: 1874">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/meiji-gekken-1874.png');"></div>
                               		     Meiji Gekken: 1874                                        </a>
                                    <a href="/meiji-gekken-1874-episode-4" title="Meiji Gekken: 1874">
                                     <p class="time_2">Episode 4</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/loop-7-kaime-no-akuyaku-reijou-wa-moto-tekikoku-de-jiyuu-kimama-na-hanayome-seikatsu-wo-mankitsu-suru-episode-5" title="Loop 7-kaime no Akuyaku Reijou wa, Moto Tekikoku de Jiyuu Kimama na Hanayome Seikatsu wo Mankitsu suru">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/loop-7-kaime-no-akuyaku-reijou-wa-moto-tekikoku-de-jiyuu-kimama-na-hanayome-seikatsu-wo-mankitsu-suru.png');"></div>
                               		     Loop 7-kaime no Akuyaku Reijou wa, Moto Tekikoku de Jiyuu Kimama na Hanayome Seikatsu wo Mankitsu suru                                        </a>
                                    <a href="/loop-7-kaime-no-akuyaku-reijou-wa-moto-tekikoku-de-jiyuu-kimama-na-hanayome-seikatsu-wo-mankitsu-suru-episode-5" title="Loop 7-kaime no Akuyaku Reijou wa, Moto Tekikoku de Jiyuu Kimama na Hanayome Seikatsu wo Mankitsu suru">
                                     <p class="time_2">Episode 5</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/pururun-shizuku-chan-episode-33" title="Pururun! Shizuku-chan">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/pururun-shizuku-chan.png');"></div>
                               		     Pururun! Shizuku-chan                                        </a>
                                    <a href="/pururun-shizuku-chan-episode-33" title="Pururun! Shizuku-chan">
                                     <p class="time_2">Episode 33</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/dr-slump-arale-chan-episode-153" title="Dr. Slump: Arale-chan">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/dr-slump-arale-chan.png');"></div>
                               		     Dr. Slump: Arale-chan                                        </a>
                                    <a href="/dr-slump-arale-chan-episode-153" title="Dr. Slump: Arale-chan">
                                     <p class="time_2">Episode 153</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/isekai-de-mofumofu-nadenade-suru-tame-ni-ganbattemasu-episode-6" title="Isekai de Mofumofu Nadenade suru Tame ni Ganbattemasu.">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/isekai-de-mofumofu-nadenade-suru-tame-ni-ganbattemasu-1704185943.png');"></div>
                               		     Isekai de Mofumofu Nadenade suru Tame ni Ganbattemasu.                                        </a>
                                    <a href="/isekai-de-mofumofu-nadenade-suru-tame-ni-ganbattemasu-episode-6" title="Isekai de Mofumofu Nadenade suru Tame ni Ganbattemasu.">
                                     <p class="time_2">Episode 6</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/shin-no-nakama-ja-nai-to-yuusha-no-party-wo-oidasareta-node-henkyou-de-slow-life-suru-koto-ni-shimashita-2nd-episode-5" title="Shin no Nakama ja Nai to Yuusha no Party wo Oidasareta node, Henkyou de Slow Life suru Koto ni Shimashita 2nd">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/shin-no-nakama-ja-nai-to-yuusha-no-party-wo-oidasareta-node-henkyou-de-slow-life-suru-koto-ni-shimashita-2nd-1704249955.png');"></div>
                               		     Shin no Nakama ja Nai to Yuusha no Party wo Oidasareta node, Henkyou de Slow Life suru Koto ni Shimashita 2nd                                        </a>
                                    <a href="/shin-no-nakama-ja-nai-to-yuusha-no-party-wo-oidasareta-node-henkyou-de-slow-life-suru-koto-ni-shimashita-2nd-episode-5" title="Shin no Nakama ja Nai to Yuusha no Party wo Oidasareta node, Henkyou de Slow Life suru Koto ni Shimashita 2nd">
                                     <p class="time_2">Episode 5</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/chibi-maruko-chan-episode-1422" title="Chibi Maruko-chan">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/chibi-maruko-chan.png');"></div>
                               		     Chibi Maruko-chan                                        </a>
                                    <a href="/chibi-maruko-chan-episode-1422" title="Chibi Maruko-chan">
                                     <p class="time_2">Episode 1422</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/doupo-cangqiong-nian-fan-episode-82" title="Doupo Cangqiong: Nian Fan">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/doupo-cangqiong-nian-fan.png');"></div>
                               		     Doupo Cangqiong: Nian Fan                                        </a>
                                    <a href="/doupo-cangqiong-nian-fan-episode-82" title="Doupo Cangqiong: Nian Fan">
                                     <p class="time_2">Episode 82</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wu-shen-zhu-zai-episode-408" title="Wu Shen Zhu Zai">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wu-shen-zhu-zai.png');"></div>
                               		     Wu Shen Zhu Zai                                        </a>
                                    <a href="/wu-shen-zhu-zai-episode-408" title="Wu Shen Zhu Zai">
                                     <p class="time_2">Episode 408</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su-episode-17" title="Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su-1698288586.png');"></div>
                               		     Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su                                        </a>
                                    <a href="/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su-episode-17" title="Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su">
                                     <p class="time_2">Episode 17</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/captain-tsubasa-season-2-junior-youth-hen-episode-18" title="Captain Tsubasa Season 2: Junior Youth-hen">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/captain-tsubasa-season-2-junior-youth-hen.png');"></div>
                               		     Captain Tsubasa Season 2: Junior Youth-hen                                        </a>
                                    <a href="/captain-tsubasa-season-2-junior-youth-hen-episode-18" title="Captain Tsubasa Season 2: Junior Youth-hen">
                                     <p class="time_2">Episode 18</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/kingdom-5th-season-episode-4" title="Kingdom 5th Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/kingdom-5th-season-1704186249.png');"></div>
                               		     Kingdom 5th Season                                        </a>
                                    <a href="/kingdom-5th-season-episode-4" title="Kingdom 5th Season">
                                     <p class="time_2">Episode 4</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/taigu-xing-shen-jue-episode-5" title="Taigu Xing Shen Jue">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/taigu-xing-shen-jue.png');"></div>
                               		     Taigu Xing Shen Jue                                        </a>
                                    <a href="/taigu-xing-shen-jue-episode-5" title="Taigu Xing Shen Jue">
                                     <p class="time_2">Episode 5</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/legend-of-xianwu-2nd-season-episode-20" title="Legend of Xianwu 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/legend-of-xianwu-2nd-season.png');"></div>
                               		     Legend of Xianwu 2nd Season                                        </a>
                                    <a href="/legend-of-xianwu-2nd-season-episode-20" title="Legend of Xianwu 2nd Season">
                                     <p class="time_2">Episode 20</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/emo-faze-episode-20" title="Emo Faze">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/emo-faze.png');"></div>
                               		     Emo Faze                                        </a>
                                    <a href="/emo-faze-episode-20" title="Emo Faze">
                                     <p class="time_2">Episode 20</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/yugioh-go-rush-episode-95" title="Yu☆Gi☆Oh!: Go Rush!!">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/yugioh-go-rush.png');"></div>
                               		     Yu☆Gi☆Oh!: Go Rush!!                                        </a>
                                    <a href="/yugioh-go-rush-episode-95" title="Yu☆Gi☆Oh!: Go Rush!!">
                                     <p class="time_2">Episode 95</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/shi-fang-wu-sheng-episode-14" title="Shi Fang Wu Sheng">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/shi-fang-wu-sheng.png');"></div>
                               		     Shi Fang Wu Sheng                                        </a>
                                    <a href="/shi-fang-wu-sheng-episode-14" title="Shi Fang Wu Sheng">
                                     <p class="time_2">Episode 14</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/xian-wang-de-richang-shenghuo-4-episode-9" title="Xian Wang de Richang Shenghuo 4">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/xian-wang-de-richang-shenghuo-4.png');"></div>
                               		     Xian Wang de Richang Shenghuo 4                                        </a>
                                    <a href="/xian-wang-de-richang-shenghuo-4-episode-9" title="Xian Wang de Richang Shenghuo 4">
                                     <p class="time_2">Episode 9</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ochibi-san-episode-15" title="Ochibi-san">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ochibi-san.png');"></div>
                               		     Ochibi-san                                        </a>
                                    <a href="/ochibi-san-episode-15" title="Ochibi-san">
                                     <p class="time_2">Episode 15</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/shaman-king-flowers-episode-4" title="Shaman King: Flowers">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/shaman-king-flowers-1704249868.png');"></div>
                               		     Shaman King: Flowers                                        </a>
                                    <a href="/shaman-king-flowers-episode-4" title="Shaman King: Flowers">
                                     <p class="time_2">Episode 4</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wonderful-precure-episode-1" title="Wonderful Precure!">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wonderful-precure.png');"></div>
                               		     Wonderful Precure!                                        </a>
                                    <a href="/wonderful-precure-episode-1" title="Wonderful Precure!">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/mingyun-quan-tai-episode-10" title="Mingyun Quan Tai">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/mingyun-quan-tai.png');"></div>
                               		     Mingyun Quan Tai                                        </a>
                                    <a href="/mingyun-quan-tai-episode-10" title="Mingyun Quan Tai">
                                     <p class="time_2">Episode 10</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/one-piece-dai-tannou-kikaku-shi-no-gekai-trafalgar-law-episode-1" title="One Piece: Dai Tannou Kikaku! "Shi no Gekai" Trafalgar Law">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/one-piece-dai-tannou-kikaku-shi-no-gekai-trafalgar-law.png');"></div>
                               		     One Piece: Dai Tannou Kikaku! "Shi no Gekai" Trafalgar Law                                        </a>
                                    <a href="/one-piece-dai-tannou-kikaku-shi-no-gekai-trafalgar-law-episode-1" title="One Piece: Dai Tannou Kikaku! "Shi no Gekai" Trafalgar Law">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ninjala-episode-102" title="Ninjala">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ninjala.png');"></div>
                               		     Ninjala                                        </a>
                                    <a href="/ninjala-episode-102" title="Ninjala">
                                     <p class="time_2">Episode 102</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/kingdom-5th-season-chinese-name-episode-4" title="Kingdom 5th Season (Chinese Name)">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/kingdom-5th-season-chinese-name.png');"></div>
                               		     Kingdom 5th Season (Chinese Name)                                        </a>
                                    <a href="/kingdom-5th-season-chinese-name-episode-4" title="Kingdom 5th Season (Chinese Name)">
                                     <p class="time_2">Episode 4</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/saikyou-tank-no-meikyuu-kouryaku-tairyoku-9999-no-rare-skill-mochi-tank-yuusha-party-wo-tsuihou-sareru-episode-5" title="Saikyou Tank no Meikyuu Kouryaku: Tairyoku 9999 no Rare Skill-mochi Tank, Yuusha Party wo Tsuihou sareru">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/saikyou-tank-no-meikyuu-kouryaku-tairyoku-9999-no-rare-skill-mochi-tank-yuusha-party-wo-tsuihou-sareru-1704248612.png');"></div>
                               		     Saikyou Tank no Meikyuu Kouryaku: Tairyoku 9999 no Rare Skill-mochi Tank, Yuusha Party wo Tsuihou sareru                                        </a>
                                    <a href="/saikyou-tank-no-meikyuu-kouryaku-tairyoku-9999-no-rare-skill-mochi-tank-yuusha-party-wo-tsuihou-sareru-episode-5" title="Saikyou Tank no Meikyuu Kouryaku: Tairyoku 9999 no Rare Skill-mochi Tank, Yuusha Party wo Tsuihou sareru">
                                     <p class="time_2">Episode 5</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/kusuriya-no-hitorigoto-episode-17" title="Kusuriya no Hitorigoto">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/kusuriya-no-hitorigoto-1696009733.png');"></div>
                               		     Kusuriya no Hitorigoto                                        </a>
                                    <a href="/kusuriya-no-hitorigoto-episode-17" title="Kusuriya no Hitorigoto">
                                     <p class="time_2">Episode 17</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/boku-no-kokoro-no-yabai-yatsu-season-2-episode-5" title="Boku no Kokoro no Yabai Yatsu Season 2">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/boku-no-kokoro-no-yabai-yatsu-season-2-1704168450.png');"></div>
                               		     Boku no Kokoro no Yabai Yatsu Season 2                                        </a>
                                    <a href="/boku-no-kokoro-no-yabai-yatsu-season-2-episode-5" title="Boku no Kokoro no Yabai Yatsu Season 2">
                                     <p class="time_2">Episode 5</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ore-dake-level-up-na-ken-episode-5" title="Ore dake Level Up na Ken">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ore-dake-level-up-na-ken-1704247746.png');"></div>
                               		     Ore dake Level Up na Ken                                        </a>
                                    <a href="/ore-dake-level-up-na-ken-episode-5" title="Ore dake Level Up na Ken">
                                     <p class="time_2">Episode 5</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ao-no-exorcist-shimane-illuminati-hen-episode-5" title="Ao no Exorcist: Shimane Illuminati-hen">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ao-no-exorcist-shimane-illuminati-hen-1704168077.png');"></div>
                               		     Ao no Exorcist: Shimane Illuminati-hen                                        </a>
                                    <a href="/ao-no-exorcist-shimane-illuminati-hen-episode-5" title="Ao no Exorcist: Shimane Illuminati-hen">
                                     <p class="time_2">Episode 5</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/mashle-2nd-season-episode-5" title="Mashle 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/mashle-2nd-season-1704187272.png');"></div>
                               		     Mashle 2nd Season                                        </a>
                                    <a href="/mashle-2nd-season-episode-5" title="Mashle 2nd Season">
                                     <p class="time_2">Episode 5</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/bucchigiri-episode-4" title="Bucchigiri?!">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/bucchigiri-2-1704168535.png');"></div>
                               		     Bucchigiri?!                                        </a>
                                    <a href="/bucchigiri-episode-4" title="Bucchigiri?!">
                                     <p class="time_2">Episode 4</p>
                                     </a>
                                       </li>
                                                                            </ul>
                                </nav>
                 </div>
            </div>
        </div>	
          <!-- tao thanh cuon 1-->  
          </div>
     </div>
</div>
<div class="clr"></div>
<style type="text/css">
	#load_ads_2{width: 300px;}
	#load_ads_2.sticky{position:fixed;top: 0;}
    #scrollbar2 .viewport { height: 1000px !important; }
</style>
                                        <div class="main_body">
  <div class="main_body_black">
    <div class="anime_name new_series">
      <i class="icongec-new_series i_pos"></i><h2>Season</h2>
    </div>
    <div class="series">
      <div class="recent" style="padding:10px 0;">
        <div class="viewport">
          <div class="overview">
            <nav class="menu_series cron">
              <ul>
                <li>
                  <span style="color:#898989;">Anime 2024:</span>
                  <a style="display:inline;" href="/sub-category/winter-2024-anime" title="Winter 2024 Anime">Winter</a>
                </li>
                                  <li>
          				  <span style="color:#898989;">Anime 2023:</span>
                            <a style="display:inline;" href="/sub-category/winter-2023-anime" title="Winter 2023 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2023-anime" title="Spring 2023 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2023-anime" title="Summer 2023 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2023-anime" title="Fall 2023 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2022:</span>
                            <a style="display:inline;" href="/sub-category/winter-2022-anime" title="Winter 2022 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2022-anime" title="Spring 2022 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2022-anime" title="Summer 2022 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2022-anime" title="Fall 2022 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2021:</span>
                            <a style="display:inline;" href="/sub-category/winter-2021-anime" title="Winter 2021 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2021-anime" title="Spring 2021 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2021-anime" title="Summer 2021 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2021-anime" title="Fall 2021 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2020:</span>
                            <a style="display:inline;" href="/sub-category/winter-2020-anime" title="Winter 2020 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2020-anime" title="Spring 2020 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2020-anime" title="Summer 2020 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2020-anime" title="Fall 2020 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2019:</span>
                            <a style="display:inline;" href="/sub-category/winter-2019-anime" title="Winter 2019 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2019-anime" title="Spring 2019 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2019-anime" title="Summer 2019 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2019-anime" title="Fall 2019 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2018:</span>
                            <a style="display:inline;" href="/sub-category/winter-2018-anime" title="Winter 2018 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2018-anime" title="Spring 2018 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2018-anime" title="Summer 2018 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2018-anime" title="Fall 2018 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2017:</span>
                            <a style="display:inline;" href="/sub-category/winter-2017-anime" title="Winter 2017 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2017-anime" title="Spring 2017 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2017-anime" title="Summer 2017 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2017-anime" title="Fall 2017 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2016:</span>
                            <a style="display:inline;" href="/sub-category/winter-2016-anime" title="Winter 2016 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2016-anime" title="Spring 2016 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2016-anime" title="Summer 2016 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2016-anime" title="Fall 2016 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2015:</span>
                            <a style="display:inline;" href="/sub-category/winter-2015-anime" title="Winter 2015 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2015-anime" title="Spring 2015 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2015-anime" title="Summer 2015 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2015-anime" title="Fall 2015 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2014:</span>
                            <a style="display:inline;" href="/sub-category/winter-2014-anime" title="Winter 2014 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2014-anime" title="Spring 2014 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2014-anime" title="Summer 2014 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2014-anime" title="Fall 2014 Anime">Fall</a>
                            
          				</li>
                              </ul>
            </nav>
          </div>
        </div>	
      </div>
    </div>
  </div>
</div>
                 </section>                                                                              
            </section>                
            <div class="clr"></div>
<footer>
  <div class="menu_bottom">
    <a href="/about-us.html"><h3>Abouts us</h3></a>
    <a href="/contact-us.html"><h3>Contact us</h3></a>
    <a href="/privacy.html"><h3>Privacy</h3></a>
  </div>
  <div class="croll">
    <div class="big"><i class="icongec-backtop"></i></div>
    <div class="small"><i class="icongec-backtop_mb"></i></div>
  </div>
</footer>
        </div>
    </div>
</div>
<div id="off_light"></div>
<div class="clr"></div>
<div class="mask"></div>
<script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/combo.js?v=1.1"></script>
<script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/crollvertical/js/jquery.tinyscrollbar.min.js?v=1.1"></script>
<div class="notice-400" style=" z-index:99999;position: fixed;bottom: 0;text-align: center;width: 100%; left: 0;padding: 10px;background: #939393;color: white;">We moved site to <a href="https://anitaku.to" title="Gogoanime" alt="Gogoanime - Watch anime online, English anime online HD" style="color: #ffc119">Anitaku.to</a> . Please bookmark new site. Thank you!</div><!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-X2C65NWLE2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-X2C65NWLE2');
</script>
<script>
$(document).ready(function () {
        $('.dropdown-toggle').click(function (e) {
            e.preventDefault();
            if ($(this).parent().find('.dropdown-menu').hasClass("show")) {
                $('.dropdown-menu').removeClass('show');
            }else{
                $('.dropdown-menu').removeClass('show');
                $(this).parent().find('.dropdown-menu').addClass('show');
            }  
        });
        
        $( "input[name='keyword']" ).focus(function() {
           $('.dropdown-menu').removeClass('show');
        });
        
        $(window).on('click', function (e) {
            var container = $(".filters");
            if (!container.is(e.target) && container.has(e.target).length === 0){
                $('.dropdown-menu').removeClass('show');
            }
        });  
        
        multiselect('.cls_genre');
        multiselect('.cls_country');
        multiselect('.cls_season');
        multiselect('.cls_year');
        multiselect('.cls_type');
        multiselect('.cls_status');
		multiselect('.cls_lang');
        multiselectRadio('.cls_sort');
});
</script>

<script>
if(document.getElementById('scrollbar2')){
    $('#scrollbar2').tinyscrollbar();
}
</script>
</body>
</html>","status":200,"url":"https://anitaku.to/search.html?page=2&keyword=one%20piece"},"revalidate":31536000,"tags":[]}