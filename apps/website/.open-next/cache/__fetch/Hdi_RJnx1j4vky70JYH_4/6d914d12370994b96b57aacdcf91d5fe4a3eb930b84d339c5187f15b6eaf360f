{"kind":"FETCH","data":{"headers":{"cache-control":"no-store, no-cache, must-revalidate, post-check=0, pre-check=0","cf-cache-status":"DYNAMIC","cf-ray":"857622ebbe6e5fc6-SIN","connection":"keep-alive","content-encoding":"br","content-type":"text/html; charset=utf-8","date":"Sun, 18 Feb 2024 12:05:07 GMT","expires":"Thu, 19 Nov 1981 08:52:00 GMT","nel":"{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}","pragma":"no-cache","report-to":"{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=6zG%2BMgpZumlpD%2BJoxF%2B5dkV%2B6d10KzwopQS9O1zTKHssgAmIijnOx9HBMMw9WnXXaSN3YtYOfUwBe%2FsmrierH%2FC7Xp8YqmwGa6gHniXYxCtMyZLKtcqTkwCOaYs%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}","server":"cloudflare","set-cookie":"gogoanime=4p1un8mmhurgbpfggee8spnpc7; path=/","transfer-encoding":"chunked","vary":"Accept-Encoding, Accept-Encoding","x-powered-by":"PHP/5.6.13"},"body":"<!DOCTYPE html>
<html lang="en-US"
      xmlns="http://www.w3.org/1999/xhtml"
      itemscope itemtype="http://schema.org/WebPage">
<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#">
    <meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="profile" href="https://gmpg.org/xfn/11">

<link rel="shortcut icon" href="https://cdn.gogocdn.net/files/gogo/img/favicon.ico">
<meta name="google-site-verification" content="shHYF9VOwfpFOdBpleH5jZ2CBuy6nVjX4PrkxMSRqHQ"/>

<title>Watch Fate/stay night: Unlimited Blade Works (TV) Episode 1 English Subbed at Gogoanime</title>

<meta name="robots" content="index,follow" />
<meta name="description" content="&lt;p&gt;&lt;span&gt;New anime adaptation of Fate/stay night, following the Unlimited Blade Works route.&lt;/span&gt;&lt;/p&gt; ... at Gogoanime">
<meta name="keywords" content="Fate/stay night: Unlimited Blade Works (TV) Episode 1, Fate/stay night: Unlimited Blade Works (TV) ep 1, Ep 1,English Subbed">
<meta itemprop="image" content="https://gogocdn.net/images/fall/Fate Stay Night 2014.jpg"/>

<meta property="og:site_name" content="Gogoanime"/>
<meta property="og:locale" content="en_US"/>
<meta property="og:type" content="website"/>
<meta property="fb:admins" content="100010507416730"/>
<meta property="fb:app_id" content="517001538491321" />
<meta property="og:title" content="Watch Fate/stay night: Unlimited Blade Works (TV) Episode 1 English Subbed at Gogoanime"/>
<meta property="og:description" content="&lt;p&gt;&lt;span&gt;New anime adaptation of Fate/stay night, following the Unlimited Blade Works route.&lt;/span&gt;&lt;/p&gt; ... at Gogoanime">
<meta property="og:url" content=""/>
<meta property="og:image" content="https://gogocdn.net/images/fall/Fate Stay Night 2014.jpg"/>
<meta property="og:image:secure_url" content="https://gogocdn.net/images/fall/Fate Stay Night 2014.jpg"/>

<meta property="twitter:card" content="summary"/>
<meta property="twitter:title" content="Watch Fate/stay night: Unlimited Blade Works (TV) Episode 1 English Subbed at Gogoanime"/>
<meta property="twitter:description" content="&lt;p&gt;&lt;span&gt;New anime adaptation of Fate/stay night, following the Unlimited Blade Works route.&lt;/span&gt;&lt;/p&gt; ... at Gogoanime"/>
<meta name="referrer" content="origin">
<meta name="csrf-token" content="65d1f272a8079">

<link rel="canonical" href="https://anitaku.to/fatestay-night-unlimited-blade-works-tv-episode-1"/>
<link rel="alternate" hreflang="en-us" href="https://anitaku.to/fatestay-night-unlimited-blade-works-tv-episode-1"/>


    
  
        <link rel="stylesheet" type="text/css" href="https://anitaku.to/css/style.css?v=1.1" />
    

        <script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/jquery.js"></script>
    <script>
        var base_url = 'https://' + document.domain + '/';
        var base_url_cdn_api = 'https://ajax.gogo-load.com/';
        var api_anclytic = 'https://ajax.gogo-load.com/anclytic-ajax.html';
    </script>
    <script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/main.js?v=1.1"></script>
    <meta name="clckd" content="f783096bb1e81df1cdd2b081dbc0fcf0" />
    <div id="bg_3113168465"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=16&zoneid=8465"></script>
</head>
<body>
<div class="clr"></div>
<div id="wrapper_inside">
    <div id="wrapper">
        <div id="wrapper_bg">
            <header>
  <div class="menu_top_link">
    <div class="user_auth">
      <ul class="auth">
            <li class="userss">
        <i class="icongec-login"></i>
        <a href="/login.html" title="login">Login</a> <a class="fix">|</a>
        <a href="/register.html" title="Sign up" class="reg">Sign up</a>
    </li>

      </ul>
    </div>
    <div class="link_face intro">
      <a class="btn twitter" href="https://twitter.com/anime_around" target="_blank" data-url=""></a>
      <a class="btn reddit" href="https://www.reddit.com/r/AroundAnimeTV/" target="_blank" data-url=""></a>
      <a class="btn facebook" href="https://www.facebook.com/groups/409309663623039" target="_blank"></a>
      <a class="btn discord" style="margin-right:5px;" href="https://discord.gg/kyVfcGuCCQ" target="_blank" data-url=""></a>
      <a class="btn telegram" style="margin-right:5px;" href="https://t.me/joinchat/W4lYQ-RGOQ05MmI9" target="_blank" data-url=""></a>
    </div>
                    
    <div class="submenu_intro">
	    <a href="https://gogotaku.info/login.html" target="_blank">Request</a>
	    <span>|</span>
      <a href="https://anitaku.to/contact-us.html">Contact us</a>
      <span>|</span>
      <a href="https://gogotaku.info" target="_blank">Gogotaku</a>
    </div>          
  </div>
  <div class="clr"></div>

  <!-- banner -->
  <section class="headnav">
    <div class="page_menu_items show">
      <a href="javascript:void(0)" class="menu_mobile">
        <i class="icongec-menu-show"></i>
      </a>
    </div>
    <div class="headnav_left">
      <a href="/home.html"><img src="https://anitaku.to/img/icon/logo.png" class="logo show ads-evt" alt="gogoanime - Watch Anime Online" /></a>
    </div>
    <div class="headnav_menu">
      <!-- menu top -->
      <nav class="menu_top">
        <ul>
              <li class="userss">
        <i class="icongec-login"></i>
        <a href="/login.html" title="login">Login</a> <a class="fix">|</a>
        <a href="/register.html" title="Sign up" class="reg">Sign up</a>
    </li>

          <li class="home "><a href="https://anitaku.to/home.html" title="Home" class="home ads-evt">Home</a></li>
          <li class="list "><a href="https://anitaku.to/anime-list.html" title="Anime list" class="list ads-evt">Anime list</a></li>
          <li class="seri "><a href="https://anitaku.to/new-season.html" title="New season" class="series ads-evt">New season</a></li>
          <li class="movies "><a href="https://anitaku.to/anime-movies.html" title="Movies" class="movie ads-evt">Movies</a></li>
          <li class="movies "><a href="https://anitaku.to/popular.html" title="Popular" class="popular ads-evt">Popular</a></li>
          <li class="movie genre hide">
		    <a href="#" class="genre">Genre</a>
            <ul>
                              <li class=""><a href="/genre/action" title="Action">Action</a></li>
                              <li class=""><a href="/genre/adult-cast" title="Adult Cast">Adult Cast</a></li>
                              <li class=""><a href="/genre/adventure" title="Adventure">Adventure</a></li>
                              <li class=""><a href="/genre/anthropomorphic" title="Anthropomorphic">Anthropomorphic</a></li>
                              <li class=""><a href="/genre/avant-garde" title="Avant Garde">Avant Garde</a></li>
                              <li class=""><a href="/genre/shounen-ai" title="Boys Love">Boys Love</a></li>
                              <li class=""><a href="/genre/cars" title="Cars">Cars</a></li>
                              <li class=""><a href="/genre/cgdct" title="CGDCT">CGDCT</a></li>
                              <li class=""><a href="/genre/childcare" title="Childcare">Childcare</a></li>
                              <li class=""><a href="/genre/comedy" title="Comedy">Comedy</a></li>
                              <li class=""><a href="/genre/comic" title="Comic">Comic</a></li>
                              <li class=""><a href="/genre/crime" title="Crime">Crime</a></li>
                              <li class=""><a href="/genre/crossdressing" title="Crossdressing">Crossdressing</a></li>
                              <li class=""><a href="/genre/delinquents" title="Delinquents">Delinquents</a></li>
                              <li class=""><a href="/genre/dementia" title="Dementia">Dementia</a></li>
                              <li class=""><a href="/genre/demons" title="Demons">Demons</a></li>
                              <li class=""><a href="/genre/detective" title="Detective">Detective</a></li>
                              <li class=""><a href="/genre/drama" title="Drama">Drama</a></li>
                              <li class=""><a href="/genre/dub" title="Dub">Dub</a></li>
                              <li class=""><a href="/genre/ecchi" title="Ecchi">Ecchi</a></li>
                              <li class=""><a href="/genre/erotica" title="Erotica">Erotica</a></li>
                              <li class=""><a href="/genre/family" title="Family">Family</a></li>
                              <li class=""><a href="/genre/fantasy" title="Fantasy">Fantasy</a></li>
                              <li class=""><a href="/genre/gag-humor" title="Gag Humor">Gag Humor</a></li>
                              <li class=""><a href="/genre/game" title="Game">Game</a></li>
                              <li class=""><a href="/genre/gender-bender" title="Gender Bender">Gender Bender</a></li>
                              <li class=""><a href="/genre/gore" title="Gore">Gore</a></li>
                              <li class=""><a href="/genre/gourmet" title="Gourmet">Gourmet</a></li>
                              <li class=""><a href="/genre/harem" title="Harem">Harem</a></li>
                              <li class=""><a href="/genre/hentai" title="Hentai">Hentai</a></li>
                              <li class=""><a href="/genre/high-stakes-game" title="High Stakes Game">High Stakes Game</a></li>
                              <li class=""><a href="/genre/historical" title="Historical">Historical</a></li>
                              <li class=""><a href="/genre/horror" title="Horror">Horror</a></li>
                              <li class=""><a href="/genre/isekai" title="Isekai">Isekai</a></li>
                              <li class=""><a href="/genre/iyashikei" title="Iyashikei">Iyashikei</a></li>
                              <li class=""><a href="/genre/josei" title="Josei">Josei</a></li>
                              <li class=""><a href="/genre/kids" title="Kids">Kids</a></li>
                              <li class=""><a href="/genre/magic" title="Magic">Magic</a></li>
                              <li class=""><a href="/genre/magical-sex-shift" title="Magical Sex Shift">Magical Sex Shift</a></li>
                              <li class=""><a href="/genre/mahou-shoujo" title="Mahou Shoujo">Mahou Shoujo</a></li>
                              <li class=""><a href="/genre/martial-arts" title="Martial Arts">Martial Arts</a></li>
                              <li class=""><a href="/genre/mecha" title="Mecha">Mecha</a></li>
                              <li class=""><a href="/genre/medical" title="Medical">Medical</a></li>
                              <li class=""><a href="/genre/military" title="Military">Military</a></li>
                              <li class=""><a href="/genre/music" title="Music">Music</a></li>
                              <li class=""><a href="/genre/mystery" title="Mystery">Mystery</a></li>
                              <li class=""><a href="/genre/mythology" title="Mythology">Mythology</a></li>
                              <li class=""><a href="/genre/organized-crime" title="Organized Crime">Organized Crime</a></li>
                              <li class=""><a href="/genre/parody" title="Parody">Parody</a></li>
                              <li class=""><a href="/genre/performing-arts" title="Performing Arts">Performing Arts</a></li>
                              <li class=""><a href="/genre/pets" title="Pets">Pets</a></li>
                              <li class=""><a href="/genre/police" title="Police">Police</a></li>
                              <li class=""><a href="/genre/psychological" title="Psychological">Psychological</a></li>
                              <li class=""><a href="/genre/racing" title="Racing">Racing</a></li>
                              <li class=""><a href="/genre/reincarnation" title="Reincarnation">Reincarnation</a></li>
                              <li class=""><a href="/genre/romance" title="Romance">Romance</a></li>
                              <li class=""><a href="/genre/romantic-subtext" title="Romantic Subtext">Romantic Subtext</a></li>
                              <li class=""><a href="/genre/samurai" title="Samurai">Samurai</a></li>
                              <li class=""><a href="/genre/school" title="School">School</a></li>
                              <li class=""><a href="/genre/sci-fi" title="Sci-Fi">Sci-Fi</a></li>
                              <li class=""><a href="/genre/seinen" title="Seinen">Seinen</a></li>
                              <li class=""><a href="/genre/shoujo" title="Shoujo">Shoujo</a></li>
                              <li class=""><a href="/genre/shoujo-ai" title="Shoujo Ai">Shoujo Ai</a></li>
                              <li class=""><a href="/genre/shounen" title="Shounen">Shounen</a></li>
                              <li class=""><a href="/genre/showbiz" title="Showbiz">Showbiz</a></li>
                              <li class=""><a href="/genre/slice-of-life" title="Slice of Life">Slice of Life</a></li>
                              <li class=""><a href="/genre/space" title="Space">Space</a></li>
                              <li class=""><a href="/genre/sports" title="Sports">Sports</a></li>
                              <li class=""><a href="/genre/strategy-game" title="Strategy Game">Strategy Game</a></li>
                              <li class=""><a href="/genre/super-power" title="Super Power">Super Power</a></li>
                              <li class=""><a href="/genre/supernatural" title="Supernatural">Supernatural</a></li>
                              <li class=""><a href="/genre/survival" title="Survival">Survival</a></li>
                              <li class=""><a href="/genre/suspense" title="Suspense">Suspense</a></li>
                              <li class=""><a href="/genre/team-sports" title="Team Sports">Team Sports</a></li>
                              <li class=""><a href="/genre/thriller" title="Thriller">Thriller</a></li>
                              <li class=""><a href="/genre/time-travel" title="Time Travel">Time Travel</a></li>
                              <li class=""><a href="/genre/vampire" title="Vampire">Vampire</a></li>
                              <li class=""><a href="/genre/video-game" title="Video Game">Video Game</a></li>
                              <li class=""><a href="/genre/visual-arts" title="Visual Arts">Visual Arts</a></li>
                              <li class=""><a href="/genre/work-life" title="Work Life">Work Life</a></li>
                              <li class=""><a href="/genre/workplace" title="Workplace">Workplace</a></li>
                              <li class=""><a href="/genre/yaoi" title="Yaoi">Yaoi</a></li>
                              <li class=""><a href="/genre/yuri" title="Yuri">Yuri</a></li>
                          </ul>
          </li>
        </ul>	
      </nav>
      <!-- /menu top -->
    </div>
    <div class="headnav_right">
      <!-- form search--->
      <div class="form">
        <form onsubmit="" id="search-form" action="https://anitaku.to/search.html" method="get">
          <div class="row">
            <input placeholder="search" name="keyword" id="keyword" type="text" value="" autocomplete="off">            
            <input class="btngui" value="" type="button" name="" onclick="do_search();">
            <input id="key_pres" name="key_pres" value="" type="hidden" />
            <input id="link_alias" name="link_alias" value="" type="hidden" />
            <input id="keyword_search_replace" name="keyword_search_replace" value="" type="hidden" />
          </div>
          <div class="hide_search hide"><i class="icongec-muiten"></i></div>
          <div id="header_search_autocomplete"></div>
          <div class="loader"></div>
        </form>           
        <div class="clr"></div>
        <div class="search-iph"><a href="javascript:void(0)"><i class="icongec-search-mb"></i></a></div>
      </div>
	  <div class="clr"></div>                        
      <!-- /form search--->
    </div>
  </section>
  <!-- /banner -->
</header>
            <section class="content">
                <section class="content_left">
                    
  <div class="main_body">
    <div class="anime_name anime_video">
      <i class="icongec-anime_video i_pos"></i>
      <div class="title_name">
        <h2>Fate/stay night: Unlimited Blade Works (TV) Episode 1 English Subbed</h2>
      </div>
      <div class="link_face"><a class="btn facebook" href="javascript:;" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent('anitaku.to/fatestay-night-unlimited-blade-works-tv-episode-1') + '', 'facebook-share-dialog', 'width=626,height=436');return false;">
</a>

<a class="btn twitter" href="https://twitter.com/share" target="_blank" data-url="anitaku.to/fatestay-night-unlimited-blade-works-tv-episode-1"></a></div>
    </div>
    <div class="anime_video_body">
      <h1>Fate/stay night: Unlimited Blade Works (TV) Episode 1 English Subbed at gogoanime</h1>
      <div class="anime_video_body_cate">
        <span>Category:</span>  <a href="/sub-category/fall-2014-anime" title="Fall 2014 Anime">Fall 2014 Anime</a>
        <div class="anime-info">
          <span>Anime info:</span>
          <a href="/category/fatestay-night-unlimited-blade-works-tv" title="Fate/stay night: Unlimited Blade Works (TV)">Fate/stay night: Unlimited Blade Works (TV)</a>
        </div>
 
                &nbsp;
        <div class="anime_video_note_watch">
          Please, <a onclick="freload()" href="javascript:void(0)">reload page</a> if you can't watch the video
        </div>
        <div id="bg_3113286302"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=28&zoneid=6302"></script>       <div class="download-anime">
	     <div class="anime_video_note_watch">
          <div class="anime_video_body_report" style="top:7px;">
            <a class="report-ajax" href="javascript:void(0)">Report this Episode!</a></div>
          </div>
         </div>    
         <div class="favorites_book">
           <ul>
                <li class="dowloads"><a href="https://embtaku.pro/download?id=NDc2MDI=&typesub=Gogoanime-SUB&title=Fate%2Fstay+night%3A+Unlimited+Blade+Works+%28TV%29+Episode+1" target="_blank"><i class="icongec-dowload"></i><span>Download</span></a></li>
                <li class="favorites"><i class="icongec-fa-heart"></i><span>Add to Favorites</span></li>
           </ul>
         </div>
       </div>
       <div class="clr"></div>
               <div class="anime_video_body_watch"><div id="load_anime">
<!------------------ vidstream.io server type = 1  display --------------->
<div class="anime_video_body_watch_items load">
    <div class="play-video">
        <iframe src="https://embtaku.pro/streaming.php?id=NDc2MDI=&title=Fate%2Fstay+night%3A+Unlimited+Blade+Works+%28TV%29+Episode+1" allowfullscreen="true" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
    </div>
</div>

</div></div>
       <div class="anime_video_body_episodes"><div class="anime_video_body_episodes_l">
             <a href="/fatestay-night-unlimited-blade-works-tv-episode-0"><< Fate/stay night: Unlimited Blade Works (TV) Episode 0</a>
     </div>
<div class="anime_video_body_episodes_r">
            <a href="/fatestay-night-unlimited-blade-works-tv-episode-2">Fate/stay night: Unlimited Blade Works (TV) Episode 2 >></a>
    </div></div>
       <div class="clr"></div>
<div class="list_dowload">
	      		      <div><span>For downloading this video, please <a href="/login.html" title="login">login</a> first.</span></div>
		  </div>
<div class="clr"></div>
       <div class="clr"></div>
	   <div style="margin-top:20px;color:#00a651;font-size:18px;">Please scroll down for servers choosing, thank you.</div>
       <br>

       <div class="ads_watch_top">
                    <div style="max-width:620px;height:250px;width:100%;margin:0 auto;overflow:hidden;"><div style="width:300px;float:left;"><div id="bg_3113164551"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=16&zoneid=4551"></script></div>
        <div style="width:300px;float:right;"><div id="bg_311328354"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=2&zoneid=8354"></script></div></div>                </div>
         <div class="clr"></div>

       <div class="anime_muti_link"><ul>
    <li class="anime"> 
        <a href="#" class="active" rel="1" data-video="https://embtaku.pro/streaming.php?id=NDc2MDI=&title=Fate%2Fstay+night%3A+Unlimited+Blade+Works+%28TV%29+Episode+1" ><i class="iconlayer-anime"></i>Vidstreaming<span>Choose this server</span></a>
    </li>
    <li class="vidcdn">
        <a href="#" rel="100" data-video="https://embtaku.pro/embedplus?id=NDc2MDI=&token=kxE9ffFc9HPiXNbORM1Bxw&expires=1708265106" ><i class="iconlayer-anime"></i>Gogo server<span>Choose this server</span></a>
    </li>
    
    		        <li class="streamwish">
            <a href="#" rel="13" data-video="https://awish.pro/e/xehpdcuj66qv">
            <i class="iconlayer-streamwish"></i>Streamwish<span>Choose this server</span></a>
        </li>
    		        <li class="mp4upload">
            <a href="#" rel="3" data-video="https://www.mp4upload.com/embed-athzjpc5qsu2.html">
            <i class="iconlayer-mp4upload"></i>Mp4Upload<span>Choose this server</span></a>
        </li>
    		        <li class="doodstream">
            <a href="#" rel="14" data-video="https://dood.wf/e/xisgjxhc0vd8">
            <i class="iconlayer-doodstream"></i>Doodstream<span>Choose this server</span></a>
        </li>
    		        <li class="filelions">
            <a href="#" rel="15" data-video="https://alions.pro/v/le05xftlhrn4">
            <i class="iconlayer-filelions"></i>Filelions<span>Choose this server</span></a>
        </li>
        
</ul></div>
	   <div class="clr"></div>
       <div class="anime_video_body_comment">
         <div class="anime_video_body_comment_name">
            <div class="btm-center">
                <script id="dsq-count-scr" src="//gogoanimetv.disqus.com/count.js" async></script>
                <div id="specialButton" class="specialButton">
                        <span class="txt">Show</span> <a href="https://gogoanime.vc/fatestay-night-unlimited-blade-works-tv-episode-1#disqus_thread">Comments </a>
                    </div> 
            </div>
         </div>
         <div id="divComments" class="disq">
          <div class="anime_video_body_comment_center">
            <div id="disqus_thread"></div>
          </div>
          <script>
            var disqus_config = function () {
              this.page.url = 'https://gogoanime.vc/fatestay-night-unlimited-blade-works-tv-episode-1';
            };                  
            (function () {  // DON'T EDIT BELOW THIS LINE
              var d = document, s = d.createElement('script');

              s.src = '//gogoanimetv.disqus.com/embed.js';

              s.setAttribute('data-timestamp', +new Date());
              (d.head || d.body).appendChild(s);
            })();
          </script>
          <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
        </div>
      </div>
    </div>
  </div>
  <div class="clr"></div>
  <div class="main_body">
    <div class="anime_name episode_video">
      <i class="icongec-episode_video i_pos"></i>
      <h2>Related episode</h2>
    </div>
    <div class="clr"></div>
    <div class="anime_video_body">
      <input type="hidden" value="2885" id="movie_id" class="movie_id"/>
      <input type="hidden" value="1" id="default_ep" class="default_ep"/>
      <input type="hidden" value="fatestay-night-unlimited-blade-works-tv" id="alias_anime" class="alias_anime"/>
            <ul id="episode_page">
                                                <li>
                                <a href="#" class="active" ep_start = '0' ep_end = '12'>0-12</a>
                            </li>
                                    </ul>
                <div class="clr"></div>
                <div id="load_ep"></div>
                <div class="clr"></div>
    </div>
  </div>
  <div class="clr"></div>
      <div class="login-popup modal-close">
        <h2>Log in to Gogoanime</h2>

        <a href="/login-google.html" class="btn-google">
            <span><img src="https://anitaku.to/img/google.png" alt="google" /></span>
            Log in with Google
        </a>

        <form method='post'  action='/login.html' ><input type='hidden' name='_csrf' value='65d1f272a8079' >        <input type='email' name='email'  placeholder='Email'  value=''>
        <input type='password' name='password'  placeholder='Password' >
        <input type='checkbox' name='remember'  value='1'> <span class="remember-me">Remember me</span><hr>
        
        <button type='submit' >Sign in</button>
        <a class="link-forget" href="/forget.html">Forgot password?</a>

        <a class="link-signup" href="/register.html">Sign up</a>
        </form>    </div>
  <div class="reportForm modal-close">
  <div id="wc-form-wrapper">
    <div class="title">Report <span class="close-poup" onclick="closePoup();">&#x2716;</span></div>
    <div id="msg_eror"></div> 
      <form method='post'  id='contact-form' ><input type='hidden' name='_csrf' value='65d1f272a8079' >    
        <div id="msg_eror"></div> 
        
        <div class="row">
          <label>Select an option</label>
          <select name="message" id="message" class="text">
            <option value="Video broken">Video broken</option>
            <option value="Subtitle out of sync">Subtitle out of sync</option>
            <option value="Wrong Video">Wrong Video</option>
          </select>
        </div>

        <div class="row">
          <input name="title_report" id="title_report" value="fatestay-night-unlimited-blade-works-tv-episode-1" type="hidden">
          <input name="name_report" id="name_report" value="Fate/stay night: Unlimited Blade Works (TV) - Episode 1" type="hidden">
		      <input name="server_report" id="server_report" value="" type="hidden">
        </div>
        
        <div class="row">
          <label>Other problem</label>
          <textarea placeholder="" name="body" id="body"></textarea>
        </div>

        <div class="row">
          <label>Email</label>
          <input type="text" name="email_report" id="email_report" />
        </div>
        
        <div class="row row_cap">
          <label>&nbsp;</label>
          <div class="captcha"><div class='g-recaptcha' data-sitekey='6LdarR0pAAAAAIQncooDH1KC2f_WUGXQcI3q2Xya' ></div></div>
        </div>
        <div class="clr"></div>
        
        <div class="row row_btn">
          <label>&nbsp;</label>
          <input value="Report" class="btngui" type="button">
          <input value="Reset" class="reset" type="reset">
         </div>
      </form>    <div class="clr"></div>
  </div>
</div>
  <div id="bg_3113297366"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=29&zoneid=7366"></script>
                </section>
                 <section class="content_right">
                    <div class="headnav_center">
                          <div class="anime_name adsverting">
                              <i class="icongec-adsverting i_pos"></i>
                              <h2>ADVERTISEMENTS</h2>
                          </div>
                          <div class="headnav_items">
                             
                              <div id="bg_311326291"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3113&sizeid=2&zoneid=6291"></script>                                                      </div>
                    </div>

                                        
                    <div class="clr"></div>
                                          <div class="main_body">
     <div class="main_body_black">
          <div class="anime_name ongoing">
              <i class="icongec-ongoing i_pos"></i><h2>RECENT RELEASE</h2>
          </div>
          <div class="recent">
           <!-- begon -->
          <div id="scrollbar2">
          <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
            <div class="viewport">
                 <div class="overview">
               			<nav class="menu_recent">
                                    <ul>
                                    	                                        <li>
                                        <a href="/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su-episode-19" title="Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su-1698288586.png');"></div>
                               		     Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su                                        </a>
                                    <a href="/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su-episode-19" title="Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su">
                                     <p class="time_2">Episode 19</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/captain-tsubasa-season-2-junior-youth-hen-episode-20" title="Captain Tsubasa Season 2: Junior Youth-hen">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/captain-tsubasa-season-2-junior-youth-hen.png');"></div>
                               		     Captain Tsubasa Season 2: Junior Youth-hen                                        </a>
                                    <a href="/captain-tsubasa-season-2-junior-youth-hen-episode-20" title="Captain Tsubasa Season 2: Junior Youth-hen">
                                     <p class="time_2">Episode 20</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/peerless-martial-spirit-episode-350" title="Peerless Martial Spirit">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/peerless-martial-spirit.png');"></div>
                               		     Peerless Martial Spirit                                        </a>
                                    <a href="/peerless-martial-spirit-episode-350" title="Peerless Martial Spirit">
                                     <p class="time_2">Episode 350</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wu-shen-zhu-zai-episode-412" title="Wu Shen Zhu Zai">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wu-shen-zhu-zai.png');"></div>
                               		     Wu Shen Zhu Zai                                        </a>
                                    <a href="/wu-shen-zhu-zai-episode-412" title="Wu Shen Zhu Zai">
                                     <p class="time_2">Episode 412</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/doupo-cangqiong-nian-fan-episode-84" title="Doupo Cangqiong: Nian Fan">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/doupo-cangqiong-nian-fan.png');"></div>
                               		     Doupo Cangqiong: Nian Fan                                        </a>
                                    <a href="/doupo-cangqiong-nian-fan-episode-84" title="Doupo Cangqiong: Nian Fan">
                                     <p class="time_2">Episode 84</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/legend-of-xianwu-2nd-season-episode-22" title="Legend of Xianwu 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/legend-of-xianwu-2nd-season.png');"></div>
                               		     Legend of Xianwu 2nd Season                                        </a>
                                    <a href="/legend-of-xianwu-2nd-season-episode-22" title="Legend of Xianwu 2nd Season">
                                     <p class="time_2">Episode 22</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ninja-kamui-episode-2" title="Ninja Kamui">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ninja-kamui.png');"></div>
                               		     Ninja Kamui                                        </a>
                                    <a href="/ninja-kamui-episode-2" title="Ninja Kamui">
                                     <p class="time_2">Episode 2</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/taigu-xing-shen-jue-episode-9" title="Taigu Xing Shen Jue">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/taigu-xing-shen-jue.png');"></div>
                               		     Taigu Xing Shen Jue                                        </a>
                                    <a href="/taigu-xing-shen-jue-episode-9" title="Taigu Xing Shen Jue">
                                     <p class="time_2">Episode 9</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/kiss-dum-r-meguriahi-episode-1" title="Kiss Dum R: Meguriahi">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/kiss-dum-r-meguriahi.png');"></div>
                               		     Kiss Dum R: Meguriahi                                        </a>
                                    <a href="/kiss-dum-r-meguriahi-episode-1" title="Kiss Dum R: Meguriahi">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/nanatsu-no-taizai-mokushiroku-no-yonkishi-episode-17" title="Nanatsu no Taizai: Mokushiroku no Yonkishi">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/nanatsu-no-taizai-mokushiroku-no-yonkishi-1696010923.png');"></div>
                               		     Nanatsu no Taizai: Mokushiroku no Yonkishi                                        </a>
                                    <a href="/nanatsu-no-taizai-mokushiroku-no-yonkishi-episode-17" title="Nanatsu no Taizai: Mokushiroku no Yonkishi">
                                     <p class="time_2">Episode 17</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/xian-wang-de-richang-shenghuo-4-episode-11" title="Xian Wang de Richang Shenghuo 4">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/xian-wang-de-richang-shenghuo-4.png');"></div>
                               		     Xian Wang de Richang Shenghuo 4                                        </a>
                                    <a href="/xian-wang-de-richang-shenghuo-4-episode-11" title="Xian Wang de Richang Shenghuo 4">
                                     <p class="time_2">Episode 11</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/shi-fang-wu-sheng-episode-16" title="Shi Fang Wu Sheng">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/shi-fang-wu-sheng.png');"></div>
                               		     Shi Fang Wu Sheng                                        </a>
                                    <a href="/shi-fang-wu-sheng-episode-16" title="Shi Fang Wu Sheng">
                                     <p class="time_2">Episode 16</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/mingyun-quan-tai-episode-12" title="Mingyun Quan Tai">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/mingyun-quan-tai.png');"></div>
                               		     Mingyun Quan Tai                                        </a>
                                    <a href="/mingyun-quan-tai-episode-12" title="Mingyun Quan Tai">
                                     <p class="time_2">Episode 12</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/meitou-isekai-no-yu-kaitakuki-around-40-onsen-mania-no-tensei-saki-wa-nonbiri-onsen-tengoku-deshita-episode-6" title="Meitou "Isekai no Yu" Kaitakuki: Around 40 Onsen Mania no Tensei Saki wa, Nonbiri Onsen Tengoku deshita">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/meitou-isekai-no-yu-kaitakuki-around-40-onsen-mania-no-tensei-saki-wa-nonbiri-onsen-tengoku-deshita.png');"></div>
                               		     Meitou "Isekai no Yu" Kaitakuki: Around 40 Onsen Mania no Tensei Saki wa, Nonbiri Onsen Tengoku deshita                                        </a>
                                    <a href="/meitou-isekai-no-yu-kaitakuki-around-40-onsen-mania-no-tensei-saki-wa-nonbiri-onsen-tengoku-deshita-episode-6" title="Meitou "Isekai no Yu" Kaitakuki: Around 40 Onsen Mania no Tensei Saki wa, Nonbiri Onsen Tengoku deshita">
                                     <p class="time_2">Episode 6</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/tottemo-luckyman-episode-2" title="Tottemo! Luckyman">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/tottemo-luckyman.png');"></div>
                               		     Tottemo! Luckyman                                        </a>
                                    <a href="/tottemo-luckyman-episode-2" title="Tottemo! Luckyman">
                                     <p class="time_2">Episode 2</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/one-piece-episode-1094" title="One Piece">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/images/anime/One-piece.jpg');"></div>
                               		     One Piece                                        </a>
                                    <a href="/one-piece-episode-1094" title="One Piece">
                                     <p class="time_2">Episode 1094</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wonderful-precure-episode-3" title="Wonderful Precure!">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wonderful-precure.png');"></div>
                               		     Wonderful Precure!                                        </a>
                                    <a href="/wonderful-precure-episode-3" title="Wonderful Precure!">
                                     <p class="time_2">Episode 3</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/kingdom-5th-season-chinese-name-episode-6" title="Kingdom 5th Season (Chinese Name)">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/kingdom-5th-season-chinese-name.png');"></div>
                               		     Kingdom 5th Season (Chinese Name)                                        </a>
                                    <a href="/kingdom-5th-season-chinese-name-episode-6" title="Kingdom 5th Season (Chinese Name)">
                                     <p class="time_2">Episode 6</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/saikyou-tank-no-meikyuu-kouryaku-tairyoku-9999-no-rare-skill-mochi-tank-yuusha-party-wo-tsuihou-sareru-episode-7" title="Saikyou Tank no Meikyuu Kouryaku: Tairyoku 9999 no Rare Skill-mochi Tank, Yuusha Party wo Tsuihou sareru">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/saikyou-tank-no-meikyuu-kouryaku-tairyoku-9999-no-rare-skill-mochi-tank-yuusha-party-wo-tsuihou-sareru-1704248612.png');"></div>
                               		     Saikyou Tank no Meikyuu Kouryaku: Tairyoku 9999 no Rare Skill-mochi Tank, Yuusha Party wo Tsuihou sareru                                        </a>
                                    <a href="/saikyou-tank-no-meikyuu-kouryaku-tairyoku-9999-no-rare-skill-mochi-tank-yuusha-party-wo-tsuihou-sareru-episode-7" title="Saikyou Tank no Meikyuu Kouryaku: Tairyoku 9999 no Rare Skill-mochi Tank, Yuusha Party wo Tsuihou sareru">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/kusuriya-no-hitorigoto-episode-19" title="Kusuriya no Hitorigoto">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/kusuriya-no-hitorigoto-1696009733.png');"></div>
                               		     Kusuriya no Hitorigoto                                        </a>
                                    <a href="/kusuriya-no-hitorigoto-episode-19" title="Kusuriya no Hitorigoto">
                                     <p class="time_2">Episode 19</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/boku-no-kokoro-no-yabai-yatsu-season-2-episode-7" title="Boku no Kokoro no Yabai Yatsu Season 2">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/boku-no-kokoro-no-yabai-yatsu-season-2-1704168450.png');"></div>
                               		     Boku no Kokoro no Yabai Yatsu Season 2                                        </a>
                                    <a href="/boku-no-kokoro-no-yabai-yatsu-season-2-episode-7" title="Boku no Kokoro no Yabai Yatsu Season 2">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ao-no-exorcist-shimane-illuminati-hen-episode-7" title="Ao no Exorcist: Shimane Illuminati-hen">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ao-no-exorcist-shimane-illuminati-hen-1704168077.png');"></div>
                               		     Ao no Exorcist: Shimane Illuminati-hen                                        </a>
                                    <a href="/ao-no-exorcist-shimane-illuminati-hen-episode-7" title="Ao no Exorcist: Shimane Illuminati-hen">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/mashle-2nd-season-episode-6" title="Mashle 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/mashle-2nd-season-1704187272.png');"></div>
                               		     Mashle 2nd Season                                        </a>
                                    <a href="/mashle-2nd-season-episode-6" title="Mashle 2nd Season">
                                     <p class="time_2">Episode 6</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ore-dake-level-up-na-ken-episode-7" title="Ore dake Level Up na Ken">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ore-dake-level-up-na-ken-1704247746.png');"></div>
                               		     Ore dake Level Up na Ken                                        </a>
                                    <a href="/ore-dake-level-up-na-ken-episode-7" title="Ore dake Level Up na Ken">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/bucchigiri-episode-6" title="Bucchigiri?!">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/bucchigiri-2-1704168535.png');"></div>
                               		     Bucchigiri?!                                        </a>
                                    <a href="/bucchigiri-episode-6" title="Bucchigiri?!">
                                     <p class="time_2">Episode 6</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/yubisaki-to-renren-episode-7" title="Yubisaki to Renren">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/yubisaki-to-renren-1704252298.png');"></div>
                               		     Yubisaki to Renren                                        </a>
                                    <a href="/yubisaki-to-renren-episode-7" title="Yubisaki to Renren">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ragna-crimson-episode-18" title="Ragna Crimson">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ragna-crimson-1698304218.png');"></div>
                               		     Ragna Crimson                                        </a>
                                    <a href="/ragna-crimson-episode-18" title="Ragna Crimson">
                                     <p class="time_2">Episode 18</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/kekkon-yubiwa-monogatari-episode-7" title="Kekkon Yubiwa Monogatari">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/kekkon-yubiwa-monogatari-1704186162.png');"></div>
                               		     Kekkon Yubiwa Monogatari                                        </a>
                                    <a href="/kekkon-yubiwa-monogatari-episode-7" title="Kekkon Yubiwa Monogatari">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/douluo-dalu-ii-jueshi-tangmen-episode-36" title="Douluo Dalu II: Jueshi Tangmen">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/douluo-dalu-ii-jueshi-tangmen.png');"></div>
                               		     Douluo Dalu II: Jueshi Tangmen                                        </a>
                                    <a href="/douluo-dalu-ii-jueshi-tangmen-episode-36" title="Douluo Dalu II: Jueshi Tangmen">
                                     <p class="time_2">Episode 36</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/megumi-no-daigo-kyuukoku-no-orange-episode-18" title="Megumi no Daigo: Kyuukoku no Orange">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/megumi-no-daigo-kyuukoku-no-orange-1695095703.png');"></div>
                               		     Megumi no Daigo: Kyuukoku no Orange                                        </a>
                                    <a href="/megumi-no-daigo-kyuukoku-no-orange-episode-18" title="Megumi no Daigo: Kyuukoku no Orange">
                                     <p class="time_2">Episode 18</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wan-jie-du-zun-2nd-season-episode-159" title="Wan Jie Du Zun 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wan-jie-du-zun-2nd-season.png');"></div>
                               		     Wan Jie Du Zun 2nd Season                                        </a>
                                    <a href="/wan-jie-du-zun-2nd-season-episode-159" title="Wan Jie Du Zun 2nd Season">
                                     <p class="time_2">Episode 159</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/submarine-707r-episode-2" title="Submarine 707R">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/submarine-707r.png');"></div>
                               		     Submarine 707R                                        </a>
                                    <a href="/submarine-707r-episode-2" title="Submarine 707R">
                                     <p class="time_2">Episode 2</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/spirit-master-episode-43" title="Spirit Master">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/spirit-master.png');"></div>
                               		     Spirit Master                                        </a>
                                    <a href="/spirit-master-episode-43" title="Spirit Master">
                                     <p class="time_2">Episode 43</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/my-apprentice-is-female-emperor-episode-18" title="My Apprentice is Female Emperor">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/my-apprentice-is-female-emperor.png');"></div>
                               		     My Apprentice is Female Emperor                                        </a>
                                    <a href="/my-apprentice-is-female-emperor-episode-18" title="My Apprentice is Female Emperor">
                                     <p class="time_2">Episode 18</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/chaos-sword-god-season-2-episode-17" title="Chaos Sword God Season 2">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/chaos-sword-god-season-2.png');"></div>
                               		     Chaos Sword God Season 2                                        </a>
                                    <a href="/chaos-sword-god-season-2-episode-17" title="Chaos Sword God Season 2">
                                     <p class="time_2">Episode 17</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/lian-qi-shi-wan-nian-episode-108" title="Lian Qi Shi Wan Nian">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/lian-qi-shi-wan-nian.png');"></div>
                               		     Lian Qi Shi Wan Nian                                        </a>
                                    <a href="/lian-qi-shi-wan-nian-episode-108" title="Lian Qi Shi Wan Nian">
                                     <p class="time_2">Episode 108</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/bu-shi-bu-mie-episode-15" title="Bu Shi Bu Mie">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/bu-shi-bu-mie.png');"></div>
                               		     Bu Shi Bu Mie                                        </a>
                                    <a href="/bu-shi-bu-mie-episode-15" title="Bu Shi Bu Mie">
                                     <p class="time_2">Episode 15</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/nitian-xie-shen-2nd-season-episode-160" title="Nitian Xie Shen 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/nitian-xie-shen-2nd-season.png');"></div>
                               		     Nitian Xie Shen 2nd Season                                        </a>
                                    <a href="/nitian-xie-shen-2nd-season-episode-160" title="Nitian Xie Shen 2nd Season">
                                     <p class="time_2">Episode 160</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/first-class-taker-episode-115-episode-95" title="First Class Taker Episode 115">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/first-class-taker.png');"></div>
                               		     First Class Taker Episode 115                                        </a>
                                    <a href="/first-class-taker-episode-115-episode-95" title="First Class Taker Episode 115">
                                     <p class="time_2">Episode 95</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/disciples-say-im-invincible-episode-54" title="Disciples Say I’m Invincible">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/disciples-say-im-invincible.png');"></div>
                               		     Disciples Say I’m Invincible                                        </a>
                                    <a href="/disciples-say-im-invincible-episode-54" title="Disciples Say I’m Invincible">
                                     <p class="time_2">Episode 54</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/supervillain-episode-44" title="Supervillain">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/upervillain.png');"></div>
                               		     Supervillain                                        </a>
                                    <a href="/supervillain-episode-44" title="Supervillain">
                                     <p class="time_2">Episode 44</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/anti-routine-system-episode-91" title="Anti-routine system">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/anti-routine-system.png');"></div>
                               		     Anti-routine system                                        </a>
                                    <a href="/anti-routine-system-episode-91" title="Anti-routine system">
                                     <p class="time_2">Episode 91</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/nitian-xie-shen-2023-episode-24" title="Nitian Xie Shen (2023)">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/nitian-xie-shen-2023.png');"></div>
                               		     Nitian Xie Shen (2023)                                        </a>
                                    <a href="/nitian-xie-shen-2023-episode-24" title="Nitian Xie Shen (2023)">
                                     <p class="time_2">Episode 24</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/bing-huo-mo-chu-episode-130" title="Bing Huo Mo Chu">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/bing-huo-mo-chu.png');"></div>
                               		     Bing Huo Mo Chu                                        </a>
                                    <a href="/bing-huo-mo-chu-episode-130" title="Bing Huo Mo Chu">
                                     <p class="time_2">Episode 130</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/zhen-wu-dianfeng-2nd-season-episode-76" title="Zhen Wu Dianfeng 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/zhen-wu-dianfeng-2nd-season.png');"></div>
                               		     Zhen Wu Dianfeng 2nd Season                                        </a>
                                    <a href="/zhen-wu-dianfeng-2nd-season-episode-76" title="Zhen Wu Dianfeng 2nd Season">
                                     <p class="time_2">Episode 76</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/pokemon-shinsaku-anime-episode-40" title="Pokemon (Shinsaku Anime)">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/pokemon-shinsaku-anime-1680202985.png');"></div>
                               		     Pokemon (Shinsaku Anime)                                        </a>
                                    <a href="/pokemon-shinsaku-anime-episode-40" title="Pokemon (Shinsaku Anime)">
                                     <p class="time_2">Episode 40</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/my-master-is-an-emperor-episode-74" title="My Master Is An Emperor">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/my-master-is-an-emperor.png');"></div>
                               		     My Master Is An Emperor                                        </a>
                                    <a href="/my-master-is-an-emperor-episode-74" title="My Master Is An Emperor">
                                     <p class="time_2">Episode 74</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/no-1-player-episode-60" title="No.1 Player">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/no-1-player.png');"></div>
                               		     No.1 Player                                        </a>
                                    <a href="/no-1-player-episode-60" title="No.1 Player">
                                     <p class="time_2">Episode 60</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/i-was-invincible-long-ago-episode-23" title="I was invincible long ago">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/i-was-invincible-long-ago.png');"></div>
                               		     I was invincible long ago                                        </a>
                                    <a href="/i-was-invincible-long-ago-episode-23" title="I was invincible long ago">
                                     <p class="time_2">Episode 23</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/i-got-god-pulse-in-beginninginvincible-episode-44" title="i Got God Pulse In Beginning,Invincible">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/i-got-god-pulse-in-beginninginvincible.png');"></div>
                               		     i Got God Pulse In Beginning,Invincible                                        </a>
                                    <a href="/i-got-god-pulse-in-beginninginvincible-episode-44" title="i Got God Pulse In Beginning,Invincible">
                                     <p class="time_2">Episode 44</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ninjala-episode-104" title="Ninjala">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ninjala.png');"></div>
                               		     Ninjala                                        </a>
                                    <a href="/ninjala-episode-104" title="Ninjala">
                                     <p class="time_2">Episode 104</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/cardfight-vanguard-divinez-episode-6" title="Cardfight!! Vanguard: Divinez">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/cardfight-vanguard-divinez.png');"></div>
                               		     Cardfight!! Vanguard: Divinez                                        </a>
                                    <a href="/cardfight-vanguard-divinez-episode-6" title="Cardfight!! Vanguard: Divinez">
                                     <p class="time_2">Episode 6</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/pon-no-michi-episode-7" title="Pon no Michi">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/pon-no-michi-1704247961.png');"></div>
                               		     Pon no Michi                                        </a>
                                    <a href="/pon-no-michi-episode-7" title="Pon no Michi">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/undead-unluck-episode-19" title="Undead Unluck">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/undead-unluck-1696013292.png');"></div>
                               		     Undead Unluck                                        </a>
                                    <a href="/undead-unluck-episode-19" title="Undead Unluck">
                                     <p class="time_2">Episode 19</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/snack-basue-episode-6" title="Snack Basue">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/snack-basue.png');"></div>
                               		     Snack Basue                                        </a>
                                    <a href="/snack-basue-episode-6" title="Snack Basue">
                                     <p class="time_2">Episode 6</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/momochi-san-chi-no-ayakashi-ouji-episode-7" title="Momochi-san Chi no Ayakashi Ouji">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/momochi-san-chi-no-ayakashi-ouji-1704189408.png');"></div>
                               		     Momochi-san Chi no Ayakashi Ouji                                        </a>
                                    <a href="/momochi-san-chi-no-ayakashi-ouji-episode-7" title="Momochi-san Chi no Ayakashi Ouji">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/xi-xing-ji-nian-fan-episode-32" title="Xi Xing Ji: Nian Fan">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/xi-xing-ji-nian-fan.png');"></div>
                               		     Xi Xing Ji: Nian Fan                                        </a>
                                    <a href="/xi-xing-ji-nian-fan-episode-32" title="Xi Xing Ji: Nian Fan">
                                     <p class="time_2">Episode 32</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/chiyu-mahou-no-machigatta-tsukaikata-senjou-wo-kakeru-kaifuku-youin-episode-7" title="Chiyu Mahou no Machigatta Tsukaikata: Senjou wo Kakeru Kaifuku Youin">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/chiyu-mahou-no-machigatta-tsukaikata-senjou-wo-kakeru-kaifuku-youin-1704169353.png');"></div>
                               		     Chiyu Mahou no Machigatta Tsukaikata: Senjou wo Kakeru Kaifuku Youin                                        </a>
                                    <a href="/chiyu-mahou-no-machigatta-tsukaikata-senjou-wo-kakeru-kaifuku-youin-episode-7" title="Chiyu Mahou no Machigatta Tsukaikata: Senjou wo Kakeru Kaifuku Youin">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/saijaku-tamer-wa-gomi-hiroi-no-tabi-wo-hajimemashita-episode-6" title="Saijaku Tamer wa Gomi Hiroi no Tabi wo Hajimemashita.">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/saijaku-tamer-wa-gomi-hiroi-no-tabi-wo-hajimemashita-1704248035.png');"></div>
                               		     Saijaku Tamer wa Gomi Hiroi no Tabi wo Hajimemashita.                                        </a>
                                    <a href="/saijaku-tamer-wa-gomi-hiroi-no-tabi-wo-hajimemashita-episode-6" title="Saijaku Tamer wa Gomi Hiroi no Tabi wo Hajimemashita.">
                                     <p class="time_2">Episode 6</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/sousou-no-frieren-episode-23" title="Sousou no Frieren">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/sousou-no-frieren-1696000134.png');"></div>
                               		     Sousou no Frieren                                        </a>
                                    <a href="/sousou-no-frieren-episode-23" title="Sousou no Frieren">
                                     <p class="time_2">Episode 23</p>
                                     </a>
                                       </li>
                                                                            </ul>
                                </nav>
                 </div>
            </div>
        </div>	
          <!-- tao thanh cuon 1-->  
          </div>
     </div>
</div>
<div class="clr"></div>
<style type="text/css">
	#load_ads_2{width: 300px;}
	#load_ads_2.sticky{position:fixed;top: 0;}
    #scrollbar2 .viewport { height: 1000px !important; }
</style>
                                        <div class="main_body">
  <div class="main_body_black">
    <div class="anime_name new_series">
      <i class="icongec-new_series i_pos"></i><h2>Season</h2>
    </div>
    <div class="series">
      <div class="recent" style="padding:10px 0;">
        <div class="viewport">
          <div class="overview">
            <nav class="menu_series cron">
              <ul>
                <li>
                  <span style="color:#898989;">Anime 2024:</span>
                  <a style="display:inline;" href="/sub-category/winter-2024-anime" title="Winter 2024 Anime">Winter</a>
                </li>
                                  <li>
          				  <span style="color:#898989;">Anime 2023:</span>
                            <a style="display:inline;" href="/sub-category/winter-2023-anime" title="Winter 2023 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2023-anime" title="Spring 2023 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2023-anime" title="Summer 2023 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2023-anime" title="Fall 2023 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2022:</span>
                            <a style="display:inline;" href="/sub-category/winter-2022-anime" title="Winter 2022 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2022-anime" title="Spring 2022 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2022-anime" title="Summer 2022 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2022-anime" title="Fall 2022 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2021:</span>
                            <a style="display:inline;" href="/sub-category/winter-2021-anime" title="Winter 2021 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2021-anime" title="Spring 2021 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2021-anime" title="Summer 2021 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2021-anime" title="Fall 2021 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2020:</span>
                            <a style="display:inline;" href="/sub-category/winter-2020-anime" title="Winter 2020 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2020-anime" title="Spring 2020 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2020-anime" title="Summer 2020 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2020-anime" title="Fall 2020 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2019:</span>
                            <a style="display:inline;" href="/sub-category/winter-2019-anime" title="Winter 2019 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2019-anime" title="Spring 2019 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2019-anime" title="Summer 2019 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2019-anime" title="Fall 2019 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2018:</span>
                            <a style="display:inline;" href="/sub-category/winter-2018-anime" title="Winter 2018 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2018-anime" title="Spring 2018 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2018-anime" title="Summer 2018 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2018-anime" title="Fall 2018 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2017:</span>
                            <a style="display:inline;" href="/sub-category/winter-2017-anime" title="Winter 2017 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2017-anime" title="Spring 2017 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2017-anime" title="Summer 2017 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2017-anime" title="Fall 2017 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2016:</span>
                            <a style="display:inline;" href="/sub-category/winter-2016-anime" title="Winter 2016 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2016-anime" title="Spring 2016 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2016-anime" title="Summer 2016 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2016-anime" title="Fall 2016 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2015:</span>
                            <a style="display:inline;" href="/sub-category/winter-2015-anime" title="Winter 2015 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2015-anime" title="Spring 2015 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2015-anime" title="Summer 2015 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2015-anime" title="Fall 2015 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2014:</span>
                            <a style="display:inline;" href="/sub-category/winter-2014-anime" title="Winter 2014 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2014-anime" title="Spring 2014 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2014-anime" title="Summer 2014 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2014-anime" title="Fall 2014 Anime">Fall</a>
                            
          				</li>
                              </ul>
            </nav>
          </div>
        </div>	
      </div>
    </div>
  </div>
</div>
                 </section>                                                                              
            </section>                
            <div class="clr"></div>
<footer>
  <div class="menu_bottom">
    <a href="/about-us.html"><h3>Abouts us</h3></a>
    <a href="/contact-us.html"><h3>Contact us</h3></a>
    <a href="/privacy.html"><h3>Privacy</h3></a>
  </div>
  <div class="croll">
    <div class="big"><i class="icongec-backtop"></i></div>
    <div class="small"><i class="icongec-backtop_mb"></i></div>
  </div>
</footer>
        </div>
    </div>
</div>
<div id="off_light"></div>
<div class="clr"></div>
<div class="mask"></div>
<script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/combo.js?v=1.1"></script>
<script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/crollvertical/js/jquery.tinyscrollbar.min.js?v=1.1"></script>
<div class="notice-400" style=" z-index:99999;position: fixed;bottom: 0;text-align: center;width: 100%; left: 0;padding: 10px;background: #939393;color: white;">We moved site to <a href="https://anitaku.to" title="Gogoanime" alt="Gogoanime - Watch anime online, English anime online HD" style="color: #ffc119">Anitaku.to</a> . Please bookmark new site. Thank you!</div><!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-X2C65NWLE2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-X2C65NWLE2');
</script>
  <script type="text/javascript" src="https://www.google.com/recaptcha/api.js"></script>
  <script type="text/javascript">
          $(".favorites").click(function (e) {$(".mask").fadeIn();$('.login-popup').fadeIn();e.stopPropagation()});
      $(".watchs").click(function (e) {$(".mask").fadeIn();$('.login-popup').fadeIn();e.stopPropagation()});   
        $('.report-ajax').click(function (e) {e.preventDefault();$(".mask").fadeIn();$('.reportForm').fadeIn()});       
    $(".btngui").click(function(e) {var plays = $(".play-video iframe").attr('src');$("#server_report").val(plays);disabledHome('.btngui');var elm_other = '#contact-form textarea',recaptcha = $("#g-recaptcha-response").val();if($(elm_other).val() == ''){$("#msg_eror").html('Other problem cannot be blank.')}else if(recaptcha === ""){$("#msg_eror").html('Please check the recaptcha.')}else{dulieu = $("#contact-form").serialize();$.post(base_url+"report.html",dulieu, xuly)}}); 
    function xuly(data){if (data=="OK"){$("#contact-form input:text").val('');$("#contact-form input:text").val('');$("#contact-form input:radio").prop( "checked", false);$("#contact-form textarea").val('');$("#contact-form").hide();$("#msg_eror").html('Thank you for report.We will check and fix this episode asap');setTimeout(function(){ $('.mask').fadeOut();$('.reportForm').fadeOut(); }, 3000)}else{$("#msg_eror").html(data)}}
    setTimeout(function(){$.ajax({url: 'https://check.gogo-play.net/anime.php?id=NDc2MDI=&type=[{"13":{"link":"https:\/\/awish.pro\/e\/xehpdcuj66qv"}},{"14":{"link":"https:\/\/dood.wf\/e\/xisgjxhc0vd8"}},{"15":{"link":"https:\/\/alions.pro\/v\/le05xftlhrn4"}}]',type: 'get',dataType: 'json',success: function (data) {console.log(data)}});}, 10000);
  </script>
  <script>
    if(document.getElementById('episode_page')){
      var ep_start = $('#episode_page a.active').attr('ep_start');
      var ep_end = $('#episode_page a.active').attr('ep_end');
      var id = $("input#movie_id").val();
      var default_ep = $("input#default_ep").val();
      var alias = $("input#alias_anime").val();
      loadListEpisode('#episode_page a.active',ep_start,ep_end,id,default_ep,alias);
    }
  </script>

<script>
if(document.getElementById('scrollbar2')){
    $('#scrollbar2').tinyscrollbar();
}
</script>
</body>
</html>","status":200,"url":"https://anitaku.to/fatestay-night-unlimited-blade-works-tv-episode-1"},"revalidate":31536000,"tags":[]}